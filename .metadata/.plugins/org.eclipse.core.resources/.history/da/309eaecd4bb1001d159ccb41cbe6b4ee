/***************************************************************************************
 * M�dulo      : tpm.h
 *
 * Revis�o     : 1.0
 *
 * Data        : 16/02/2022
 *
 * Descri��o   : Arquivo com implementa��es dos M�dulos Timer/PWM (TPM) da Familia Kinetis KL05.
 *
 * Coment�rios : Nenhum.
 *
 * Autor(es)   : Matheus Leitzke Pinto
 ***************************************************************************************/

#ifndef TPM_DRV_H_
#define TPM_DRV_H_

/*ARQUIVOS DE CABE�ALHO*/
/*=======================================================================================*/

#include "drivers/common_driver.h"

/*FIM: ARQUIVOS DE CABE�ALHO*/
/*=======================================================================================*/

/*TIPOS ENUMERADOS*/
/*=======================================================================================*/

/*Poss�veis modos de opera��o dos m�dulos TPM*/
typedef enum{
	TPM_OUT_COMPARE_MODE, 		/* Modo comparador de sa�da*/
	TPM_IN_COMPARE_MODE	,		/* Modo captura de entrada*/
	TPM_EDGE_PWM_MODE	,		/* Modo PWM alinhado a borda*/
	TPM_CENTER_PWM_MODE			/* Modo PWM alinhado ao centro */
}tpmChMode_t;

/*Poss�veis configura��es do modos de opera��o dos m�dulos TPM*/
typedef enum{
	TPM_OUT_TOGGLE_GONFIG		, 	/*Modo compara��o de sa�da: inverte l�gica de sa�da*/
	TPM_OUT_CLEAR_GONFIG		,  	/*Modo compara��o de sa�da: limpa sa�da*/
	TPM_OUT_SET_GONFIG			,  	/*Modo compara��o de sa�da: seta sa�da*/
	TPM_IN_RISING_EDGE_CONFIG	, 	/*Modo captura de entrada: borda de subida*/
	TPM_IN_FALLING_EDGE_CONFIG	, 	/*Modo captura de entrada: borda de descida*/
	TPM_IN_BOTH_EDGE_CONFIG		, 	/*Modo captura de entrada: borda de subida/descida*/
	TPM_PWM_HIGH_TRUE_CONFIG	,	/*Modos PWM: Pulso � o n�vel*/
	TPM_PWM_HIGH_LOW_CONFIG		,	/*Modos PWM: Pulso � o baixo*/
}tpmChConfig_t;

/*Poss�veis valores de divis�es do prescaler dos m�dulos TPM*/
typedef enum{
	TPM_PRESCALER_DIV_1		=	0x0, 	/*Prescaler do m�dulo TPM divide por 0*/
	TPM_PRESCALER_DIV_2		=	0x1,  	/*Prescaler do m�dulo TPM divide por 1*/
	TPM_PRESCALER_DIV_4		=	0x2,  	/*Prescaler do m�dulo TPM divide por 2*/
	TPM_PRESCALER_DIV_8		=	0x3,  	/*Prescaler do m�dulo TPM divide por 3*/
	TPM_PRESCALER_DIV_16	=	0x4,  	/*Prescaler do m�dulo TPM divide por 4*/
	TPM_PRESCALER_DIV_32	=	0x5,  	/*Prescaler do m�dulo TPM divide por 5*/
	TPM_PRESCALER_DIV_64	=	0x6,  	/*Prescaler do m�dulo TPM divide por 6*/
	TPM_PRESCALER_DIV_128	=	0x7,  	/*Prescaler do m�dulo TPM divide por 7*/
}tpmPrescalerValues_t;

/*Poss�veis fontes de clock*/
typedef enum{
	TPM_CNT_CLOCK_DISABLE = 0U,
	TPM_CNT_CLOCK_FLL = 1U,
	TPM_CNT_CLOCK_OSC = 2U,
	TPM_CNT_CLOCK_IRC = 3U
}tpmClkSrc_t;

/*FIM: TIPOS ENUMERADOS*/
/*=======================================================================================*/

/*PROT�TIPOS - FUN��ES INLINE*/
/*=======================================================================================*/

static inline void TPM_InitCounter(TPM_Type *base);
static inline uint16_t TPM_GetChValue(TPM_Type *base, uint8_t channel);
static inline void TPM_SetChMatch(TPM_Type *base, uint8_t channel, uint16_t match);
static inline void TPM_EnableIRQ(TPM_Type *base);
static inline uint8_t TPM_GetIRQFlag(TPM_Type *base);
static inline void TPM_ClearIRQFlag(TPM_Type *base);
static inline void TPM_SetModulo(TPM_Type *base, uint16_t modulo);

/*FIM: PROT�TIPOS - FUN��ES INLINE*/
/*=======================================================================================*/

/*PROT�TIPOS - FUN��ES P�BLICAS*/
/*=======================================================================================*/

/**********************************************************************
 * Fun��o		:	TPM_SetCounterClkSrc
 *
 * Descri��o	:   Define a fonte de clock utilizada pelo contador.
 *
 * Entradas		:   *base - registrador base do perif�rico TPM;
 *                  src   - tipo enumerado que define a fonte de clock.
 *
 * Sa�das 		: GENERAL_STATUS_SUCCESSSS, se configura��o ocorreu corretamente;
 *                  GENERAL_STATUS_FAIL, caso contr�rio.
 *
 * Coment�rios 	: 	Pode ser chamada ap�s a inicializa��o (TPM_Init).
 *                  Por�m, contador vai iniciar contagem apenas quando
 *                  essa fun��o for chamada.
 * ********************************************************************/
uint8_t TPM_SetCounterClkSrc(TPM_Type *base, tpmClkSrc_t src);

/**********************************************************************
 * Fun��o		:	TPM_Init
 *
 * Descri��o	:   Inicializa��o do driver do m�dulo TPM.
 *
 * Entradas		:   *base    - registrador base do perif�rico TPM;
 *                  modulo   - valor de final de contagem;
 *                  prescale - tipo enumerado com um dos poss�veis
 *                             valores de prescaler.
 *
 * Sa�das 		:   Nenhuma.
 *
 * Coment�rios 	: 	Nenhum.
 * ********************************************************************/
void TPM_Init(TPM_Type *base, uint16_t modulo, tpmPrescalerValues_t prescale);

/**********************************************************************
 * Fun��o		:	TPM_InitChannel
 *
 * Descri��o	:   Inicializa um canal do m�dulo TPM.
 *
 * Entradas		:   *base  - registrador base do perif�rico TPM;
 *                  chNum  - num�ro do canal;
 *                  mode   - modo de opera��o do canal, sendo
 * 							 definidos pelo tipo TPM_chMode_t.
 * 					config - poss�veisconfigura��es de cada modo de
 * 							 opera��o do canal, sendo definidos pelo
 * 							 tipo TPM_chConfig_t.
 *
 * Sa�das		:   Nenhuma.
 *
 * Coment�rios 	: 	Nenhum.
 * ********************************************************************/
void TPM_InitChannel(TPM_Type *base, uint8_t chNum, tpmChMode_t mode, tpmChConfig_t config);


/*FIM: PROT�TIPOS - FUN��ES P�BLICAS*/
/*=======================================================================================*/

/*FUN��ES INLINE*/
/*=======================================================================================*/

/**********************************************************************
 * Fun��o		:	TPM_InitCounter
 *
 * Descri��o	:   Inicializa registrador contador do m�dulo TPM0.
 *
 * Entradas		:   *base - registrador base do perif�rico TPM.
 *
 * Sa�das		:   Nenhuma.
 *
 * Coment�rios 	: 	Nenhum.
 * ********************************************************************/
static inline void TPM_InitCounter(TPM_Type *base)
{
	assert(base);
	base->SC |= (TPM_SC_CMOD(0x1U));
}

/**********************************************************************
 * Fun��o		:	TPM_GetChValue
 *
 * Descri��o	:   Retorna o valor do registrador contador no modo "Captura
 * 					de Entrada" ou o valor de "match" no modo "Compara��o de Sa�da"
 * 					do canal 0 m�dulo TPM.
 *
 * Entradas		:   *base - registrador base do perif�rico TPM;
 *                  channel - valor do canal do TPM.
 *
 * Sa�das		:   modulo: valor de 1 � 65535.
 *
 * Coment�rios 	: 	Nenhum.
 * ********************************************************************/
static inline uint16_t TPM_GetChValue(TPM_Type *base, uint8_t channel)
{
	assert(base);

	return (uint16_t)base->CONTROLS[channel].CnV;
}


/**********************************************************************
 * Fun��o		:	TPM_SetChMatch
 *
 * Descri��o	:    Define valor de "match" em canal do m�dulo TPM0.
 *
 * Entradas		:   *base - registrador base do perif�rico TPM;
 *                  channel - valor do canal do TPM;
 *                  match: valor de 2 � 65535.
 *
 * Sa�das		:   Nenhuma.
 *
 * Coment�rios 	: 	Nenhum.
 * ********************************************************************/
static inline void TPM_SetChMatch(TPM_Type *base, uint8_t channel, uint16_t match)
{
	assert(base);

	base->CONTROLS[channel].CnV = match;
}

/**********************************************************************
 * Fun��o		:	TPM_EnableIRQ
 *
 * Descri��o	:   Habilita a gera��o de interrup��o pelo m�dulo TPM.
 *
 * Entradas		:   *base - registrador base do perif�rico TPM.
 *
 * Sa�das		:   Nenhuma.
 *
 * Coment�rios 	: 	Nenhum.
 * ********************************************************************/
static inline void TPM_EnableIRQ(TPM_Type *base)
{
   base->SC |= TPM_SC_TOIE_MASK;
}

/**********************************************************************
 * Fun��o		:	TPM_GetIRQFlag
 *
 * Descri��o	:   Retorna o valor da flag de interrup��o gerada
 * 					pelo m�dulo TPM.
 *
 * Entradas		:   *base - registrador base do perif�rico TPM.
 *
 * Sa�das		:   0	,  se n�o houve interrup��o;
 * 					!0	,  se houve interrup��o.
 *
 * Coment�rios 	: 	Nenhum.
 * ********************************************************************/
static inline uint8_t TPM_GetIRQFlag(TPM_Type *base)
{
   return base->SC & TPM_SC_TOF_MASK;
}

/**********************************************************************
 * Fun��o		:	TPM_ClearIRQFlag
 *
 * Descri��o	:   Limpa a flag de interrup��o gerada pelo m�dulo TPM.
 *
 * Entradas		:   *base - registrador base do perif�rico TPM.
 *
 * Sa�das		:   Nenhuma.
 *
 * Coment�rios 	: 	Nenhum.
 * ********************************************************************/
static inline void TPM_ClearIRQFlag(TPM_Type *base)
{
	base->SC |= TPM_SC_TOF_MASK;
}

/**********************************************************************
 * Fun��o		:	TPM_SetModulo
 *
 * Descri��o	:   Define valor de fim de contagem do m�dulo do TPM.
 *
 * Entradas		:   *base - registrador base do perif�rico TPM;
 * 					modulo - valor de fim de contagem.
 *
 * Sa�das		:   Nenhuma.
 *
 * Coment�rios 	: 	Nenhum.
 * ********************************************************************/
static inline void TPM_SetModulo(TPM_Type *base, uint16_t modulo)
{
	assert(base);

	base->MOD = modulo;
}

/*FIM: FUN��ES INLINE*/
/*=======================================================================================*/

#endif /* TPM_DRV_H_ */

/***************************************************************************************
 * FIM: M�dulo - tpm.h
 ***************************************************************************************/
