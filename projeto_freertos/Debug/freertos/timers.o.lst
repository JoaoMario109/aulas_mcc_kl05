   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"timers.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.bss.xActiveTimerList1,"aw",%nobits
  18              		.align	2
  21              	xActiveTimerList1:
  22 0000 00000000 		.space	20
  22      00000000 
  22      00000000 
  22      00000000 
  22      00000000 
  23              		.section	.bss.xActiveTimerList2,"aw",%nobits
  24              		.align	2
  27              	xActiveTimerList2:
  28 0000 00000000 		.space	20
  28      00000000 
  28      00000000 
  28      00000000 
  28      00000000 
  29              		.section	.bss.pxCurrentTimerList,"aw",%nobits
  30              		.align	2
  33              	pxCurrentTimerList:
  34 0000 00000000 		.space	4
  35              		.section	.bss.pxOverflowTimerList,"aw",%nobits
  36              		.align	2
  39              	pxOverflowTimerList:
  40 0000 00000000 		.space	4
  41              		.section	.bss.xTimerQueue,"aw",%nobits
  42              		.align	2
  45              	xTimerQueue:
  46 0000 00000000 		.space	4
  47              		.section	.bss.xTimerTaskHandle,"aw",%nobits
  48              		.align	2
  51              	xTimerTaskHandle:
  52 0000 00000000 		.space	4
  53              		.section	.rodata
  54              		.align	2
  55              	.LC2:
  56 0000 546D7220 		.ascii	"Tmr Svc\000"
  56      53766300 
  57              		.section	.text.xTimerCreateTimerTask,"ax",%progbits
  58              		.align	2
  59              		.global	xTimerCreateTimerTask
  60              		.code	16
  61              		.thumb_func
  63              	xTimerCreateTimerTask:
  64              	.LFB0:
  65              		.file 1 "../freertos/timers.c"
   1:../freertos/timers.c **** /*
   2:../freertos/timers.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../freertos/timers.c ****     All rights reserved
   4:../freertos/timers.c **** 
   5:../freertos/timers.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../freertos/timers.c **** 
   7:../freertos/timers.c ****     This file is part of the FreeRTOS distribution.
   8:../freertos/timers.c **** 
   9:../freertos/timers.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../freertos/timers.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../freertos/timers.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../freertos/timers.c **** 
  13:../freertos/timers.c ****     ***************************************************************************
  14:../freertos/timers.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../freertos/timers.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../freertos/timers.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../freertos/timers.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../freertos/timers.c ****     ***************************************************************************
  19:../freertos/timers.c **** 
  20:../freertos/timers.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../freertos/timers.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../freertos/timers.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../freertos/timers.c ****     link: http://www.freertos.org/a00114.html
  24:../freertos/timers.c **** 
  25:../freertos/timers.c ****     ***************************************************************************
  26:../freertos/timers.c ****      *                                                                       *
  27:../freertos/timers.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../freertos/timers.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../freertos/timers.c ****      *    platform software that is more than just the market leader, it     *
  30:../freertos/timers.c ****      *    is the industry's de facto standard.                               *
  31:../freertos/timers.c ****      *                                                                       *
  32:../freertos/timers.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../freertos/timers.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../freertos/timers.c ****      *    tutorial book, reference manual, or both:                          *
  35:../freertos/timers.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../freertos/timers.c ****      *                                                                       *
  37:../freertos/timers.c ****     ***************************************************************************
  38:../freertos/timers.c **** 
  39:../freertos/timers.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../freertos/timers.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../freertos/timers.c ****     defined configASSERT()?
  42:../freertos/timers.c **** 
  43:../freertos/timers.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../freertos/timers.c ****     embedded software for free we request you assist our global community by
  45:../freertos/timers.c ****     participating in the support forum.
  46:../freertos/timers.c **** 
  47:../freertos/timers.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../freertos/timers.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../freertos/timers.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../freertos/timers.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../freertos/timers.c **** 
  52:../freertos/timers.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../freertos/timers.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../freertos/timers.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../freertos/timers.c **** 
  56:../freertos/timers.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../freertos/timers.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../freertos/timers.c **** 
  59:../freertos/timers.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../freertos/timers.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../freertos/timers.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../freertos/timers.c **** 
  63:../freertos/timers.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../freertos/timers.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../freertos/timers.c ****     mission critical applications that require provable dependability.
  66:../freertos/timers.c **** 
  67:../freertos/timers.c ****     1 tab == 4 spaces!
  68:../freertos/timers.c **** */
  69:../freertos/timers.c **** 
  70:../freertos/timers.c **** /* Standard includes. */
  71:../freertos/timers.c **** #include <stdlib.h>
  72:../freertos/timers.c **** 
  73:../freertos/timers.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  74:../freertos/timers.c **** all the API functions to use the MPU wrappers.  That should only be done when
  75:../freertos/timers.c **** task.h is included from an application file. */
  76:../freertos/timers.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  77:../freertos/timers.c **** 
  78:../freertos/timers.c **** #include "FreeRTOS.h"
  79:../freertos/timers.c **** #include "task.h"
  80:../freertos/timers.c **** #include "queue.h"
  81:../freertos/timers.c **** #include "timers.h"
  82:../freertos/timers.c **** 
  83:../freertos/timers.c **** #if ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 0 )
  84:../freertos/timers.c **** 	#error configUSE_TIMERS must be set to 1 to make the xTimerPendFunctionCall() function available.
  85:../freertos/timers.c **** #endif
  86:../freertos/timers.c **** 
  87:../freertos/timers.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  88:../freertos/timers.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  89:../freertos/timers.c **** header files above, but not in this file, in order to generate the correct
  90:../freertos/timers.c **** privileged Vs unprivileged linkage and placement. */
  91:../freertos/timers.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  92:../freertos/timers.c **** 
  93:../freertos/timers.c **** 
  94:../freertos/timers.c **** /* This entire source file will be skipped if the application is not configured
  95:../freertos/timers.c **** to include software timer functionality.  This #if is closed at the very bottom
  96:../freertos/timers.c **** of this file.  If you want to include software timer functionality then ensure
  97:../freertos/timers.c **** configUSE_TIMERS is set to 1 in FreeRTOSConfig.h. */
  98:../freertos/timers.c **** #if ( configUSE_TIMERS == 1 )
  99:../freertos/timers.c **** 
 100:../freertos/timers.c **** /* Misc definitions. */
 101:../freertos/timers.c **** #define tmrNO_DELAY		( TickType_t ) 0U
 102:../freertos/timers.c **** 
 103:../freertos/timers.c **** /* The definition of the timers themselves. */
 104:../freertos/timers.c **** typedef struct tmrTimerControl
 105:../freertos/timers.c **** {
 106:../freertos/timers.c **** 	const char				*pcTimerName;		/*<< Text name.  This is not used by the kernel, it is included simpl
 107:../freertos/timers.c **** 	ListItem_t				xTimerListItem;		/*<< Standard linked list item as used by all kernel features for e
 108:../freertos/timers.c **** 	TickType_t				xTimerPeriodInTicks;/*<< How quickly and often the timer expires. */
 109:../freertos/timers.c **** 	UBaseType_t				uxAutoReload;		/*<< Set to pdTRUE if the timer should be automatically restarted on
 110:../freertos/timers.c **** 	void 					*pvTimerID;			/*<< An ID to identify the timer.  This allows the timer to be identified 
 111:../freertos/timers.c **** 	TimerCallbackFunction_t	pxCallbackFunction;	/*<< The function that will be called when the timer e
 112:../freertos/timers.c **** 	#if( configUSE_TRACE_FACILITY == 1 )
 113:../freertos/timers.c **** 		UBaseType_t			uxTimerNumber;		/*<< An ID assigned by trace tools such as FreeRTOS+Trace */
 114:../freertos/timers.c **** 	#endif
 115:../freertos/timers.c **** 
 116:../freertos/timers.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 117:../freertos/timers.c **** 		uint8_t 			ucStaticallyAllocated; /*<< Set to pdTRUE if the timer was created statically so no at
 118:../freertos/timers.c **** 	#endif
 119:../freertos/timers.c **** } xTIMER;
 120:../freertos/timers.c **** 
 121:../freertos/timers.c **** /* The old xTIMER name is maintained above then typedefed to the new Timer_t
 122:../freertos/timers.c **** name below to enable the use of older kernel aware debuggers. */
 123:../freertos/timers.c **** typedef xTIMER Timer_t;
 124:../freertos/timers.c **** 
 125:../freertos/timers.c **** /* The definition of messages that can be sent and received on the timer queue.
 126:../freertos/timers.c **** Two types of message can be queued - messages that manipulate a software timer,
 127:../freertos/timers.c **** and messages that request the execution of a non-timer related callback.  The
 128:../freertos/timers.c **** two message types are defined in two separate structures, xTimerParametersType
 129:../freertos/timers.c **** and xCallbackParametersType respectively. */
 130:../freertos/timers.c **** typedef struct tmrTimerParameters
 131:../freertos/timers.c **** {
 132:../freertos/timers.c **** 	TickType_t			xMessageValue;		/*<< An optional value used by a subset of commands, for example, whe
 133:../freertos/timers.c **** 	Timer_t *			pxTimer;			/*<< The timer to which the command will be applied. */
 134:../freertos/timers.c **** } TimerParameter_t;
 135:../freertos/timers.c **** 
 136:../freertos/timers.c **** 
 137:../freertos/timers.c **** typedef struct tmrCallbackParameters
 138:../freertos/timers.c **** {
 139:../freertos/timers.c **** 	PendedFunction_t	pxCallbackFunction;	/* << The callback function to execute. */
 140:../freertos/timers.c **** 	void *pvParameter1;						/* << The value that will be used as the callback functions first paramet
 141:../freertos/timers.c **** 	uint32_t ulParameter2;					/* << The value that will be used as the callback functions second para
 142:../freertos/timers.c **** } CallbackParameters_t;
 143:../freertos/timers.c **** 
 144:../freertos/timers.c **** /* The structure that contains the two message types, along with an identifier
 145:../freertos/timers.c **** that is used to determine which message type is valid. */
 146:../freertos/timers.c **** typedef struct tmrTimerQueueMessage
 147:../freertos/timers.c **** {
 148:../freertos/timers.c **** 	BaseType_t			xMessageID;			/*<< The command being sent to the timer service task. */
 149:../freertos/timers.c **** 	union
 150:../freertos/timers.c **** 	{
 151:../freertos/timers.c **** 		TimerParameter_t xTimerParameters;
 152:../freertos/timers.c **** 
 153:../freertos/timers.c **** 		/* Don't include xCallbackParameters if it is not going to be used as
 154:../freertos/timers.c **** 		it makes the structure (and therefore the timer queue) larger. */
 155:../freertos/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 156:../freertos/timers.c **** 			CallbackParameters_t xCallbackParameters;
 157:../freertos/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 158:../freertos/timers.c **** 	} u;
 159:../freertos/timers.c **** } DaemonTaskMessage_t;
 160:../freertos/timers.c **** 
 161:../freertos/timers.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 162:../freertos/timers.c **** static variables must be declared volatile. */
 163:../freertos/timers.c **** 
 164:../freertos/timers.c **** /* The list in which active timers are stored.  Timers are referenced in expire
 165:../freertos/timers.c **** time order, with the nearest expiry time at the front of the list.  Only the
 166:../freertos/timers.c **** timer service task is allowed to access these lists. */
 167:../freertos/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList1;
 168:../freertos/timers.c **** PRIVILEGED_DATA static List_t xActiveTimerList2;
 169:../freertos/timers.c **** PRIVILEGED_DATA static List_t *pxCurrentTimerList;
 170:../freertos/timers.c **** PRIVILEGED_DATA static List_t *pxOverflowTimerList;
 171:../freertos/timers.c **** 
 172:../freertos/timers.c **** /* A queue that is used to send commands to the timer service task. */
 173:../freertos/timers.c **** PRIVILEGED_DATA static QueueHandle_t xTimerQueue = NULL;
 174:../freertos/timers.c **** PRIVILEGED_DATA static TaskHandle_t xTimerTaskHandle = NULL;
 175:../freertos/timers.c **** 
 176:../freertos/timers.c **** /*lint +e956 */
 177:../freertos/timers.c **** 
 178:../freertos/timers.c **** /*-----------------------------------------------------------*/
 179:../freertos/timers.c **** 
 180:../freertos/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 181:../freertos/timers.c **** 
 182:../freertos/timers.c **** 	/* If static allocation is supported then the application must provide the
 183:../freertos/timers.c **** 	following callback function - which enables the application to optionally
 184:../freertos/timers.c **** 	provide the memory that will be used by the timer task as the task's stack
 185:../freertos/timers.c **** 	and TCB. */
 186:../freertos/timers.c **** 	extern void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **pp
 187:../freertos/timers.c **** 
 188:../freertos/timers.c **** #endif
 189:../freertos/timers.c **** 
 190:../freertos/timers.c **** /*
 191:../freertos/timers.c ****  * Initialise the infrastructure used by the timer service task if it has not
 192:../freertos/timers.c ****  * been initialised already.
 193:../freertos/timers.c ****  */
 194:../freertos/timers.c **** static void prvCheckForValidListAndQueue( void ) PRIVILEGED_FUNCTION;
 195:../freertos/timers.c **** 
 196:../freertos/timers.c **** /*
 197:../freertos/timers.c ****  * The timer service task (daemon).  Timer functionality is controlled by this
 198:../freertos/timers.c ****  * task.  Other tasks communicate with the timer service task using the
 199:../freertos/timers.c ****  * xTimerQueue queue.
 200:../freertos/timers.c ****  */
 201:../freertos/timers.c **** static void prvTimerTask( void *pvParameters ) PRIVILEGED_FUNCTION;
 202:../freertos/timers.c **** 
 203:../freertos/timers.c **** /*
 204:../freertos/timers.c ****  * Called by the timer service task to interpret and process a command it
 205:../freertos/timers.c ****  * received on the timer queue.
 206:../freertos/timers.c ****  */
 207:../freertos/timers.c **** static void prvProcessReceivedCommands( void ) PRIVILEGED_FUNCTION;
 208:../freertos/timers.c **** 
 209:../freertos/timers.c **** /*
 210:../freertos/timers.c ****  * Insert the timer into either xActiveTimerList1, or xActiveTimerList2,
 211:../freertos/timers.c ****  * depending on if the expire time causes a timer counter overflow.
 212:../freertos/timers.c ****  */
 213:../freertos/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 214:../freertos/timers.c **** 
 215:../freertos/timers.c **** /*
 216:../freertos/timers.c ****  * An active timer has reached its expire time.  Reload the timer if it is an
 217:../freertos/timers.c ****  * auto reload timer, then call its callback.
 218:../freertos/timers.c ****  */
 219:../freertos/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow ) P
 220:../freertos/timers.c **** 
 221:../freertos/timers.c **** /*
 222:../freertos/timers.c ****  * The tick count has overflowed.  Switch the timer lists after ensuring the
 223:../freertos/timers.c ****  * current timer list does not still reference some timers.
 224:../freertos/timers.c ****  */
 225:../freertos/timers.c **** static void prvSwitchTimerLists( void ) PRIVILEGED_FUNCTION;
 226:../freertos/timers.c **** 
 227:../freertos/timers.c **** /*
 228:../freertos/timers.c ****  * Obtain the current tick count, setting *pxTimerListsWereSwitched to pdTRUE
 229:../freertos/timers.c ****  * if a tick count overflow occurred since prvSampleTimeNow() was last called.
 230:../freertos/timers.c ****  */
 231:../freertos/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched ) PRIVILEGED_FUNCTI
 232:../freertos/timers.c **** 
 233:../freertos/timers.c **** /*
 234:../freertos/timers.c ****  * If the timer list contains any active timers then return the expire time of
 235:../freertos/timers.c ****  * the timer that will expire first and set *pxListWasEmpty to false.  If the
 236:../freertos/timers.c ****  * timer list does not contain any timers then return 0 and set *pxListWasEmpty
 237:../freertos/timers.c ****  * to pdTRUE.
 238:../freertos/timers.c ****  */
 239:../freertos/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty ) PRIVILEGED_FUNCTION;
 240:../freertos/timers.c **** 
 241:../freertos/timers.c **** /*
 242:../freertos/timers.c ****  * If a timer has expired, process it.  Otherwise, block the timer service task
 243:../freertos/timers.c ****  * until either a timer does expire or a command is received.
 244:../freertos/timers.c ****  */
 245:../freertos/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 246:../freertos/timers.c **** 
 247:../freertos/timers.c **** /*
 248:../freertos/timers.c ****  * Called after a Timer_t structure has been allocated either statically or
 249:../freertos/timers.c ****  * dynamically to fill in the structure's members.
 250:../freertos/timers.c ****  */
 251:../freertos/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 252:../freertos/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 253:../freertos/timers.c **** 									const UBaseType_t uxAutoReload,
 254:../freertos/timers.c **** 									void * const pvTimerID,
 255:../freertos/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 256:../freertos/timers.c **** 									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed
 257:../freertos/timers.c **** /*-----------------------------------------------------------*/
 258:../freertos/timers.c **** 
 259:../freertos/timers.c **** BaseType_t xTimerCreateTimerTask( void )
 260:../freertos/timers.c **** {
  66              		.loc 1 260 0
  67              		.cfi_startproc
  68 0000 80B5     		push	{r7, lr}
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 7, -8
  71              		.cfi_offset 14, -4
  72 0002 84B0     		sub	sp, sp, #16
  73              		.cfi_def_cfa_offset 24
  74 0004 02AF     		add	r7, sp, #8
  75              		.cfi_def_cfa 7, 16
 261:../freertos/timers.c **** BaseType_t xReturn = pdFAIL;
  76              		.loc 1 261 0
  77 0006 0023     		mov	r3, #0
  78 0008 7B60     		str	r3, [r7, #4]
 262:../freertos/timers.c **** 
 263:../freertos/timers.c **** 	/* This function is called when the scheduler is started if
 264:../freertos/timers.c **** 	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
 265:../freertos/timers.c **** 	timer service task has been created/initialised.  If timers have already
 266:../freertos/timers.c **** 	been created then the initialisation will already have been performed. */
 267:../freertos/timers.c **** 	prvCheckForValidListAndQueue();
  79              		.loc 1 267 0
  80 000a FFF7FEFF 		bl	prvCheckForValidListAndQueue
 268:../freertos/timers.c **** 
 269:../freertos/timers.c **** 	if( xTimerQueue != NULL )
  81              		.loc 1 269 0
  82 000e 0E4B     		ldr	r3, .L6
  83 0010 1B68     		ldr	r3, [r3]
  84 0012 002B     		cmp	r3, #0
  85 0014 0DD0     		beq	.L2
 270:../freertos/timers.c **** 	{
 271:../freertos/timers.c **** 		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 272:../freertos/timers.c **** 		{
 273:../freertos/timers.c **** 			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 274:../freertos/timers.c **** 			StackType_t *pxTimerTaskStackBuffer = NULL;
 275:../freertos/timers.c **** 			uint32_t ulTimerTaskStackSize;
 276:../freertos/timers.c **** 
 277:../freertos/timers.c **** 			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStac
 278:../freertos/timers.c **** 			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 279:../freertos/timers.c **** 													"Tmr Svc",
 280:../freertos/timers.c **** 													ulTimerTaskStackSize,
 281:../freertos/timers.c **** 													NULL,
 282:../freertos/timers.c **** 													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 283:../freertos/timers.c **** 													pxTimerTaskStackBuffer,
 284:../freertos/timers.c **** 													pxTimerTaskTCBBuffer );
 285:../freertos/timers.c **** 
 286:../freertos/timers.c **** 			if( xTimerTaskHandle != NULL )
 287:../freertos/timers.c **** 			{
 288:../freertos/timers.c **** 				xReturn = pdPASS;
 289:../freertos/timers.c **** 			}
 290:../freertos/timers.c **** 		}
 291:../freertos/timers.c **** 		#else
 292:../freertos/timers.c **** 		{
 293:../freertos/timers.c **** 			xReturn = xTaskCreate(	prvTimerTask,
  86              		.loc 1 293 0
  87 0016 0D4A     		ldr	r2, .L6+4
  88 0018 0D4B     		ldr	r3, .L6+8
  89 001a 0221     		mov	r1, #2
  90 001c 0091     		str	r1, [sp]
  91 001e 0D49     		ldr	r1, .L6+12
  92 0020 0191     		str	r1, [sp, #4]
  93 0022 101C     		mov	r0, r2
  94 0024 191C     		mov	r1, r3
  95 0026 B422     		mov	r2, #180
  96 0028 0023     		mov	r3, #0
  97 002a FFF7FEFF 		bl	xTaskCreate
  98 002e 031C     		mov	r3, r0
  99 0030 7B60     		str	r3, [r7, #4]
 100              	.L2:
 294:../freertos/timers.c **** 									"Tmr Svc",
 295:../freertos/timers.c **** 									configTIMER_TASK_STACK_DEPTH,
 296:../freertos/timers.c **** 									NULL,
 297:../freertos/timers.c **** 									( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
 298:../freertos/timers.c **** 									&xTimerTaskHandle );
 299:../freertos/timers.c **** 		}
 300:../freertos/timers.c **** 		#endif /* configSUPPORT_STATIC_ALLOCATION */
 301:../freertos/timers.c **** 	}
 302:../freertos/timers.c **** 	else
 303:../freertos/timers.c **** 	{
 304:../freertos/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 305:../freertos/timers.c **** 	}
 306:../freertos/timers.c **** 
 307:../freertos/timers.c **** 	configASSERT( xReturn );
 101              		.loc 1 307 0
 102 0032 7B68     		ldr	r3, [r7, #4]
 103 0034 002B     		cmp	r3, #0
 104 0036 01D1     		bne	.L3
 105              		.loc 1 307 0 is_stmt 0 discriminator 1
 106              	@ 307 "../freertos/timers.c" 1
 107 0038 72B6     		 cpsid i 
 108              	@ 0 "" 2
 109              		.code	16
 110              	.L4:
 111 003a FEE7     		b	.L4
 112              	.L3:
 308:../freertos/timers.c **** 	return xReturn;
 113              		.loc 1 308 0 is_stmt 1
 114 003c 7B68     		ldr	r3, [r7, #4]
 309:../freertos/timers.c **** }
 115              		.loc 1 309 0
 116 003e 181C     		mov	r0, r3
 117 0040 BD46     		mov	sp, r7
 118 0042 02B0     		add	sp, sp, #8
 119              		@ sp needed
 120 0044 80BD     		pop	{r7, pc}
 121              	.L7:
 122 0046 C046     		.align	2
 123              	.L6:
 124 0048 00000000 		.word	xTimerQueue
 125 004c 00000000 		.word	prvTimerTask
 126 0050 00000000 		.word	.LC2
 127 0054 00000000 		.word	xTimerTaskHandle
 128              		.cfi_endproc
 129              	.LFE0:
 131              		.section	.text.xTimerCreate,"ax",%progbits
 132              		.align	2
 133              		.global	xTimerCreate
 134              		.code	16
 135              		.thumb_func
 137              	xTimerCreate:
 138              	.LFB1:
 310:../freertos/timers.c **** /*-----------------------------------------------------------*/
 311:../freertos/timers.c **** 
 312:../freertos/timers.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 313:../freertos/timers.c **** 
 314:../freertos/timers.c **** 	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
 315:../freertos/timers.c **** 								const TickType_t xTimerPeriodInTicks,
 316:../freertos/timers.c **** 								const UBaseType_t uxAutoReload,
 317:../freertos/timers.c **** 								void * const pvTimerID,
 318:../freertos/timers.c **** 								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowe
 319:../freertos/timers.c **** 	{
 139              		.loc 1 319 0
 140              		.cfi_startproc
 141 0000 90B5     		push	{r4, r7, lr}
 142              		.cfi_def_cfa_offset 12
 143              		.cfi_offset 4, -12
 144              		.cfi_offset 7, -8
 145              		.cfi_offset 14, -4
 146 0002 89B0     		sub	sp, sp, #36
 147              		.cfi_def_cfa_offset 48
 148 0004 02AF     		add	r7, sp, #8
 149              		.cfi_def_cfa 7, 40
 150 0006 F860     		str	r0, [r7, #12]
 151 0008 B960     		str	r1, [r7, #8]
 152 000a 7A60     		str	r2, [r7, #4]
 153 000c 3B60     		str	r3, [r7]
 320:../freertos/timers.c **** 	Timer_t *pxNewTimer;
 321:../freertos/timers.c **** 
 322:../freertos/timers.c **** 		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 154              		.loc 1 322 0
 155 000e 2C20     		mov	r0, #44
 156 0010 FFF7FEFF 		bl	pvPortMalloc
 157 0014 031C     		mov	r3, r0
 158 0016 7B61     		str	r3, [r7, #20]
 323:../freertos/timers.c **** 
 324:../freertos/timers.c **** 		if( pxNewTimer != NULL )
 159              		.loc 1 324 0
 160 0018 7B69     		ldr	r3, [r7, #20]
 161 001a 002B     		cmp	r3, #0
 162 001c 09D0     		beq	.L9
 325:../freertos/timers.c **** 		{
 326:../freertos/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 163              		.loc 1 326 0
 164 001e F868     		ldr	r0, [r7, #12]
 165 0020 B968     		ldr	r1, [r7, #8]
 166 0022 7A68     		ldr	r2, [r7, #4]
 167 0024 3B68     		ldr	r3, [r7]
 168 0026 BC6A     		ldr	r4, [r7, #40]
 169 0028 0094     		str	r4, [sp]
 170 002a 7C69     		ldr	r4, [r7, #20]
 171 002c 0194     		str	r4, [sp, #4]
 172 002e FFF7FEFF 		bl	prvInitialiseNewTimer
 173              	.L9:
 327:../freertos/timers.c **** 
 328:../freertos/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 329:../freertos/timers.c **** 			{
 330:../freertos/timers.c **** 				/* Timers can be created statically or dynamically, so note this
 331:../freertos/timers.c **** 				timer was created dynamically in case the timer is later
 332:../freertos/timers.c **** 				deleted. */
 333:../freertos/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 334:../freertos/timers.c **** 			}
 335:../freertos/timers.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 336:../freertos/timers.c **** 		}
 337:../freertos/timers.c **** 
 338:../freertos/timers.c **** 		return pxNewTimer;
 174              		.loc 1 338 0
 175 0032 7B69     		ldr	r3, [r7, #20]
 339:../freertos/timers.c **** 	}
 176              		.loc 1 339 0
 177 0034 181C     		mov	r0, r3
 178 0036 BD46     		mov	sp, r7
 179 0038 07B0     		add	sp, sp, #28
 180              		@ sp needed
 181 003a 90BD     		pop	{r4, r7, pc}
 182              		.cfi_endproc
 183              	.LFE1:
 185              		.section	.text.prvInitialiseNewTimer,"ax",%progbits
 186              		.align	2
 187              		.code	16
 188              		.thumb_func
 190              	prvInitialiseNewTimer:
 191              	.LFB2:
 340:../freertos/timers.c **** 
 341:../freertos/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 342:../freertos/timers.c **** /*-----------------------------------------------------------*/
 343:../freertos/timers.c **** 
 344:../freertos/timers.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 345:../freertos/timers.c **** 
 346:../freertos/timers.c **** 	TimerHandle_t xTimerCreateStatic(	const char * const pcTimerName,
 347:../freertos/timers.c **** 										const TickType_t xTimerPeriodInTicks,
 348:../freertos/timers.c **** 										const UBaseType_t uxAutoReload,
 349:../freertos/timers.c **** 										void * const pvTimerID,
 350:../freertos/timers.c **** 										TimerCallbackFunction_t pxCallbackFunction,
 351:../freertos/timers.c **** 										StaticTimer_t *pxTimerBuffer ) /*lint !e971 Unqualified char types are allowed for string
 352:../freertos/timers.c **** 	{
 353:../freertos/timers.c **** 	Timer_t *pxNewTimer;
 354:../freertos/timers.c **** 
 355:../freertos/timers.c **** 		#if( configASSERT_DEFINED == 1 )
 356:../freertos/timers.c **** 		{
 357:../freertos/timers.c **** 			/* Sanity check that the size of the structure used to declare a
 358:../freertos/timers.c **** 			variable of type StaticTimer_t equals the size of the real timer
 359:../freertos/timers.c **** 			structures. */
 360:../freertos/timers.c **** 			volatile size_t xSize = sizeof( StaticTimer_t );
 361:../freertos/timers.c **** 			configASSERT( xSize == sizeof( Timer_t ) );
 362:../freertos/timers.c **** 		}
 363:../freertos/timers.c **** 		#endif /* configASSERT_DEFINED */
 364:../freertos/timers.c **** 
 365:../freertos/timers.c **** 		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
 366:../freertos/timers.c **** 		configASSERT( pxTimerBuffer );
 367:../freertos/timers.c **** 		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are d
 368:../freertos/timers.c **** 
 369:../freertos/timers.c **** 		if( pxNewTimer != NULL )
 370:../freertos/timers.c **** 		{
 371:../freertos/timers.c **** 			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunc
 372:../freertos/timers.c **** 
 373:../freertos/timers.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 374:../freertos/timers.c **** 			{
 375:../freertos/timers.c **** 				/* Timers can be created statically or dynamically so note this
 376:../freertos/timers.c **** 				timer was created statically in case it is later deleted. */
 377:../freertos/timers.c **** 				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 378:../freertos/timers.c **** 			}
 379:../freertos/timers.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 380:../freertos/timers.c **** 		}
 381:../freertos/timers.c **** 
 382:../freertos/timers.c **** 		return pxNewTimer;
 383:../freertos/timers.c **** 	}
 384:../freertos/timers.c **** 
 385:../freertos/timers.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 386:../freertos/timers.c **** /*-----------------------------------------------------------*/
 387:../freertos/timers.c **** 
 388:../freertos/timers.c **** static void prvInitialiseNewTimer(	const char * const pcTimerName,
 389:../freertos/timers.c **** 									const TickType_t xTimerPeriodInTicks,
 390:../freertos/timers.c **** 									const UBaseType_t uxAutoReload,
 391:../freertos/timers.c **** 									void * const pvTimerID,
 392:../freertos/timers.c **** 									TimerCallbackFunction_t pxCallbackFunction,
 393:../freertos/timers.c **** 									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and sing
 394:../freertos/timers.c **** {
 192              		.loc 1 394 0
 193              		.cfi_startproc
 194 0000 80B5     		push	{r7, lr}
 195              		.cfi_def_cfa_offset 8
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 84B0     		sub	sp, sp, #16
 199              		.cfi_def_cfa_offset 24
 200 0004 00AF     		add	r7, sp, #0
 201              		.cfi_def_cfa_register 7
 202 0006 F860     		str	r0, [r7, #12]
 203 0008 B960     		str	r1, [r7, #8]
 204 000a 7A60     		str	r2, [r7, #4]
 205 000c 3B60     		str	r3, [r7]
 395:../freertos/timers.c **** 	/* 0 is not a valid value for xTimerPeriodInTicks. */
 396:../freertos/timers.c **** 	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 206              		.loc 1 396 0
 207 000e BB68     		ldr	r3, [r7, #8]
 208 0010 002B     		cmp	r3, #0
 209 0012 01D1     		bne	.L12
 210              		.loc 1 396 0 is_stmt 0 discriminator 1
 211              	@ 396 "../freertos/timers.c" 1
 212 0014 72B6     		 cpsid i 
 213              	@ 0 "" 2
 214              		.code	16
 215              	.L13:
 216 0016 FEE7     		b	.L13
 217              	.L12:
 397:../freertos/timers.c **** 
 398:../freertos/timers.c **** 	if( pxNewTimer != NULL )
 218              		.loc 1 398 0 is_stmt 1
 219 0018 FB69     		ldr	r3, [r7, #28]
 220 001a 002B     		cmp	r3, #0
 221 001c 15D0     		beq	.L11
 399:../freertos/timers.c **** 	{
 400:../freertos/timers.c **** 		/* Ensure the infrastructure used by the timer service task has been
 401:../freertos/timers.c **** 		created/initialised. */
 402:../freertos/timers.c **** 		prvCheckForValidListAndQueue();
 222              		.loc 1 402 0
 223 001e FFF7FEFF 		bl	prvCheckForValidListAndQueue
 403:../freertos/timers.c **** 
 404:../freertos/timers.c **** 		/* Initialise the timer structure members using the function
 405:../freertos/timers.c **** 		parameters. */
 406:../freertos/timers.c **** 		pxNewTimer->pcTimerName = pcTimerName;
 224              		.loc 1 406 0
 225 0022 FB69     		ldr	r3, [r7, #28]
 226 0024 FA68     		ldr	r2, [r7, #12]
 227 0026 1A60     		str	r2, [r3]
 407:../freertos/timers.c **** 		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 228              		.loc 1 407 0
 229 0028 FB69     		ldr	r3, [r7, #28]
 230 002a BA68     		ldr	r2, [r7, #8]
 231 002c 9A61     		str	r2, [r3, #24]
 408:../freertos/timers.c **** 		pxNewTimer->uxAutoReload = uxAutoReload;
 232              		.loc 1 408 0
 233 002e FB69     		ldr	r3, [r7, #28]
 234 0030 7A68     		ldr	r2, [r7, #4]
 235 0032 DA61     		str	r2, [r3, #28]
 409:../freertos/timers.c **** 		pxNewTimer->pvTimerID = pvTimerID;
 236              		.loc 1 409 0
 237 0034 FB69     		ldr	r3, [r7, #28]
 238 0036 3A68     		ldr	r2, [r7]
 239 0038 1A62     		str	r2, [r3, #32]
 410:../freertos/timers.c **** 		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 240              		.loc 1 410 0
 241 003a FB69     		ldr	r3, [r7, #28]
 242 003c BA69     		ldr	r2, [r7, #24]
 243 003e 5A62     		str	r2, [r3, #36]
 411:../freertos/timers.c **** 		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 244              		.loc 1 411 0
 245 0040 FB69     		ldr	r3, [r7, #28]
 246 0042 0433     		add	r3, r3, #4
 247 0044 181C     		mov	r0, r3
 248 0046 FFF7FEFF 		bl	vListInitialiseItem
 249              	.L11:
 412:../freertos/timers.c **** 		traceTIMER_CREATE( pxNewTimer );
 413:../freertos/timers.c **** 	}
 414:../freertos/timers.c **** }
 250              		.loc 1 414 0
 251 004a BD46     		mov	sp, r7
 252 004c 04B0     		add	sp, sp, #16
 253              		@ sp needed
 254 004e 80BD     		pop	{r7, pc}
 255              		.cfi_endproc
 256              	.LFE2:
 258              		.section	.text.xTimerGenericCommand,"ax",%progbits
 259              		.align	2
 260              		.global	xTimerGenericCommand
 261              		.code	16
 262              		.thumb_func
 264              	xTimerGenericCommand:
 265              	.LFB3:
 415:../freertos/timers.c **** /*-----------------------------------------------------------*/
 416:../freertos/timers.c **** 
 417:../freertos/timers.c **** BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_
 418:../freertos/timers.c **** {
 266              		.loc 1 418 0
 267              		.cfi_startproc
 268 0000 80B5     		push	{r7, lr}
 269              		.cfi_def_cfa_offset 8
 270              		.cfi_offset 7, -8
 271              		.cfi_offset 14, -4
 272 0002 8AB0     		sub	sp, sp, #40
 273              		.cfi_def_cfa_offset 48
 274 0004 00AF     		add	r7, sp, #0
 275              		.cfi_def_cfa_register 7
 276 0006 F860     		str	r0, [r7, #12]
 277 0008 B960     		str	r1, [r7, #8]
 278 000a 7A60     		str	r2, [r7, #4]
 279 000c 3B60     		str	r3, [r7]
 419:../freertos/timers.c **** BaseType_t xReturn = pdFAIL;
 280              		.loc 1 419 0
 281 000e 0023     		mov	r3, #0
 282 0010 7B62     		str	r3, [r7, #36]
 420:../freertos/timers.c **** DaemonTaskMessage_t xMessage;
 421:../freertos/timers.c **** 
 422:../freertos/timers.c **** 	configASSERT( xTimer );
 283              		.loc 1 422 0
 284 0012 FB68     		ldr	r3, [r7, #12]
 285 0014 002B     		cmp	r3, #0
 286 0016 01D1     		bne	.L16
 287              		.loc 1 422 0 is_stmt 0 discriminator 1
 288              	@ 422 "../freertos/timers.c" 1
 289 0018 72B6     		 cpsid i 
 290              	@ 0 "" 2
 291              		.code	16
 292              	.L17:
 293 001a FEE7     		b	.L17
 294              	.L16:
 423:../freertos/timers.c **** 
 424:../freertos/timers.c **** 	/* Send a message to the timer service task to perform a particular action
 425:../freertos/timers.c **** 	on a particular timer definition. */
 426:../freertos/timers.c **** 	if( xTimerQueue != NULL )
 295              		.loc 1 426 0 is_stmt 1
 296 001c 224B     		ldr	r3, .L24
 297 001e 1B68     		ldr	r3, [r3]
 298 0020 002B     		cmp	r3, #0
 299 0022 3BD0     		beq	.L18
 427:../freertos/timers.c **** 	{
 428:../freertos/timers.c **** 		/* Send a command to the timer service task to start the xTimer timer. */
 429:../freertos/timers.c **** 		xMessage.xMessageID = xCommandID;
 300              		.loc 1 429 0
 301 0024 3B1C     		mov	r3, r7
 302 0026 1433     		add	r3, r3, #20
 303 0028 BA68     		ldr	r2, [r7, #8]
 304 002a 1A60     		str	r2, [r3]
 430:../freertos/timers.c **** 		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 305              		.loc 1 430 0
 306 002c 3B1C     		mov	r3, r7
 307 002e 1433     		add	r3, r3, #20
 308 0030 7A68     		ldr	r2, [r7, #4]
 309 0032 5A60     		str	r2, [r3, #4]
 431:../freertos/timers.c **** 		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 310              		.loc 1 431 0
 311 0034 3B1C     		mov	r3, r7
 312 0036 1433     		add	r3, r3, #20
 313 0038 FA68     		ldr	r2, [r7, #12]
 314 003a 9A60     		str	r2, [r3, #8]
 432:../freertos/timers.c **** 
 433:../freertos/timers.c **** 		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 315              		.loc 1 433 0
 316 003c BB68     		ldr	r3, [r7, #8]
 317 003e 052B     		cmp	r3, #5
 318 0040 1FDC     		bgt	.L19
 434:../freertos/timers.c **** 		{
 435:../freertos/timers.c **** 			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 319              		.loc 1 435 0
 320 0042 FFF7FEFF 		bl	xTaskGetSchedulerState
 321 0046 031C     		mov	r3, r0
 322 0048 022B     		cmp	r3, #2
 323 004a 0DD1     		bne	.L20
 436:../freertos/timers.c **** 			{
 437:../freertos/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 324              		.loc 1 437 0
 325 004c 164B     		ldr	r3, .L24
 326 004e 1968     		ldr	r1, [r3]
 327 0050 3A1C     		mov	r2, r7
 328 0052 1432     		add	r2, r2, #20
 329 0054 3B6B     		ldr	r3, [r7, #48]
 330 0056 081C     		mov	r0, r1
 331 0058 111C     		mov	r1, r2
 332 005a 1A1C     		mov	r2, r3
 333 005c 0023     		mov	r3, #0
 334 005e FFF7FEFF 		bl	xQueueGenericSend
 335 0062 031C     		mov	r3, r0
 336 0064 7B62     		str	r3, [r7, #36]
 337 0066 19E0     		b	.L18
 338              	.L20:
 438:../freertos/timers.c **** 			}
 439:../freertos/timers.c **** 			else
 440:../freertos/timers.c **** 			{
 441:../freertos/timers.c **** 				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 339              		.loc 1 441 0
 340 0068 0F4B     		ldr	r3, .L24
 341 006a 1A68     		ldr	r2, [r3]
 342 006c 3B1C     		mov	r3, r7
 343 006e 1433     		add	r3, r3, #20
 344 0070 101C     		mov	r0, r2
 345 0072 191C     		mov	r1, r3
 346 0074 0022     		mov	r2, #0
 347 0076 0023     		mov	r3, #0
 348 0078 FFF7FEFF 		bl	xQueueGenericSend
 349 007c 031C     		mov	r3, r0
 350 007e 7B62     		str	r3, [r7, #36]
 351 0080 0CE0     		b	.L18
 352              	.L19:
 442:../freertos/timers.c **** 			}
 443:../freertos/timers.c **** 		}
 444:../freertos/timers.c **** 		else
 445:../freertos/timers.c **** 		{
 446:../freertos/timers.c **** 			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 353              		.loc 1 446 0
 354 0082 094B     		ldr	r3, .L24
 355 0084 1968     		ldr	r1, [r3]
 356 0086 3A1C     		mov	r2, r7
 357 0088 1432     		add	r2, r2, #20
 358 008a 3B68     		ldr	r3, [r7]
 359 008c 081C     		mov	r0, r1
 360 008e 111C     		mov	r1, r2
 361 0090 1A1C     		mov	r2, r3
 362 0092 0023     		mov	r3, #0
 363 0094 FFF7FEFF 		bl	xQueueGenericSendFromISR
 364 0098 031C     		mov	r3, r0
 365 009a 7B62     		str	r3, [r7, #36]
 366              	.L18:
 447:../freertos/timers.c **** 		}
 448:../freertos/timers.c **** 
 449:../freertos/timers.c **** 		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
 450:../freertos/timers.c **** 	}
 451:../freertos/timers.c **** 	else
 452:../freertos/timers.c **** 	{
 453:../freertos/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 454:../freertos/timers.c **** 	}
 455:../freertos/timers.c **** 
 456:../freertos/timers.c **** 	return xReturn;
 367              		.loc 1 456 0
 368 009c 7B6A     		ldr	r3, [r7, #36]
 457:../freertos/timers.c **** }
 369              		.loc 1 457 0
 370 009e 181C     		mov	r0, r3
 371 00a0 BD46     		mov	sp, r7
 372 00a2 0AB0     		add	sp, sp, #40
 373              		@ sp needed
 374 00a4 80BD     		pop	{r7, pc}
 375              	.L25:
 376 00a6 C046     		.align	2
 377              	.L24:
 378 00a8 00000000 		.word	xTimerQueue
 379              		.cfi_endproc
 380              	.LFE3:
 382              		.section	.text.xTimerGetTimerDaemonTaskHandle,"ax",%progbits
 383              		.align	2
 384              		.global	xTimerGetTimerDaemonTaskHandle
 385              		.code	16
 386              		.thumb_func
 388              	xTimerGetTimerDaemonTaskHandle:
 389              	.LFB4:
 458:../freertos/timers.c **** /*-----------------------------------------------------------*/
 459:../freertos/timers.c **** 
 460:../freertos/timers.c **** TaskHandle_t xTimerGetTimerDaemonTaskHandle( void )
 461:../freertos/timers.c **** {
 390              		.loc 1 461 0
 391              		.cfi_startproc
 392 0000 80B5     		push	{r7, lr}
 393              		.cfi_def_cfa_offset 8
 394              		.cfi_offset 7, -8
 395              		.cfi_offset 14, -4
 396 0002 00AF     		add	r7, sp, #0
 397              		.cfi_def_cfa_register 7
 462:../freertos/timers.c **** 	/* If xTimerGetTimerDaemonTaskHandle() is called before the scheduler has been
 463:../freertos/timers.c **** 	started, then xTimerTaskHandle will be NULL. */
 464:../freertos/timers.c **** 	configASSERT( ( xTimerTaskHandle != NULL ) );
 398              		.loc 1 464 0
 399 0004 054B     		ldr	r3, .L30
 400 0006 1B68     		ldr	r3, [r3]
 401 0008 002B     		cmp	r3, #0
 402 000a 01D1     		bne	.L27
 403              		.loc 1 464 0 is_stmt 0 discriminator 1
 404              	@ 464 "../freertos/timers.c" 1
 405 000c 72B6     		 cpsid i 
 406              	@ 0 "" 2
 407              		.code	16
 408              	.L28:
 409 000e FEE7     		b	.L28
 410              	.L27:
 465:../freertos/timers.c **** 	return xTimerTaskHandle;
 411              		.loc 1 465 0 is_stmt 1
 412 0010 024B     		ldr	r3, .L30
 413 0012 1B68     		ldr	r3, [r3]
 466:../freertos/timers.c **** }
 414              		.loc 1 466 0
 415 0014 181C     		mov	r0, r3
 416 0016 BD46     		mov	sp, r7
 417              		@ sp needed
 418 0018 80BD     		pop	{r7, pc}
 419              	.L31:
 420 001a C046     		.align	2
 421              	.L30:
 422 001c 00000000 		.word	xTimerTaskHandle
 423              		.cfi_endproc
 424              	.LFE4:
 426              		.section	.text.xTimerGetPeriod,"ax",%progbits
 427              		.align	2
 428              		.global	xTimerGetPeriod
 429              		.code	16
 430              		.thumb_func
 432              	xTimerGetPeriod:
 433              	.LFB5:
 467:../freertos/timers.c **** /*-----------------------------------------------------------*/
 468:../freertos/timers.c **** 
 469:../freertos/timers.c **** TickType_t xTimerGetPeriod( TimerHandle_t xTimer )
 470:../freertos/timers.c **** {
 434              		.loc 1 470 0
 435              		.cfi_startproc
 436 0000 80B5     		push	{r7, lr}
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 7, -8
 439              		.cfi_offset 14, -4
 440 0002 84B0     		sub	sp, sp, #16
 441              		.cfi_def_cfa_offset 24
 442 0004 00AF     		add	r7, sp, #0
 443              		.cfi_def_cfa_register 7
 444 0006 7860     		str	r0, [r7, #4]
 471:../freertos/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 445              		.loc 1 471 0
 446 0008 7B68     		ldr	r3, [r7, #4]
 447 000a FB60     		str	r3, [r7, #12]
 472:../freertos/timers.c **** 
 473:../freertos/timers.c **** 	configASSERT( xTimer );
 448              		.loc 1 473 0
 449 000c 7B68     		ldr	r3, [r7, #4]
 450 000e 002B     		cmp	r3, #0
 451 0010 01D1     		bne	.L33
 452              		.loc 1 473 0 is_stmt 0 discriminator 1
 453              	@ 473 "../freertos/timers.c" 1
 454 0012 72B6     		 cpsid i 
 455              	@ 0 "" 2
 456              		.code	16
 457              	.L34:
 458 0014 FEE7     		b	.L34
 459              	.L33:
 474:../freertos/timers.c **** 	return pxTimer->xTimerPeriodInTicks;
 460              		.loc 1 474 0 is_stmt 1
 461 0016 FB68     		ldr	r3, [r7, #12]
 462 0018 9B69     		ldr	r3, [r3, #24]
 475:../freertos/timers.c **** }
 463              		.loc 1 475 0
 464 001a 181C     		mov	r0, r3
 465 001c BD46     		mov	sp, r7
 466 001e 04B0     		add	sp, sp, #16
 467              		@ sp needed
 468 0020 80BD     		pop	{r7, pc}
 469              		.cfi_endproc
 470              	.LFE5:
 472 0022 C046     		.section	.text.xTimerGetExpiryTime,"ax",%progbits
 473              		.align	2
 474              		.global	xTimerGetExpiryTime
 475              		.code	16
 476              		.thumb_func
 478              	xTimerGetExpiryTime:
 479              	.LFB6:
 476:../freertos/timers.c **** /*-----------------------------------------------------------*/
 477:../freertos/timers.c **** 
 478:../freertos/timers.c **** TickType_t xTimerGetExpiryTime( TimerHandle_t xTimer )
 479:../freertos/timers.c **** {
 480              		.loc 1 479 0
 481              		.cfi_startproc
 482 0000 80B5     		push	{r7, lr}
 483              		.cfi_def_cfa_offset 8
 484              		.cfi_offset 7, -8
 485              		.cfi_offset 14, -4
 486 0002 84B0     		sub	sp, sp, #16
 487              		.cfi_def_cfa_offset 24
 488 0004 00AF     		add	r7, sp, #0
 489              		.cfi_def_cfa_register 7
 490 0006 7860     		str	r0, [r7, #4]
 480:../freertos/timers.c **** Timer_t * pxTimer = ( Timer_t * ) xTimer;
 491              		.loc 1 480 0
 492 0008 7B68     		ldr	r3, [r7, #4]
 493 000a FB60     		str	r3, [r7, #12]
 481:../freertos/timers.c **** TickType_t xReturn;
 482:../freertos/timers.c **** 
 483:../freertos/timers.c **** 	configASSERT( xTimer );
 494              		.loc 1 483 0
 495 000c 7B68     		ldr	r3, [r7, #4]
 496 000e 002B     		cmp	r3, #0
 497 0010 01D1     		bne	.L37
 498              		.loc 1 483 0 is_stmt 0 discriminator 1
 499              	@ 483 "../freertos/timers.c" 1
 500 0012 72B6     		 cpsid i 
 501              	@ 0 "" 2
 502              		.code	16
 503              	.L38:
 504 0014 FEE7     		b	.L38
 505              	.L37:
 484:../freertos/timers.c **** 	xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 506              		.loc 1 484 0 is_stmt 1
 507 0016 FB68     		ldr	r3, [r7, #12]
 508 0018 5B68     		ldr	r3, [r3, #4]
 509 001a BB60     		str	r3, [r7, #8]
 485:../freertos/timers.c **** 	return xReturn;
 510              		.loc 1 485 0
 511 001c BB68     		ldr	r3, [r7, #8]
 486:../freertos/timers.c **** }
 512              		.loc 1 486 0
 513 001e 181C     		mov	r0, r3
 514 0020 BD46     		mov	sp, r7
 515 0022 04B0     		add	sp, sp, #16
 516              		@ sp needed
 517 0024 80BD     		pop	{r7, pc}
 518              		.cfi_endproc
 519              	.LFE6:
 521 0026 C046     		.section	.text.pcTimerGetName,"ax",%progbits
 522              		.align	2
 523              		.global	pcTimerGetName
 524              		.code	16
 525              		.thumb_func
 527              	pcTimerGetName:
 528              	.LFB7:
 487:../freertos/timers.c **** /*-----------------------------------------------------------*/
 488:../freertos/timers.c **** 
 489:../freertos/timers.c **** const char * pcTimerGetName( TimerHandle_t xTimer ) /*lint !e971 Unqualified char types are allowed
 490:../freertos/timers.c **** {
 529              		.loc 1 490 0
 530              		.cfi_startproc
 531 0000 80B5     		push	{r7, lr}
 532              		.cfi_def_cfa_offset 8
 533              		.cfi_offset 7, -8
 534              		.cfi_offset 14, -4
 535 0002 84B0     		sub	sp, sp, #16
 536              		.cfi_def_cfa_offset 24
 537 0004 00AF     		add	r7, sp, #0
 538              		.cfi_def_cfa_register 7
 539 0006 7860     		str	r0, [r7, #4]
 491:../freertos/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 540              		.loc 1 491 0
 541 0008 7B68     		ldr	r3, [r7, #4]
 542 000a FB60     		str	r3, [r7, #12]
 492:../freertos/timers.c **** 
 493:../freertos/timers.c **** 	configASSERT( xTimer );
 543              		.loc 1 493 0
 544 000c 7B68     		ldr	r3, [r7, #4]
 545 000e 002B     		cmp	r3, #0
 546 0010 01D1     		bne	.L41
 547              		.loc 1 493 0 is_stmt 0 discriminator 1
 548              	@ 493 "../freertos/timers.c" 1
 549 0012 72B6     		 cpsid i 
 550              	@ 0 "" 2
 551              		.code	16
 552              	.L42:
 553 0014 FEE7     		b	.L42
 554              	.L41:
 494:../freertos/timers.c **** 	return pxTimer->pcTimerName;
 555              		.loc 1 494 0 is_stmt 1
 556 0016 FB68     		ldr	r3, [r7, #12]
 557 0018 1B68     		ldr	r3, [r3]
 495:../freertos/timers.c **** }
 558              		.loc 1 495 0
 559 001a 181C     		mov	r0, r3
 560 001c BD46     		mov	sp, r7
 561 001e 04B0     		add	sp, sp, #16
 562              		@ sp needed
 563 0020 80BD     		pop	{r7, pc}
 564              		.cfi_endproc
 565              	.LFE7:
 567 0022 C046     		.section	.text.prvProcessExpiredTimer,"ax",%progbits
 568              		.align	2
 569              		.code	16
 570              		.thumb_func
 572              	prvProcessExpiredTimer:
 573              	.LFB8:
 496:../freertos/timers.c **** /*-----------------------------------------------------------*/
 497:../freertos/timers.c **** 
 498:../freertos/timers.c **** static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
 499:../freertos/timers.c **** {
 574              		.loc 1 499 0
 575              		.cfi_startproc
 576 0000 80B5     		push	{r7, lr}
 577              		.cfi_def_cfa_offset 8
 578              		.cfi_offset 7, -8
 579              		.cfi_offset 14, -4
 580 0002 86B0     		sub	sp, sp, #24
 581              		.cfi_def_cfa_offset 32
 582 0004 02AF     		add	r7, sp, #8
 583              		.cfi_def_cfa 7, 24
 584 0006 7860     		str	r0, [r7, #4]
 585 0008 3960     		str	r1, [r7]
 500:../freertos/timers.c **** BaseType_t xResult;
 501:../freertos/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 586              		.loc 1 501 0
 587 000a 194B     		ldr	r3, .L47
 588 000c 1B68     		ldr	r3, [r3]
 589 000e DB68     		ldr	r3, [r3, #12]
 590 0010 DB68     		ldr	r3, [r3, #12]
 591 0012 FB60     		str	r3, [r7, #12]
 502:../freertos/timers.c **** 
 503:../freertos/timers.c **** 	/* Remove the timer from the list of active timers.  A check has already
 504:../freertos/timers.c **** 	been performed to ensure the list is not empty. */
 505:../freertos/timers.c **** 	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 592              		.loc 1 505 0
 593 0014 FB68     		ldr	r3, [r7, #12]
 594 0016 0433     		add	r3, r3, #4
 595 0018 181C     		mov	r0, r3
 596 001a FFF7FEFF 		bl	uxListRemove
 506:../freertos/timers.c **** 	traceTIMER_EXPIRED( pxTimer );
 507:../freertos/timers.c **** 
 508:../freertos/timers.c **** 	/* If the timer is an auto reload timer then calculate the next
 509:../freertos/timers.c **** 	expiry time and re-insert the timer in the list of active timers. */
 510:../freertos/timers.c **** 	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 597              		.loc 1 510 0
 598 001e FB68     		ldr	r3, [r7, #12]
 599 0020 DB69     		ldr	r3, [r3, #28]
 600 0022 012B     		cmp	r3, #1
 601 0024 1CD1     		bne	.L45
 511:../freertos/timers.c **** 	{
 512:../freertos/timers.c **** 		/* The timer is inserted into a list using a time relative to anything
 513:../freertos/timers.c **** 		other than the current time.  It will therefore be inserted into the
 514:../freertos/timers.c **** 		correct list relative to the time this task thinks it is now. */
 515:../freertos/timers.c **** 		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTim
 602              		.loc 1 515 0
 603 0026 FB68     		ldr	r3, [r7, #12]
 604 0028 9A69     		ldr	r2, [r3, #24]
 605 002a 7B68     		ldr	r3, [r7, #4]
 606 002c D118     		add	r1, r2, r3
 607 002e F868     		ldr	r0, [r7, #12]
 608 0030 3A68     		ldr	r2, [r7]
 609 0032 7B68     		ldr	r3, [r7, #4]
 610 0034 FFF7FEFF 		bl	prvInsertTimerInActiveList
 611 0038 031C     		mov	r3, r0
 612 003a 002B     		cmp	r3, #0
 613 003c 10D0     		beq	.L45
 516:../freertos/timers.c **** 		{
 517:../freertos/timers.c **** 			/* The timer expired before it was added to the active timer
 518:../freertos/timers.c **** 			list.  Reload it now.  */
 519:../freertos/timers.c **** 			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmr
 614              		.loc 1 519 0
 615 003e FA68     		ldr	r2, [r7, #12]
 616 0040 7B68     		ldr	r3, [r7, #4]
 617 0042 0021     		mov	r1, #0
 618 0044 0091     		str	r1, [sp]
 619 0046 101C     		mov	r0, r2
 620 0048 0021     		mov	r1, #0
 621 004a 1A1C     		mov	r2, r3
 622 004c 0023     		mov	r3, #0
 623 004e FFF7FEFF 		bl	xTimerGenericCommand
 624 0052 031C     		mov	r3, r0
 625 0054 BB60     		str	r3, [r7, #8]
 520:../freertos/timers.c **** 			configASSERT( xResult );
 626              		.loc 1 520 0
 627 0056 BB68     		ldr	r3, [r7, #8]
 628 0058 002B     		cmp	r3, #0
 629 005a 01D1     		bne	.L45
 630              		.loc 1 520 0 is_stmt 0 discriminator 1
 631              	@ 520 "../freertos/timers.c" 1
 632 005c 72B6     		 cpsid i 
 633              	@ 0 "" 2
 634              		.code	16
 635              	.L46:
 636 005e FEE7     		b	.L46
 637              	.L45:
 521:../freertos/timers.c **** 			( void ) xResult;
 522:../freertos/timers.c **** 		}
 523:../freertos/timers.c **** 		else
 524:../freertos/timers.c **** 		{
 525:../freertos/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 526:../freertos/timers.c **** 		}
 527:../freertos/timers.c **** 	}
 528:../freertos/timers.c **** 	else
 529:../freertos/timers.c **** 	{
 530:../freertos/timers.c **** 		mtCOVERAGE_TEST_MARKER();
 531:../freertos/timers.c **** 	}
 532:../freertos/timers.c **** 
 533:../freertos/timers.c **** 	/* Call the timer callback. */
 534:../freertos/timers.c **** 	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 638              		.loc 1 534 0 is_stmt 1
 639 0060 FB68     		ldr	r3, [r7, #12]
 640 0062 5B6A     		ldr	r3, [r3, #36]
 641 0064 FA68     		ldr	r2, [r7, #12]
 642 0066 101C     		mov	r0, r2
 643 0068 9847     		blx	r3
 535:../freertos/timers.c **** }
 644              		.loc 1 535 0
 645 006a BD46     		mov	sp, r7
 646 006c 04B0     		add	sp, sp, #16
 647              		@ sp needed
 648 006e 80BD     		pop	{r7, pc}
 649              	.L48:
 650              		.align	2
 651              	.L47:
 652 0070 00000000 		.word	pxCurrentTimerList
 653              		.cfi_endproc
 654              	.LFE8:
 656              		.section	.text.prvTimerTask,"ax",%progbits
 657              		.align	2
 658              		.code	16
 659              		.thumb_func
 661              	prvTimerTask:
 662              	.LFB9:
 536:../freertos/timers.c **** /*-----------------------------------------------------------*/
 537:../freertos/timers.c **** 
 538:../freertos/timers.c **** static void prvTimerTask( void *pvParameters )
 539:../freertos/timers.c **** {
 663              		.loc 1 539 0
 664              		.cfi_startproc
 665 0000 80B5     		push	{r7, lr}
 666              		.cfi_def_cfa_offset 8
 667              		.cfi_offset 7, -8
 668              		.cfi_offset 14, -4
 669 0002 84B0     		sub	sp, sp, #16
 670              		.cfi_def_cfa_offset 24
 671 0004 00AF     		add	r7, sp, #0
 672              		.cfi_def_cfa_register 7
 673 0006 7860     		str	r0, [r7, #4]
 674              	.L50:
 540:../freertos/timers.c **** TickType_t xNextExpireTime;
 541:../freertos/timers.c **** BaseType_t xListWasEmpty;
 542:../freertos/timers.c **** 
 543:../freertos/timers.c **** 	/* Just to avoid compiler warnings. */
 544:../freertos/timers.c **** 	( void ) pvParameters;
 545:../freertos/timers.c **** 
 546:../freertos/timers.c **** 	#if( configUSE_DAEMON_TASK_STARTUP_HOOK == 1 )
 547:../freertos/timers.c **** 	{
 548:../freertos/timers.c **** 		extern void vApplicationDaemonTaskStartupHook( void );
 549:../freertos/timers.c **** 
 550:../freertos/timers.c **** 		/* Allow the application writer to execute some code in the context of
 551:../freertos/timers.c **** 		this task at the point the task starts executing.  This is useful if the
 552:../freertos/timers.c **** 		application includes initialisation code that would benefit from
 553:../freertos/timers.c **** 		executing after the scheduler has been started. */
 554:../freertos/timers.c **** 		vApplicationDaemonTaskStartupHook();
 555:../freertos/timers.c **** 	}
 556:../freertos/timers.c **** 	#endif /* configUSE_DAEMON_TASK_STARTUP_HOOK */
 557:../freertos/timers.c **** 
 558:../freertos/timers.c **** 	for( ;; )
 559:../freertos/timers.c **** 	{
 560:../freertos/timers.c **** 		/* Query the timers list to see if it contains any timers, and if so,
 561:../freertos/timers.c **** 		obtain the time at which the next timer will expire. */
 562:../freertos/timers.c **** 		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 675              		.loc 1 562 0 discriminator 1
 676 0008 3B1C     		mov	r3, r7
 677 000a 0833     		add	r3, r3, #8
 678 000c 181C     		mov	r0, r3
 679 000e FFF7FEFF 		bl	prvGetNextExpireTime
 680 0012 031C     		mov	r3, r0
 681 0014 FB60     		str	r3, [r7, #12]
 563:../freertos/timers.c **** 
 564:../freertos/timers.c **** 		/* If a timer has expired, process it.  Otherwise, block this task
 565:../freertos/timers.c **** 		until either a timer does expire, or a command is received. */
 566:../freertos/timers.c **** 		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 682              		.loc 1 566 0 discriminator 1
 683 0016 BB68     		ldr	r3, [r7, #8]
 684 0018 FA68     		ldr	r2, [r7, #12]
 685 001a 101C     		mov	r0, r2
 686 001c 191C     		mov	r1, r3
 687 001e FFF7FEFF 		bl	prvProcessTimerOrBlockTask
 567:../freertos/timers.c **** 
 568:../freertos/timers.c **** 		/* Empty the command queue. */
 569:../freertos/timers.c **** 		prvProcessReceivedCommands();
 688              		.loc 1 569 0 discriminator 1
 689 0022 FFF7FEFF 		bl	prvProcessReceivedCommands
 570:../freertos/timers.c **** 	}
 690              		.loc 1 570 0 discriminator 1
 691 0026 EFE7     		b	.L50
 692              		.cfi_endproc
 693              	.LFE9:
 695              		.section	.text.prvProcessTimerOrBlockTask,"ax",%progbits
 696              		.align	2
 697              		.code	16
 698              		.thumb_func
 700              	prvProcessTimerOrBlockTask:
 701              	.LFB10:
 571:../freertos/timers.c **** }
 572:../freertos/timers.c **** /*-----------------------------------------------------------*/
 573:../freertos/timers.c **** 
 574:../freertos/timers.c **** static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty 
 575:../freertos/timers.c **** {
 702              		.loc 1 575 0
 703              		.cfi_startproc
 704 0000 80B5     		push	{r7, lr}
 705              		.cfi_def_cfa_offset 8
 706              		.cfi_offset 7, -8
 707              		.cfi_offset 14, -4
 708 0002 84B0     		sub	sp, sp, #16
 709              		.cfi_def_cfa_offset 24
 710 0004 00AF     		add	r7, sp, #0
 711              		.cfi_def_cfa_register 7
 712 0006 7860     		str	r0, [r7, #4]
 713 0008 3960     		str	r1, [r7]
 576:../freertos/timers.c **** TickType_t xTimeNow;
 577:../freertos/timers.c **** BaseType_t xTimerListsWereSwitched;
 578:../freertos/timers.c **** 
 579:../freertos/timers.c **** 	vTaskSuspendAll();
 714              		.loc 1 579 0
 715 000a FFF7FEFF 		bl	vTaskSuspendAll
 580:../freertos/timers.c **** 	{
 581:../freertos/timers.c **** 		/* Obtain the time now to make an assessment as to whether the timer
 582:../freertos/timers.c **** 		has expired or not.  If obtaining the time causes the lists to switch
 583:../freertos/timers.c **** 		then don't process this timer as any timers that remained in the list
 584:../freertos/timers.c **** 		when the lists were switched will have been processed within the
 585:../freertos/timers.c **** 		prvSampleTimeNow() function. */
 586:../freertos/timers.c **** 		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 716              		.loc 1 586 0
 717 000e 3B1C     		mov	r3, r7
 718 0010 0833     		add	r3, r3, #8
 719 0012 181C     		mov	r0, r3
 720 0014 FFF7FEFF 		bl	prvSampleTimeNow
 721 0018 031C     		mov	r3, r0
 722 001a FB60     		str	r3, [r7, #12]
 587:../freertos/timers.c **** 		if( xTimerListsWereSwitched == pdFALSE )
 723              		.loc 1 587 0
 724 001c BB68     		ldr	r3, [r7, #8]
 725 001e 002B     		cmp	r3, #0
 726 0020 2CD1     		bne	.L52
 588:../freertos/timers.c **** 		{
 589:../freertos/timers.c **** 			/* The tick count has not overflowed, has the timer expired? */
 590:../freertos/timers.c **** 			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 727              		.loc 1 590 0
 728 0022 3B68     		ldr	r3, [r7]
 729 0024 002B     		cmp	r3, #0
 730 0026 0CD1     		bne	.L53
 731              		.loc 1 590 0 is_stmt 0 discriminator 1
 732 0028 7A68     		ldr	r2, [r7, #4]
 733 002a FB68     		ldr	r3, [r7, #12]
 734 002c 9A42     		cmp	r2, r3
 735 002e 08D8     		bhi	.L53
 591:../freertos/timers.c **** 			{
 592:../freertos/timers.c **** 				( void ) xTaskResumeAll();
 736              		.loc 1 592 0 is_stmt 1
 737 0030 FFF7FEFF 		bl	xTaskResumeAll
 593:../freertos/timers.c **** 				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 738              		.loc 1 593 0
 739 0034 7A68     		ldr	r2, [r7, #4]
 740 0036 FB68     		ldr	r3, [r7, #12]
 741 0038 101C     		mov	r0, r2
 742 003a 191C     		mov	r1, r3
 743 003c FFF7FEFF 		bl	prvProcessExpiredTimer
 744 0040 1EE0     		b	.L51
 745              	.L53:
 594:../freertos/timers.c **** 			}
 595:../freertos/timers.c **** 			else
 596:../freertos/timers.c **** 			{
 597:../freertos/timers.c **** 				/* The tick count has not overflowed, and the next expire
 598:../freertos/timers.c **** 				time has not been reached yet.  This task should therefore
 599:../freertos/timers.c **** 				block to wait for the next expire time or a command to be
 600:../freertos/timers.c **** 				received - whichever comes first.  The following line cannot
 601:../freertos/timers.c **** 				be reached unless xNextExpireTime > xTimeNow, except in the
 602:../freertos/timers.c **** 				case when the current timer list is empty. */
 603:../freertos/timers.c **** 				if( xListWasEmpty != pdFALSE )
 746              		.loc 1 603 0
 747 0042 3B68     		ldr	r3, [r7]
 748 0044 002B     		cmp	r3, #0
 749 0046 06D0     		beq	.L55
 604:../freertos/timers.c **** 				{
 605:../freertos/timers.c **** 					/* The current timer list is empty - is the overflow list
 606:../freertos/timers.c **** 					also empty? */
 607:../freertos/timers.c **** 					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 750              		.loc 1 607 0
 751 0048 0F4B     		ldr	r3, .L57
 752 004a 1B68     		ldr	r3, [r3]
 753 004c 1B68     		ldr	r3, [r3]
 754 004e 5A42     		neg	r2, r3
 755 0050 5341     		adc	r3, r3, r2
 756 0052 DBB2     		uxtb	r3, r3
 757 0054 3B60     		str	r3, [r7]
 758              	.L55:
 608:../freertos/timers.c **** 				}
 609:../freertos/timers.c **** 
 610:../freertos/timers.c **** 				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 759              		.loc 1 610 0
 760 0056 0D4B     		ldr	r3, .L57+4
 761 0058 1968     		ldr	r1, [r3]
 762 005a 7A68     		ldr	r2, [r7, #4]
 763 005c FB68     		ldr	r3, [r7, #12]
 764 005e D21A     		sub	r2, r2, r3
 765 0060 3B68     		ldr	r3, [r7]
 766 0062 081C     		mov	r0, r1
 767 0064 111C     		mov	r1, r2
 768 0066 1A1C     		mov	r2, r3
 769 0068 FFF7FEFF 		bl	vQueueWaitForMessageRestricted
 611:../freertos/timers.c **** 
 612:../freertos/timers.c **** 				if( xTaskResumeAll() == pdFALSE )
 770              		.loc 1 612 0
 771 006c FFF7FEFF 		bl	xTaskResumeAll
 772 0070 031C     		mov	r3, r0
 773 0072 002B     		cmp	r3, #0
 774 0074 04D1     		bne	.L51
 613:../freertos/timers.c **** 				{
 614:../freertos/timers.c **** 					/* Yield to wait for either a command to arrive, or the
 615:../freertos/timers.c **** 					block time to expire.  If a command arrived between the
 616:../freertos/timers.c **** 					critical section being exited and this yield then the yield
 617:../freertos/timers.c **** 					will not cause the task to block. */
 618:../freertos/timers.c **** 					portYIELD_WITHIN_API();
 775              		.loc 1 618 0
 776 0076 FFF7FEFF 		bl	vPortYield
 777 007a 01E0     		b	.L51
 778              	.L52:
 619:../freertos/timers.c **** 				}
 620:../freertos/timers.c **** 				else
 621:../freertos/timers.c **** 				{
 622:../freertos/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 623:../freertos/timers.c **** 				}
 624:../freertos/timers.c **** 			}
 625:../freertos/timers.c **** 		}
 626:../freertos/timers.c **** 		else
 627:../freertos/timers.c **** 		{
 628:../freertos/timers.c **** 			( void ) xTaskResumeAll();
 779              		.loc 1 628 0
 780 007c FFF7FEFF 		bl	xTaskResumeAll
 781              	.L51:
 629:../freertos/timers.c **** 		}
 630:../freertos/timers.c **** 	}
 631:../freertos/timers.c **** }
 782              		.loc 1 631 0
 783 0080 BD46     		mov	sp, r7
 784 0082 04B0     		add	sp, sp, #16
 785              		@ sp needed
 786 0084 80BD     		pop	{r7, pc}
 787              	.L58:
 788 0086 C046     		.align	2
 789              	.L57:
 790 0088 00000000 		.word	pxOverflowTimerList
 791 008c 00000000 		.word	xTimerQueue
 792              		.cfi_endproc
 793              	.LFE10:
 795              		.section	.text.prvGetNextExpireTime,"ax",%progbits
 796              		.align	2
 797              		.code	16
 798              		.thumb_func
 800              	prvGetNextExpireTime:
 801              	.LFB11:
 632:../freertos/timers.c **** /*-----------------------------------------------------------*/
 633:../freertos/timers.c **** 
 634:../freertos/timers.c **** static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
 635:../freertos/timers.c **** {
 802              		.loc 1 635 0
 803              		.cfi_startproc
 804 0000 80B5     		push	{r7, lr}
 805              		.cfi_def_cfa_offset 8
 806              		.cfi_offset 7, -8
 807              		.cfi_offset 14, -4
 808 0002 84B0     		sub	sp, sp, #16
 809              		.cfi_def_cfa_offset 24
 810 0004 00AF     		add	r7, sp, #0
 811              		.cfi_def_cfa_register 7
 812 0006 7860     		str	r0, [r7, #4]
 636:../freertos/timers.c **** TickType_t xNextExpireTime;
 637:../freertos/timers.c **** 
 638:../freertos/timers.c **** 	/* Timers are listed in expiry time order, with the head of the list
 639:../freertos/timers.c **** 	referencing the task that will expire first.  Obtain the time at which
 640:../freertos/timers.c **** 	the timer with the nearest expiry time will expire.  If there are no
 641:../freertos/timers.c **** 	active timers then just set the next expire time to 0.  That will cause
 642:../freertos/timers.c **** 	this task to unblock when the tick count overflows, at which point the
 643:../freertos/timers.c **** 	timer lists will be switched and the next expiry time can be
 644:../freertos/timers.c **** 	re-assessed.  */
 645:../freertos/timers.c **** 	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 813              		.loc 1 645 0
 814 0008 0C4B     		ldr	r3, .L63
 815 000a 1B68     		ldr	r3, [r3]
 816 000c 1B68     		ldr	r3, [r3]
 817 000e 5A42     		neg	r2, r3
 818 0010 5341     		adc	r3, r3, r2
 819 0012 DBB2     		uxtb	r3, r3
 820 0014 1A1C     		mov	r2, r3
 821 0016 7B68     		ldr	r3, [r7, #4]
 822 0018 1A60     		str	r2, [r3]
 646:../freertos/timers.c **** 	if( *pxListWasEmpty == pdFALSE )
 823              		.loc 1 646 0
 824 001a 7B68     		ldr	r3, [r7, #4]
 825 001c 1B68     		ldr	r3, [r3]
 826 001e 002B     		cmp	r3, #0
 827 0020 05D1     		bne	.L60
 647:../freertos/timers.c **** 	{
 648:../freertos/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 828              		.loc 1 648 0
 829 0022 064B     		ldr	r3, .L63
 830 0024 1B68     		ldr	r3, [r3]
 831 0026 DB68     		ldr	r3, [r3, #12]
 832 0028 1B68     		ldr	r3, [r3]
 833 002a FB60     		str	r3, [r7, #12]
 834 002c 01E0     		b	.L61
 835              	.L60:
 649:../freertos/timers.c **** 	}
 650:../freertos/timers.c **** 	else
 651:../freertos/timers.c **** 	{
 652:../freertos/timers.c **** 		/* Ensure the task unblocks when the tick count rolls over. */
 653:../freertos/timers.c **** 		xNextExpireTime = ( TickType_t ) 0U;
 836              		.loc 1 653 0
 837 002e 0023     		mov	r3, #0
 838 0030 FB60     		str	r3, [r7, #12]
 839              	.L61:
 654:../freertos/timers.c **** 	}
 655:../freertos/timers.c **** 
 656:../freertos/timers.c **** 	return xNextExpireTime;
 840              		.loc 1 656 0
 841 0032 FB68     		ldr	r3, [r7, #12]
 657:../freertos/timers.c **** }
 842              		.loc 1 657 0
 843 0034 181C     		mov	r0, r3
 844 0036 BD46     		mov	sp, r7
 845 0038 04B0     		add	sp, sp, #16
 846              		@ sp needed
 847 003a 80BD     		pop	{r7, pc}
 848              	.L64:
 849              		.align	2
 850              	.L63:
 851 003c 00000000 		.word	pxCurrentTimerList
 852              		.cfi_endproc
 853              	.LFE11:
 855              		.section	.text.prvSampleTimeNow,"ax",%progbits
 856              		.align	2
 857              		.code	16
 858              		.thumb_func
 860              	prvSampleTimeNow:
 861              	.LFB12:
 658:../freertos/timers.c **** /*-----------------------------------------------------------*/
 659:../freertos/timers.c **** 
 660:../freertos/timers.c **** static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
 661:../freertos/timers.c **** {
 862              		.loc 1 661 0
 863              		.cfi_startproc
 864 0000 80B5     		push	{r7, lr}
 865              		.cfi_def_cfa_offset 8
 866              		.cfi_offset 7, -8
 867              		.cfi_offset 14, -4
 868 0002 84B0     		sub	sp, sp, #16
 869              		.cfi_def_cfa_offset 24
 870 0004 00AF     		add	r7, sp, #0
 871              		.cfi_def_cfa_register 7
 872 0006 7860     		str	r0, [r7, #4]
 662:../freertos/timers.c **** TickType_t xTimeNow;
 663:../freertos/timers.c **** PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only acce
 664:../freertos/timers.c **** 
 665:../freertos/timers.c **** 	xTimeNow = xTaskGetTickCount();
 873              		.loc 1 665 0
 874 0008 FFF7FEFF 		bl	xTaskGetTickCount
 875 000c 031C     		mov	r3, r0
 876 000e FB60     		str	r3, [r7, #12]
 666:../freertos/timers.c **** 
 667:../freertos/timers.c **** 	if( xTimeNow < xLastTime )
 877              		.loc 1 667 0
 878 0010 0A4B     		ldr	r3, .L69
 879 0012 1B68     		ldr	r3, [r3]
 880 0014 FA68     		ldr	r2, [r7, #12]
 881 0016 9A42     		cmp	r2, r3
 882 0018 05D2     		bcs	.L66
 668:../freertos/timers.c **** 	{
 669:../freertos/timers.c **** 		prvSwitchTimerLists();
 883              		.loc 1 669 0
 884 001a FFF7FEFF 		bl	prvSwitchTimerLists
 670:../freertos/timers.c **** 		*pxTimerListsWereSwitched = pdTRUE;
 885              		.loc 1 670 0
 886 001e 7B68     		ldr	r3, [r7, #4]
 887 0020 0122     		mov	r2, #1
 888 0022 1A60     		str	r2, [r3]
 889 0024 02E0     		b	.L67
 890              	.L66:
 671:../freertos/timers.c **** 	}
 672:../freertos/timers.c **** 	else
 673:../freertos/timers.c **** 	{
 674:../freertos/timers.c **** 		*pxTimerListsWereSwitched = pdFALSE;
 891              		.loc 1 674 0
 892 0026 7B68     		ldr	r3, [r7, #4]
 893 0028 0022     		mov	r2, #0
 894 002a 1A60     		str	r2, [r3]
 895              	.L67:
 675:../freertos/timers.c **** 	}
 676:../freertos/timers.c **** 
 677:../freertos/timers.c **** 	xLastTime = xTimeNow;
 896              		.loc 1 677 0
 897 002c 034B     		ldr	r3, .L69
 898 002e FA68     		ldr	r2, [r7, #12]
 899 0030 1A60     		str	r2, [r3]
 678:../freertos/timers.c **** 
 679:../freertos/timers.c **** 	return xTimeNow;
 900              		.loc 1 679 0
 901 0032 FB68     		ldr	r3, [r7, #12]
 680:../freertos/timers.c **** }
 902              		.loc 1 680 0
 903 0034 181C     		mov	r0, r3
 904 0036 BD46     		mov	sp, r7
 905 0038 04B0     		add	sp, sp, #16
 906              		@ sp needed
 907 003a 80BD     		pop	{r7, pc}
 908              	.L70:
 909              		.align	2
 910              	.L69:
 911 003c 00000000 		.word	xLastTime.4960
 912              		.cfi_endproc
 913              	.LFE12:
 915              		.section	.text.prvInsertTimerInActiveList,"ax",%progbits
 916              		.align	2
 917              		.code	16
 918              		.thumb_func
 920              	prvInsertTimerInActiveList:
 921              	.LFB13:
 681:../freertos/timers.c **** /*-----------------------------------------------------------*/
 682:../freertos/timers.c **** 
 683:../freertos/timers.c **** static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiry
 684:../freertos/timers.c **** {
 922              		.loc 1 684 0
 923              		.cfi_startproc
 924 0000 80B5     		push	{r7, lr}
 925              		.cfi_def_cfa_offset 8
 926              		.cfi_offset 7, -8
 927              		.cfi_offset 14, -4
 928 0002 86B0     		sub	sp, sp, #24
 929              		.cfi_def_cfa_offset 32
 930 0004 00AF     		add	r7, sp, #0
 931              		.cfi_def_cfa_register 7
 932 0006 F860     		str	r0, [r7, #12]
 933 0008 B960     		str	r1, [r7, #8]
 934 000a 7A60     		str	r2, [r7, #4]
 935 000c 3B60     		str	r3, [r7]
 685:../freertos/timers.c **** BaseType_t xProcessTimerNow = pdFALSE;
 936              		.loc 1 685 0
 937 000e 0023     		mov	r3, #0
 938 0010 7B61     		str	r3, [r7, #20]
 686:../freertos/timers.c **** 
 687:../freertos/timers.c **** 	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 939              		.loc 1 687 0
 940 0012 FB68     		ldr	r3, [r7, #12]
 941 0014 BA68     		ldr	r2, [r7, #8]
 942 0016 5A60     		str	r2, [r3, #4]
 688:../freertos/timers.c **** 	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 943              		.loc 1 688 0
 944 0018 FB68     		ldr	r3, [r7, #12]
 945 001a FA68     		ldr	r2, [r7, #12]
 946 001c 1A61     		str	r2, [r3, #16]
 689:../freertos/timers.c **** 
 690:../freertos/timers.c **** 	if( xNextExpiryTime <= xTimeNow )
 947              		.loc 1 690 0
 948 001e BA68     		ldr	r2, [r7, #8]
 949 0020 7B68     		ldr	r3, [r7, #4]
 950 0022 9A42     		cmp	r2, r3
 951 0024 12D8     		bhi	.L72
 691:../freertos/timers.c **** 	{
 692:../freertos/timers.c **** 		/* Has the expiry time elapsed between the command to start/reset a
 693:../freertos/timers.c **** 		timer was issued, and the time the command was processed? */
 694:../freertos/timers.c **** 		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961
 952              		.loc 1 694 0
 953 0026 7A68     		ldr	r2, [r7, #4]
 954 0028 3B68     		ldr	r3, [r7]
 955 002a D21A     		sub	r2, r2, r3
 956 002c FB68     		ldr	r3, [r7, #12]
 957 002e 9B69     		ldr	r3, [r3, #24]
 958 0030 9A42     		cmp	r2, r3
 959 0032 02D3     		bcc	.L73
 695:../freertos/timers.c **** 		{
 696:../freertos/timers.c **** 			/* The time between a command being issued and the command being
 697:../freertos/timers.c **** 			processed actually exceeds the timers period.  */
 698:../freertos/timers.c **** 			xProcessTimerNow = pdTRUE;
 960              		.loc 1 698 0
 961 0034 0123     		mov	r3, #1
 962 0036 7B61     		str	r3, [r7, #20]
 963 0038 1BE0     		b	.L75
 964              	.L73:
 699:../freertos/timers.c **** 		}
 700:../freertos/timers.c **** 		else
 701:../freertos/timers.c **** 		{
 702:../freertos/timers.c **** 			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 965              		.loc 1 702 0
 966 003a 104B     		ldr	r3, .L78
 967 003c 1A68     		ldr	r2, [r3]
 968 003e FB68     		ldr	r3, [r7, #12]
 969 0040 0433     		add	r3, r3, #4
 970 0042 101C     		mov	r0, r2
 971 0044 191C     		mov	r1, r3
 972 0046 FFF7FEFF 		bl	vListInsert
 973 004a 12E0     		b	.L75
 974              	.L72:
 703:../freertos/timers.c **** 		}
 704:../freertos/timers.c **** 	}
 705:../freertos/timers.c **** 	else
 706:../freertos/timers.c **** 	{
 707:../freertos/timers.c **** 		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 975              		.loc 1 707 0
 976 004c 7A68     		ldr	r2, [r7, #4]
 977 004e 3B68     		ldr	r3, [r7]
 978 0050 9A42     		cmp	r2, r3
 979 0052 06D2     		bcs	.L76
 980              		.loc 1 707 0 is_stmt 0 discriminator 1
 981 0054 BA68     		ldr	r2, [r7, #8]
 982 0056 3B68     		ldr	r3, [r7]
 983 0058 9A42     		cmp	r2, r3
 984 005a 02D3     		bcc	.L76
 708:../freertos/timers.c **** 		{
 709:../freertos/timers.c **** 			/* If, since the command was issued, the tick count has overflowed
 710:../freertos/timers.c **** 			but the expiry time has not, then the timer must have already passed
 711:../freertos/timers.c **** 			its expiry time and should be processed immediately. */
 712:../freertos/timers.c **** 			xProcessTimerNow = pdTRUE;
 985              		.loc 1 712 0 is_stmt 1
 986 005c 0123     		mov	r3, #1
 987 005e 7B61     		str	r3, [r7, #20]
 988 0060 07E0     		b	.L75
 989              	.L76:
 713:../freertos/timers.c **** 		}
 714:../freertos/timers.c **** 		else
 715:../freertos/timers.c **** 		{
 716:../freertos/timers.c **** 			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 990              		.loc 1 716 0
 991 0062 074B     		ldr	r3, .L78+4
 992 0064 1A68     		ldr	r2, [r3]
 993 0066 FB68     		ldr	r3, [r7, #12]
 994 0068 0433     		add	r3, r3, #4
 995 006a 101C     		mov	r0, r2
 996 006c 191C     		mov	r1, r3
 997 006e FFF7FEFF 		bl	vListInsert
 998              	.L75:
 717:../freertos/timers.c **** 		}
 718:../freertos/timers.c **** 	}
 719:../freertos/timers.c **** 
 720:../freertos/timers.c **** 	return xProcessTimerNow;
 999              		.loc 1 720 0
 1000 0072 7B69     		ldr	r3, [r7, #20]
 721:../freertos/timers.c **** }
 1001              		.loc 1 721 0
 1002 0074 181C     		mov	r0, r3
 1003 0076 BD46     		mov	sp, r7
 1004 0078 06B0     		add	sp, sp, #24
 1005              		@ sp needed
 1006 007a 80BD     		pop	{r7, pc}
 1007              	.L79:
 1008              		.align	2
 1009              	.L78:
 1010 007c 00000000 		.word	pxOverflowTimerList
 1011 0080 00000000 		.word	pxCurrentTimerList
 1012              		.cfi_endproc
 1013              	.LFE13:
 1015              		.section	.text.prvProcessReceivedCommands,"ax",%progbits
 1016              		.align	2
 1017              		.code	16
 1018              		.thumb_func
 1020              	prvProcessReceivedCommands:
 1021              	.LFB14:
 722:../freertos/timers.c **** /*-----------------------------------------------------------*/
 723:../freertos/timers.c **** 
 724:../freertos/timers.c **** static void	prvProcessReceivedCommands( void )
 725:../freertos/timers.c **** {
 1022              		.loc 1 725 0
 1023              		.cfi_startproc
 1024 0000 80B5     		push	{r7, lr}
 1025              		.cfi_def_cfa_offset 8
 1026              		.cfi_offset 7, -8
 1027              		.cfi_offset 14, -4
 1028 0002 8CB0     		sub	sp, sp, #48
 1029              		.cfi_def_cfa_offset 56
 1030 0004 02AF     		add	r7, sp, #8
 1031              		.cfi_def_cfa 7, 48
 726:../freertos/timers.c **** DaemonTaskMessage_t xMessage;
 727:../freertos/timers.c **** Timer_t *pxTimer;
 728:../freertos/timers.c **** BaseType_t xTimerListsWereSwitched, xResult;
 729:../freertos/timers.c **** TickType_t xTimeNow;
 730:../freertos/timers.c **** 
 731:../freertos/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 1032              		.loc 1 731 0
 1033 0006 85E0     		b	.L81
 1034              	.L96:
 732:../freertos/timers.c **** 	{
 733:../freertos/timers.c **** 		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
 734:../freertos/timers.c **** 		{
 735:../freertos/timers.c **** 			/* Negative commands are pended function calls rather than timer
 736:../freertos/timers.c **** 			commands. */
 737:../freertos/timers.c **** 			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 1035              		.loc 1 737 0
 1036 0008 3B1C     		mov	r3, r7
 1037 000a 0833     		add	r3, r3, #8
 1038 000c 1B68     		ldr	r3, [r3]
 1039 000e 002B     		cmp	r3, #0
 1040 0010 11DA     		bge	.L82
 1041              	.LBB2:
 738:../freertos/timers.c **** 			{
 739:../freertos/timers.c **** 				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 1042              		.loc 1 739 0
 1043 0012 3B1C     		mov	r3, r7
 1044 0014 0833     		add	r3, r3, #8
 1045 0016 0433     		add	r3, r3, #4
 1046 0018 7B62     		str	r3, [r7, #36]
 740:../freertos/timers.c **** 
 741:../freertos/timers.c **** 				/* The timer uses the xCallbackParameters member to request a
 742:../freertos/timers.c **** 				callback be executed.  Check the callback is not NULL. */
 743:../freertos/timers.c **** 				configASSERT( pxCallback );
 1047              		.loc 1 743 0
 1048 001a 7B6A     		ldr	r3, [r7, #36]
 1049 001c 002B     		cmp	r3, #0
 1050 001e 01D1     		bne	.L83
 1051              		.loc 1 743 0 is_stmt 0 discriminator 1
 1052              	@ 743 "../freertos/timers.c" 1
 1053 0020 72B6     		 cpsid i 
 1054              	@ 0 "" 2
 1055              		.code	16
 1056              	.L84:
 1057 0022 FEE7     		b	.L84
 1058              	.L83:
 744:../freertos/timers.c **** 
 745:../freertos/timers.c **** 				/* Call the function. */
 746:../freertos/timers.c **** 				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 1059              		.loc 1 746 0 is_stmt 1
 1060 0024 7B6A     		ldr	r3, [r7, #36]
 1061 0026 1A68     		ldr	r2, [r3]
 1062 0028 7B6A     		ldr	r3, [r7, #36]
 1063 002a 5968     		ldr	r1, [r3, #4]
 1064 002c 7B6A     		ldr	r3, [r7, #36]
 1065 002e 9B68     		ldr	r3, [r3, #8]
 1066 0030 081C     		mov	r0, r1
 1067 0032 191C     		mov	r1, r3
 1068 0034 9047     		blx	r2
 1069              	.L82:
 1070              	.LBE2:
 747:../freertos/timers.c **** 			}
 748:../freertos/timers.c **** 			else
 749:../freertos/timers.c **** 			{
 750:../freertos/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 751:../freertos/timers.c **** 			}
 752:../freertos/timers.c **** 		}
 753:../freertos/timers.c **** 		#endif /* INCLUDE_xTimerPendFunctionCall */
 754:../freertos/timers.c **** 
 755:../freertos/timers.c **** 		/* Commands that are positive are timer commands rather than pended
 756:../freertos/timers.c **** 		function calls. */
 757:../freertos/timers.c **** 		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 1071              		.loc 1 757 0
 1072 0036 3B1C     		mov	r3, r7
 1073 0038 0833     		add	r3, r3, #8
 1074 003a 1B68     		ldr	r3, [r3]
 1075 003c 002B     		cmp	r3, #0
 1076 003e 69DB     		blt	.L81
 758:../freertos/timers.c **** 		{
 759:../freertos/timers.c **** 			/* The messages uses the xTimerParameters member to work on a
 760:../freertos/timers.c **** 			software timer. */
 761:../freertos/timers.c **** 			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 1077              		.loc 1 761 0
 1078 0040 3B1C     		mov	r3, r7
 1079 0042 0833     		add	r3, r3, #8
 1080 0044 9B68     		ldr	r3, [r3, #8]
 1081 0046 3B62     		str	r3, [r7, #32]
 762:../freertos/timers.c **** 
 763:../freertos/timers.c **** 			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 1082              		.loc 1 763 0
 1083 0048 3B6A     		ldr	r3, [r7, #32]
 1084 004a 5B69     		ldr	r3, [r3, #20]
 1085 004c 002B     		cmp	r3, #0
 1086 004e 04D0     		beq	.L85
 764:../freertos/timers.c **** 			{
 765:../freertos/timers.c **** 				/* The timer is in a list, remove it. */
 766:../freertos/timers.c **** 				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1087              		.loc 1 766 0
 1088 0050 3B6A     		ldr	r3, [r7, #32]
 1089 0052 0433     		add	r3, r3, #4
 1090 0054 181C     		mov	r0, r3
 1091 0056 FFF7FEFF 		bl	uxListRemove
 1092              	.L85:
 767:../freertos/timers.c **** 			}
 768:../freertos/timers.c **** 			else
 769:../freertos/timers.c **** 			{
 770:../freertos/timers.c **** 				mtCOVERAGE_TEST_MARKER();
 771:../freertos/timers.c **** 			}
 772:../freertos/timers.c **** 
 773:../freertos/timers.c **** 			traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.u.xTimerParameters.xMessageV
 774:../freertos/timers.c **** 
 775:../freertos/timers.c **** 			/* In this case the xTimerListsWereSwitched parameter is not used, but
 776:../freertos/timers.c **** 			it must be present in the function call.  prvSampleTimeNow() must be
 777:../freertos/timers.c **** 			called after the message is received from xTimerQueue so there is no
 778:../freertos/timers.c **** 			possibility of a higher priority task adding a message to the message
 779:../freertos/timers.c **** 			queue with a time that is ahead of the timer daemon task (because it
 780:../freertos/timers.c **** 			pre-empted the timer daemon task after the xTimeNow value was set). */
 781:../freertos/timers.c **** 			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 1093              		.loc 1 781 0
 1094 005a 3B1D     		add	r3, r7, #4
 1095 005c 181C     		mov	r0, r3
 1096 005e FFF7FEFF 		bl	prvSampleTimeNow
 1097 0062 031C     		mov	r3, r0
 1098 0064 FB61     		str	r3, [r7, #28]
 782:../freertos/timers.c **** 
 783:../freertos/timers.c **** 			switch( xMessage.xMessageID )
 1099              		.loc 1 783 0
 1100 0066 3B1C     		mov	r3, r7
 1101 0068 0833     		add	r3, r3, #8
 1102 006a 1B68     		ldr	r3, [r3]
 1103 006c 092B     		cmp	r3, #9
 1104 006e 4ED8     		bhi	.L97
 1105 0070 9A00     		lsl	r2, r3, #2
 1106 0072 314B     		ldr	r3, .L99
 1107 0074 D318     		add	r3, r2, r3
 1108 0076 1B68     		ldr	r3, [r3]
 1109 0078 9F46     		mov	pc, r3
 1110              		.section	.rodata.prvProcessReceivedCommands,"a",%progbits
 1111              		.align	2
 1112              	.L88:
 1113 0000 7A000000 		.word	.L87
 1114 0004 7A000000 		.word	.L87
 1115 0008 7A000000 		.word	.L87
 1116 000c 12010000 		.word	.L98
 1117 0010 DA000000 		.word	.L90
 1118 0014 04010000 		.word	.L91
 1119 0018 7A000000 		.word	.L87
 1120 001c 7A000000 		.word	.L87
 1121 0020 12010000 		.word	.L98
 1122 0024 DA000000 		.word	.L90
 1123              		.section	.text.prvProcessReceivedCommands
 1124              	.L87:
 784:../freertos/timers.c **** 			{
 785:../freertos/timers.c **** 				case tmrCOMMAND_START :
 786:../freertos/timers.c **** 			    case tmrCOMMAND_START_FROM_ISR :
 787:../freertos/timers.c **** 			    case tmrCOMMAND_RESET :
 788:../freertos/timers.c **** 			    case tmrCOMMAND_RESET_FROM_ISR :
 789:../freertos/timers.c **** 				case tmrCOMMAND_START_DONT_TRACE :
 790:../freertos/timers.c **** 					/* Start or restart a timer. */
 791:../freertos/timers.c **** 					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer-
 1125              		.loc 1 791 0
 1126 007a 3B1C     		mov	r3, r7
 1127 007c 0833     		add	r3, r3, #8
 1128 007e 5A68     		ldr	r2, [r3, #4]
 1129 0080 3B6A     		ldr	r3, [r7, #32]
 1130 0082 9B69     		ldr	r3, [r3, #24]
 1131 0084 D118     		add	r1, r2, r3
 1132 0086 3B1C     		mov	r3, r7
 1133 0088 0833     		add	r3, r3, #8
 1134 008a 5B68     		ldr	r3, [r3, #4]
 1135 008c 386A     		ldr	r0, [r7, #32]
 1136 008e FA69     		ldr	r2, [r7, #28]
 1137 0090 FFF7FEFF 		bl	prvInsertTimerInActiveList
 1138 0094 031C     		mov	r3, r0
 1139 0096 002B     		cmp	r3, #0
 1140 0098 1ED0     		beq	.L92
 792:../freertos/timers.c **** 					{
 793:../freertos/timers.c **** 						/* The timer expired before it was added to the active
 794:../freertos/timers.c **** 						timer list.  Process it now. */
 795:../freertos/timers.c **** 						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1141              		.loc 1 795 0
 1142 009a 3B6A     		ldr	r3, [r7, #32]
 1143 009c 5B6A     		ldr	r3, [r3, #36]
 1144 009e 3A6A     		ldr	r2, [r7, #32]
 1145 00a0 101C     		mov	r0, r2
 1146 00a2 9847     		blx	r3
 796:../freertos/timers.c **** 						traceTIMER_EXPIRED( pxTimer );
 797:../freertos/timers.c **** 
 798:../freertos/timers.c **** 						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 1147              		.loc 1 798 0
 1148 00a4 3B6A     		ldr	r3, [r7, #32]
 1149 00a6 DB69     		ldr	r3, [r3, #28]
 1150 00a8 012B     		cmp	r3, #1
 1151 00aa 15D1     		bne	.L92
 799:../freertos/timers.c **** 						{
 800:../freertos/timers.c **** 							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParam
 1152              		.loc 1 800 0
 1153 00ac 3B1C     		mov	r3, r7
 1154 00ae 0833     		add	r3, r3, #8
 1155 00b0 5A68     		ldr	r2, [r3, #4]
 1156 00b2 3B6A     		ldr	r3, [r7, #32]
 1157 00b4 9B69     		ldr	r3, [r3, #24]
 1158 00b6 D318     		add	r3, r2, r3
 1159 00b8 3A6A     		ldr	r2, [r7, #32]
 1160 00ba 0021     		mov	r1, #0
 1161 00bc 0091     		str	r1, [sp]
 1162 00be 101C     		mov	r0, r2
 1163 00c0 0021     		mov	r1, #0
 1164 00c2 1A1C     		mov	r2, r3
 1165 00c4 0023     		mov	r3, #0
 1166 00c6 FFF7FEFF 		bl	xTimerGenericCommand
 1167 00ca 031C     		mov	r3, r0
 1168 00cc BB61     		str	r3, [r7, #24]
 801:../freertos/timers.c **** 							configASSERT( xResult );
 1169              		.loc 1 801 0
 1170 00ce BB69     		ldr	r3, [r7, #24]
 1171 00d0 002B     		cmp	r3, #0
 1172 00d2 01D1     		bne	.L92
 1173              		.loc 1 801 0 is_stmt 0 discriminator 1
 1174              	@ 801 "../freertos/timers.c" 1
 1175 00d4 72B6     		 cpsid i 
 1176              	@ 0 "" 2
 1177              		.code	16
 1178              	.L93:
 1179 00d6 FEE7     		b	.L93
 1180              	.L92:
 802:../freertos/timers.c **** 							( void ) xResult;
 803:../freertos/timers.c **** 						}
 804:../freertos/timers.c **** 						else
 805:../freertos/timers.c **** 						{
 806:../freertos/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 807:../freertos/timers.c **** 						}
 808:../freertos/timers.c **** 					}
 809:../freertos/timers.c **** 					else
 810:../freertos/timers.c **** 					{
 811:../freertos/timers.c **** 						mtCOVERAGE_TEST_MARKER();
 812:../freertos/timers.c **** 					}
 813:../freertos/timers.c **** 					break;
 1181              		.loc 1 813 0 is_stmt 1
 1182 00d8 1CE0     		b	.L81
 1183              	.L90:
 814:../freertos/timers.c **** 
 815:../freertos/timers.c **** 				case tmrCOMMAND_STOP :
 816:../freertos/timers.c **** 				case tmrCOMMAND_STOP_FROM_ISR :
 817:../freertos/timers.c **** 					/* The timer has already been removed from the active list.
 818:../freertos/timers.c **** 					There is nothing to do here. */
 819:../freertos/timers.c **** 					break;
 820:../freertos/timers.c **** 
 821:../freertos/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD :
 822:../freertos/timers.c **** 				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
 823:../freertos/timers.c **** 					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 1184              		.loc 1 823 0
 1185 00da 3B1C     		mov	r3, r7
 1186 00dc 0833     		add	r3, r3, #8
 1187 00de 5A68     		ldr	r2, [r3, #4]
 1188 00e0 3B6A     		ldr	r3, [r7, #32]
 1189 00e2 9A61     		str	r2, [r3, #24]
 824:../freertos/timers.c **** 					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 1190              		.loc 1 824 0
 1191 00e4 3B6A     		ldr	r3, [r7, #32]
 1192 00e6 9B69     		ldr	r3, [r3, #24]
 1193 00e8 002B     		cmp	r3, #0
 1194 00ea 01D1     		bne	.L94
 1195              		.loc 1 824 0 is_stmt 0 discriminator 1
 1196              	@ 824 "../freertos/timers.c" 1
 1197 00ec 72B6     		 cpsid i 
 1198              	@ 0 "" 2
 1199              		.code	16
 1200              	.L95:
 1201 00ee FEE7     		b	.L95
 1202              	.L94:
 825:../freertos/timers.c **** 
 826:../freertos/timers.c **** 					/* The new period does not really have a reference, and can
 827:../freertos/timers.c **** 					be longer or shorter than the old one.  The command time is
 828:../freertos/timers.c **** 					therefore set to the current time, and as the period cannot
 829:../freertos/timers.c **** 					be zero the next expiry time can only be in the future,
 830:../freertos/timers.c **** 					meaning (unlike for the xTimerStart() case above) there is
 831:../freertos/timers.c **** 					no fail case that needs to be handled here. */
 832:../freertos/timers.c **** 					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTi
 1203              		.loc 1 832 0 is_stmt 1
 1204 00f0 3B6A     		ldr	r3, [r7, #32]
 1205 00f2 9A69     		ldr	r2, [r3, #24]
 1206 00f4 FB69     		ldr	r3, [r7, #28]
 1207 00f6 D118     		add	r1, r2, r3
 1208 00f8 386A     		ldr	r0, [r7, #32]
 1209 00fa FA69     		ldr	r2, [r7, #28]
 1210 00fc FB69     		ldr	r3, [r7, #28]
 1211 00fe FFF7FEFF 		bl	prvInsertTimerInActiveList
 833:../freertos/timers.c **** 					break;
 1212              		.loc 1 833 0
 1213 0102 07E0     		b	.L81
 1214              	.L91:
 834:../freertos/timers.c **** 
 835:../freertos/timers.c **** 				case tmrCOMMAND_DELETE :
 836:../freertos/timers.c **** 					/* The timer has already been removed from the active list,
 837:../freertos/timers.c **** 					just free up the memory if the memory was dynamically
 838:../freertos/timers.c **** 					allocated. */
 839:../freertos/timers.c **** 					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
 840:../freertos/timers.c **** 					{
 841:../freertos/timers.c **** 						/* The timer can only have been allocated dynamically -
 842:../freertos/timers.c **** 						free it again. */
 843:../freertos/timers.c **** 						vPortFree( pxTimer );
 1215              		.loc 1 843 0
 1216 0104 3B6A     		ldr	r3, [r7, #32]
 1217 0106 181C     		mov	r0, r3
 1218 0108 FFF7FEFF 		bl	vPortFree
 844:../freertos/timers.c **** 					}
 845:../freertos/timers.c **** 					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 846:../freertos/timers.c **** 					{
 847:../freertos/timers.c **** 						/* The timer could have been allocated statically or
 848:../freertos/timers.c **** 						dynamically, so check before attempting to free the
 849:../freertos/timers.c **** 						memory. */
 850:../freertos/timers.c **** 						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 851:../freertos/timers.c **** 						{
 852:../freertos/timers.c **** 							vPortFree( pxTimer );
 853:../freertos/timers.c **** 						}
 854:../freertos/timers.c **** 						else
 855:../freertos/timers.c **** 						{
 856:../freertos/timers.c **** 							mtCOVERAGE_TEST_MARKER();
 857:../freertos/timers.c **** 						}
 858:../freertos/timers.c **** 					}
 859:../freertos/timers.c **** 					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 860:../freertos/timers.c **** 					break;
 1219              		.loc 1 860 0
 1220 010c 02E0     		b	.L81
 1221              	.L97:
 861:../freertos/timers.c **** 
 862:../freertos/timers.c **** 				default	:
 863:../freertos/timers.c **** 					/* Don't expect to get here. */
 864:../freertos/timers.c **** 					break;
 1222              		.loc 1 864 0
 1223 010e C046     		mov	r8, r8
 1224 0110 00E0     		b	.L81
 1225              	.L98:
 819:../freertos/timers.c **** 					break;
 1226              		.loc 1 819 0
 1227 0112 C046     		mov	r8, r8
 1228              	.L81:
 731:../freertos/timers.c **** 	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does
 1229              		.loc 1 731 0 discriminator 1
 1230 0114 094B     		ldr	r3, .L99+4
 1231 0116 1A68     		ldr	r2, [r3]
 1232 0118 3B1C     		mov	r3, r7
 1233 011a 0833     		add	r3, r3, #8
 1234 011c 101C     		mov	r0, r2
 1235 011e 191C     		mov	r1, r3
 1236 0120 0022     		mov	r2, #0
 1237 0122 0023     		mov	r3, #0
 1238 0124 FFF7FEFF 		bl	xQueueGenericReceive
 1239 0128 031C     		mov	r3, r0
 1240 012a 002B     		cmp	r3, #0
 1241 012c 00D0     		beq	.LCB1046
 1242 012e 6BE7     		b	.L96	@long jump
 1243              	.LCB1046:
 865:../freertos/timers.c **** 			}
 866:../freertos/timers.c **** 		}
 867:../freertos/timers.c **** 	}
 868:../freertos/timers.c **** }
 1244              		.loc 1 868 0
 1245 0130 BD46     		mov	sp, r7
 1246 0132 0AB0     		add	sp, sp, #40
 1247              		@ sp needed
 1248 0134 80BD     		pop	{r7, pc}
 1249              	.L100:
 1250 0136 C046     		.align	2
 1251              	.L99:
 1252 0138 00000000 		.word	.L88
 1253 013c 00000000 		.word	xTimerQueue
 1254              		.cfi_endproc
 1255              	.LFE14:
 1257              		.section	.text.prvSwitchTimerLists,"ax",%progbits
 1258              		.align	2
 1259              		.code	16
 1260              		.thumb_func
 1262              	prvSwitchTimerLists:
 1263              	.LFB15:
 869:../freertos/timers.c **** /*-----------------------------------------------------------*/
 870:../freertos/timers.c **** 
 871:../freertos/timers.c **** static void prvSwitchTimerLists( void )
 872:../freertos/timers.c **** {
 1264              		.loc 1 872 0
 1265              		.cfi_startproc
 1266 0000 80B5     		push	{r7, lr}
 1267              		.cfi_def_cfa_offset 8
 1268              		.cfi_offset 7, -8
 1269              		.cfi_offset 14, -4
 1270 0002 88B0     		sub	sp, sp, #32
 1271              		.cfi_def_cfa_offset 40
 1272 0004 02AF     		add	r7, sp, #8
 1273              		.cfi_def_cfa 7, 32
 873:../freertos/timers.c **** TickType_t xNextExpireTime, xReloadTime;
 874:../freertos/timers.c **** List_t *pxTemp;
 875:../freertos/timers.c **** Timer_t *pxTimer;
 876:../freertos/timers.c **** BaseType_t xResult;
 877:../freertos/timers.c **** 
 878:../freertos/timers.c **** 	/* The tick count has overflowed.  The timer lists must be switched.
 879:../freertos/timers.c **** 	If there are any timers still referenced from the current timer list
 880:../freertos/timers.c **** 	then they must have expired and should be processed before the lists
 881:../freertos/timers.c **** 	are switched. */
 882:../freertos/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 1274              		.loc 1 882 0
 1275 0006 40E0     		b	.L102
 1276              	.L105:
 883:../freertos/timers.c **** 	{
 884:../freertos/timers.c **** 		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 1277              		.loc 1 884 0
 1278 0008 294B     		ldr	r3, .L106
 1279 000a 1B68     		ldr	r3, [r3]
 1280 000c DB68     		ldr	r3, [r3, #12]
 1281 000e 1B68     		ldr	r3, [r3]
 1282 0010 7B61     		str	r3, [r7, #20]
 885:../freertos/timers.c **** 
 886:../freertos/timers.c **** 		/* Remove the timer from the list. */
 887:../freertos/timers.c **** 		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 1283              		.loc 1 887 0
 1284 0012 274B     		ldr	r3, .L106
 1285 0014 1B68     		ldr	r3, [r3]
 1286 0016 DB68     		ldr	r3, [r3, #12]
 1287 0018 DB68     		ldr	r3, [r3, #12]
 1288 001a 3B61     		str	r3, [r7, #16]
 888:../freertos/timers.c **** 		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 1289              		.loc 1 888 0
 1290 001c 3B69     		ldr	r3, [r7, #16]
 1291 001e 0433     		add	r3, r3, #4
 1292 0020 181C     		mov	r0, r3
 1293 0022 FFF7FEFF 		bl	uxListRemove
 889:../freertos/timers.c **** 		traceTIMER_EXPIRED( pxTimer );
 890:../freertos/timers.c **** 
 891:../freertos/timers.c **** 		/* Execute its callback, then send a command to restart the timer if
 892:../freertos/timers.c **** 		it is an auto-reload timer.  It cannot be restarted here as the lists
 893:../freertos/timers.c **** 		have not yet been switched. */
 894:../freertos/timers.c **** 		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 1294              		.loc 1 894 0
 1295 0026 3B69     		ldr	r3, [r7, #16]
 1296 0028 5B6A     		ldr	r3, [r3, #36]
 1297 002a 3A69     		ldr	r2, [r7, #16]
 1298 002c 101C     		mov	r0, r2
 1299 002e 9847     		blx	r3
 895:../freertos/timers.c **** 
 896:../freertos/timers.c **** 		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 1300              		.loc 1 896 0
 1301 0030 3B69     		ldr	r3, [r7, #16]
 1302 0032 DB69     		ldr	r3, [r3, #28]
 1303 0034 012B     		cmp	r3, #1
 1304 0036 28D1     		bne	.L102
 897:../freertos/timers.c **** 		{
 898:../freertos/timers.c **** 			/* Calculate the reload value, and if the reload value results in
 899:../freertos/timers.c **** 			the timer going into the same timer list then it has already expired
 900:../freertos/timers.c **** 			and the timer should be re-inserted into the current list so it is
 901:../freertos/timers.c **** 			processed again within this loop.  Otherwise a command should be sent
 902:../freertos/timers.c **** 			to restart the timer to ensure it is only inserted into a list after
 903:../freertos/timers.c **** 			the lists have been swapped. */
 904:../freertos/timers.c **** 			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 1305              		.loc 1 904 0
 1306 0038 3B69     		ldr	r3, [r7, #16]
 1307 003a 9A69     		ldr	r2, [r3, #24]
 1308 003c 7B69     		ldr	r3, [r7, #20]
 1309 003e D318     		add	r3, r2, r3
 1310 0040 FB60     		str	r3, [r7, #12]
 905:../freertos/timers.c **** 			if( xReloadTime > xNextExpireTime )
 1311              		.loc 1 905 0
 1312 0042 FA68     		ldr	r2, [r7, #12]
 1313 0044 7B69     		ldr	r3, [r7, #20]
 1314 0046 9A42     		cmp	r2, r3
 1315 0048 0ED9     		bls	.L103
 906:../freertos/timers.c **** 			{
 907:../freertos/timers.c **** 				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 1316              		.loc 1 907 0
 1317 004a 3B69     		ldr	r3, [r7, #16]
 1318 004c FA68     		ldr	r2, [r7, #12]
 1319 004e 5A60     		str	r2, [r3, #4]
 908:../freertos/timers.c **** 				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 1320              		.loc 1 908 0
 1321 0050 3B69     		ldr	r3, [r7, #16]
 1322 0052 3A69     		ldr	r2, [r7, #16]
 1323 0054 1A61     		str	r2, [r3, #16]
 909:../freertos/timers.c **** 				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 1324              		.loc 1 909 0
 1325 0056 164B     		ldr	r3, .L106
 1326 0058 1A68     		ldr	r2, [r3]
 1327 005a 3B69     		ldr	r3, [r7, #16]
 1328 005c 0433     		add	r3, r3, #4
 1329 005e 101C     		mov	r0, r2
 1330 0060 191C     		mov	r1, r3
 1331 0062 FFF7FEFF 		bl	vListInsert
 1332 0066 10E0     		b	.L102
 1333              	.L103:
 910:../freertos/timers.c **** 			}
 911:../freertos/timers.c **** 			else
 912:../freertos/timers.c **** 			{
 913:../freertos/timers.c **** 				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tm
 1334              		.loc 1 913 0
 1335 0068 3A69     		ldr	r2, [r7, #16]
 1336 006a 7B69     		ldr	r3, [r7, #20]
 1337 006c 0021     		mov	r1, #0
 1338 006e 0091     		str	r1, [sp]
 1339 0070 101C     		mov	r0, r2
 1340 0072 0021     		mov	r1, #0
 1341 0074 1A1C     		mov	r2, r3
 1342 0076 0023     		mov	r3, #0
 1343 0078 FFF7FEFF 		bl	xTimerGenericCommand
 1344 007c 031C     		mov	r3, r0
 1345 007e BB60     		str	r3, [r7, #8]
 914:../freertos/timers.c **** 				configASSERT( xResult );
 1346              		.loc 1 914 0
 1347 0080 BB68     		ldr	r3, [r7, #8]
 1348 0082 002B     		cmp	r3, #0
 1349 0084 01D1     		bne	.L102
 1350              		.loc 1 914 0 is_stmt 0 discriminator 1
 1351              	@ 914 "../freertos/timers.c" 1
 1352 0086 72B6     		 cpsid i 
 1353              	@ 0 "" 2
 1354              		.code	16
 1355              	.L104:
 1356 0088 FEE7     		b	.L104
 1357              	.L102:
 882:../freertos/timers.c **** 	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 1358              		.loc 1 882 0 is_stmt 1 discriminator 1
 1359 008a 094B     		ldr	r3, .L106
 1360 008c 1B68     		ldr	r3, [r3]
 1361 008e 1B68     		ldr	r3, [r3]
 1362 0090 002B     		cmp	r3, #0
 1363 0092 B9D1     		bne	.L105
 915:../freertos/timers.c **** 				( void ) xResult;
 916:../freertos/timers.c **** 			}
 917:../freertos/timers.c **** 		}
 918:../freertos/timers.c **** 		else
 919:../freertos/timers.c **** 		{
 920:../freertos/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 921:../freertos/timers.c **** 		}
 922:../freertos/timers.c **** 	}
 923:../freertos/timers.c **** 
 924:../freertos/timers.c **** 	pxTemp = pxCurrentTimerList;
 1364              		.loc 1 924 0
 1365 0094 064B     		ldr	r3, .L106
 1366 0096 1B68     		ldr	r3, [r3]
 1367 0098 7B60     		str	r3, [r7, #4]
 925:../freertos/timers.c **** 	pxCurrentTimerList = pxOverflowTimerList;
 1368              		.loc 1 925 0
 1369 009a 064B     		ldr	r3, .L106+4
 1370 009c 1A68     		ldr	r2, [r3]
 1371 009e 044B     		ldr	r3, .L106
 1372 00a0 1A60     		str	r2, [r3]
 926:../freertos/timers.c **** 	pxOverflowTimerList = pxTemp;
 1373              		.loc 1 926 0
 1374 00a2 044B     		ldr	r3, .L106+4
 1375 00a4 7A68     		ldr	r2, [r7, #4]
 1376 00a6 1A60     		str	r2, [r3]
 927:../freertos/timers.c **** }
 1377              		.loc 1 927 0
 1378 00a8 BD46     		mov	sp, r7
 1379 00aa 06B0     		add	sp, sp, #24
 1380              		@ sp needed
 1381 00ac 80BD     		pop	{r7, pc}
 1382              	.L107:
 1383 00ae C046     		.align	2
 1384              	.L106:
 1385 00b0 00000000 		.word	pxCurrentTimerList
 1386 00b4 00000000 		.word	pxOverflowTimerList
 1387              		.cfi_endproc
 1388              	.LFE15:
 1390              		.section	.rodata
 1391              		.align	2
 1392              	.LC23:
 1393 0008 546D7251 		.ascii	"TmrQ\000"
 1393      00
 1394 000d 000000   		.section	.text.prvCheckForValidListAndQueue,"ax",%progbits
 1395              		.align	2
 1396              		.code	16
 1397              		.thumb_func
 1399              	prvCheckForValidListAndQueue:
 1400              	.LFB16:
 928:../freertos/timers.c **** /*-----------------------------------------------------------*/
 929:../freertos/timers.c **** 
 930:../freertos/timers.c **** static void prvCheckForValidListAndQueue( void )
 931:../freertos/timers.c **** {
 1401              		.loc 1 931 0
 1402              		.cfi_startproc
 1403 0000 80B5     		push	{r7, lr}
 1404              		.cfi_def_cfa_offset 8
 1405              		.cfi_offset 7, -8
 1406              		.cfi_offset 14, -4
 1407 0002 00AF     		add	r7, sp, #0
 1408              		.cfi_def_cfa_register 7
 932:../freertos/timers.c **** 	/* Check that the list from which active timers are referenced, and the
 933:../freertos/timers.c **** 	queue used to communicate with the timer service, have been
 934:../freertos/timers.c **** 	initialised. */
 935:../freertos/timers.c **** 	taskENTER_CRITICAL();
 1409              		.loc 1 935 0
 1410 0004 FFF7FEFF 		bl	vPortEnterCritical
 936:../freertos/timers.c **** 	{
 937:../freertos/timers.c **** 		if( xTimerQueue == NULL )
 1411              		.loc 1 937 0
 1412 0008 144B     		ldr	r3, .L110
 1413 000a 1B68     		ldr	r3, [r3]
 1414 000c 002B     		cmp	r3, #0
 1415 000e 20D1     		bne	.L109
 938:../freertos/timers.c **** 		{
 939:../freertos/timers.c **** 			vListInitialise( &xActiveTimerList1 );
 1416              		.loc 1 939 0
 1417 0010 134B     		ldr	r3, .L110+4
 1418 0012 181C     		mov	r0, r3
 1419 0014 FFF7FEFF 		bl	vListInitialise
 940:../freertos/timers.c **** 			vListInitialise( &xActiveTimerList2 );
 1420              		.loc 1 940 0
 1421 0018 124B     		ldr	r3, .L110+8
 1422 001a 181C     		mov	r0, r3
 1423 001c FFF7FEFF 		bl	vListInitialise
 941:../freertos/timers.c **** 			pxCurrentTimerList = &xActiveTimerList1;
 1424              		.loc 1 941 0
 1425 0020 114B     		ldr	r3, .L110+12
 1426 0022 0F4A     		ldr	r2, .L110+4
 1427 0024 1A60     		str	r2, [r3]
 942:../freertos/timers.c **** 			pxOverflowTimerList = &xActiveTimerList2;
 1428              		.loc 1 942 0
 1429 0026 114B     		ldr	r3, .L110+16
 1430 0028 0E4A     		ldr	r2, .L110+8
 1431 002a 1A60     		str	r2, [r3]
 943:../freertos/timers.c **** 
 944:../freertos/timers.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 945:../freertos/timers.c **** 			{
 946:../freertos/timers.c **** 				/* The timer queue is allocated statically in case
 947:../freertos/timers.c **** 				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
 948:../freertos/timers.c **** 				static StaticQueue_t xStaticTimerQueue;
 949:../freertos/timers.c **** 				static uint8_t ucStaticTimerQueueStorage[ configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_
 950:../freertos/timers.c **** 
 951:../freertos/timers.c **** 				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskM
 952:../freertos/timers.c **** 			}
 953:../freertos/timers.c **** 			#else
 954:../freertos/timers.c **** 			{
 955:../freertos/timers.c **** 				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage
 1432              		.loc 1 955 0
 1433 002c 0A20     		mov	r0, #10
 1434 002e 1021     		mov	r1, #16
 1435 0030 0022     		mov	r2, #0
 1436 0032 FFF7FEFF 		bl	xQueueGenericCreate
 1437 0036 021C     		mov	r2, r0
 1438 0038 084B     		ldr	r3, .L110
 1439 003a 1A60     		str	r2, [r3]
 956:../freertos/timers.c **** 			}
 957:../freertos/timers.c **** 			#endif
 958:../freertos/timers.c **** 
 959:../freertos/timers.c **** 			#if ( configQUEUE_REGISTRY_SIZE > 0 )
 960:../freertos/timers.c **** 			{
 961:../freertos/timers.c **** 				if( xTimerQueue != NULL )
 1440              		.loc 1 961 0
 1441 003c 074B     		ldr	r3, .L110
 1442 003e 1B68     		ldr	r3, [r3]
 1443 0040 002B     		cmp	r3, #0
 1444 0042 06D0     		beq	.L109
 962:../freertos/timers.c **** 				{
 963:../freertos/timers.c **** 					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 1445              		.loc 1 963 0
 1446 0044 054B     		ldr	r3, .L110
 1447 0046 1A68     		ldr	r2, [r3]
 1448 0048 094B     		ldr	r3, .L110+20
 1449 004a 101C     		mov	r0, r2
 1450 004c 191C     		mov	r1, r3
 1451 004e FFF7FEFF 		bl	vQueueAddToRegistry
 1452              	.L109:
 964:../freertos/timers.c **** 				}
 965:../freertos/timers.c **** 				else
 966:../freertos/timers.c **** 				{
 967:../freertos/timers.c **** 					mtCOVERAGE_TEST_MARKER();
 968:../freertos/timers.c **** 				}
 969:../freertos/timers.c **** 			}
 970:../freertos/timers.c **** 			#endif /* configQUEUE_REGISTRY_SIZE */
 971:../freertos/timers.c **** 		}
 972:../freertos/timers.c **** 		else
 973:../freertos/timers.c **** 		{
 974:../freertos/timers.c **** 			mtCOVERAGE_TEST_MARKER();
 975:../freertos/timers.c **** 		}
 976:../freertos/timers.c **** 	}
 977:../freertos/timers.c **** 	taskEXIT_CRITICAL();
 1453              		.loc 1 977 0
 1454 0052 FFF7FEFF 		bl	vPortExitCritical
 978:../freertos/timers.c **** }
 1455              		.loc 1 978 0
 1456 0056 BD46     		mov	sp, r7
 1457              		@ sp needed
 1458 0058 80BD     		pop	{r7, pc}
 1459              	.L111:
 1460 005a C046     		.align	2
 1461              	.L110:
 1462 005c 00000000 		.word	xTimerQueue
 1463 0060 00000000 		.word	xActiveTimerList1
 1464 0064 00000000 		.word	xActiveTimerList2
 1465 0068 00000000 		.word	pxCurrentTimerList
 1466 006c 00000000 		.word	pxOverflowTimerList
 1467 0070 08000000 		.word	.LC23
 1468              		.cfi_endproc
 1469              	.LFE16:
 1471              		.section	.text.xTimerIsTimerActive,"ax",%progbits
 1472              		.align	2
 1473              		.global	xTimerIsTimerActive
 1474              		.code	16
 1475              		.thumb_func
 1477              	xTimerIsTimerActive:
 1478              	.LFB17:
 979:../freertos/timers.c **** /*-----------------------------------------------------------*/
 980:../freertos/timers.c **** 
 981:../freertos/timers.c **** BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
 982:../freertos/timers.c **** {
 1479              		.loc 1 982 0
 1480              		.cfi_startproc
 1481 0000 80B5     		push	{r7, lr}
 1482              		.cfi_def_cfa_offset 8
 1483              		.cfi_offset 7, -8
 1484              		.cfi_offset 14, -4
 1485 0002 84B0     		sub	sp, sp, #16
 1486              		.cfi_def_cfa_offset 24
 1487 0004 00AF     		add	r7, sp, #0
 1488              		.cfi_def_cfa_register 7
 1489 0006 7860     		str	r0, [r7, #4]
 983:../freertos/timers.c **** BaseType_t xTimerIsInActiveList;
 984:../freertos/timers.c **** Timer_t *pxTimer = ( Timer_t * ) xTimer;
 1490              		.loc 1 984 0
 1491 0008 7B68     		ldr	r3, [r7, #4]
 1492 000a FB60     		str	r3, [r7, #12]
 985:../freertos/timers.c **** 
 986:../freertos/timers.c **** 	configASSERT( xTimer );
 1493              		.loc 1 986 0
 1494 000c 7B68     		ldr	r3, [r7, #4]
 1495 000e 002B     		cmp	r3, #0
 1496 0010 01D1     		bne	.L113
 1497              		.loc 1 986 0 is_stmt 0 discriminator 1
 1498              	@ 986 "../freertos/timers.c" 1
 1499 0012 72B6     		 cpsid i 
 1500              	@ 0 "" 2
 1501              		.code	16
 1502              	.L114:
 1503 0014 FEE7     		b	.L114
 1504              	.L113:
 987:../freertos/timers.c **** 
 988:../freertos/timers.c **** 	/* Is the timer in the list of active timers? */
 989:../freertos/timers.c **** 	taskENTER_CRITICAL();
 1505              		.loc 1 989 0 is_stmt 1
 1506 0016 FFF7FEFF 		bl	vPortEnterCritical
 990:../freertos/timers.c **** 	{
 991:../freertos/timers.c **** 		/* Checking to see if it is in the NULL list in effect checks to see if
 992:../freertos/timers.c **** 		it is referenced from either the current or the overflow timer lists in
 993:../freertos/timers.c **** 		one go, but the logic has to be reversed, hence the '!'. */
 994:../freertos/timers.c **** 		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListIte
 1507              		.loc 1 994 0
 1508 001a FB68     		ldr	r3, [r7, #12]
 1509 001c 5B69     		ldr	r3, [r3, #20]
 1510 001e 5A1E     		sub	r2, r3, #1
 1511 0020 9341     		sbc	r3, r3, r2
 1512 0022 DBB2     		uxtb	r3, r3
 1513 0024 BB60     		str	r3, [r7, #8]
 995:../freertos/timers.c **** 	}
 996:../freertos/timers.c **** 	taskEXIT_CRITICAL();
 1514              		.loc 1 996 0
 1515 0026 FFF7FEFF 		bl	vPortExitCritical
 997:../freertos/timers.c **** 
 998:../freertos/timers.c **** 	return xTimerIsInActiveList;
 1516              		.loc 1 998 0
 1517 002a BB68     		ldr	r3, [r7, #8]
 999:../freertos/timers.c **** } /*lint !e818 Can't be pointer to const due to the typedef. */
 1518              		.loc 1 999 0
 1519 002c 181C     		mov	r0, r3
 1520 002e BD46     		mov	sp, r7
 1521 0030 04B0     		add	sp, sp, #16
 1522              		@ sp needed
 1523 0032 80BD     		pop	{r7, pc}
 1524              		.cfi_endproc
 1525              	.LFE17:
 1527              		.section	.text.pvTimerGetTimerID,"ax",%progbits
 1528              		.align	2
 1529              		.global	pvTimerGetTimerID
 1530              		.code	16
 1531              		.thumb_func
 1533              	pvTimerGetTimerID:
 1534              	.LFB18:
1000:../freertos/timers.c **** /*-----------------------------------------------------------*/
1001:../freertos/timers.c **** 
1002:../freertos/timers.c **** void *pvTimerGetTimerID( const TimerHandle_t xTimer )
1003:../freertos/timers.c **** {
 1535              		.loc 1 1003 0
 1536              		.cfi_startproc
 1537 0000 80B5     		push	{r7, lr}
 1538              		.cfi_def_cfa_offset 8
 1539              		.cfi_offset 7, -8
 1540              		.cfi_offset 14, -4
 1541 0002 84B0     		sub	sp, sp, #16
 1542              		.cfi_def_cfa_offset 24
 1543 0004 00AF     		add	r7, sp, #0
 1544              		.cfi_def_cfa_register 7
 1545 0006 7860     		str	r0, [r7, #4]
1004:../freertos/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1546              		.loc 1 1004 0
 1547 0008 7B68     		ldr	r3, [r7, #4]
 1548 000a FB60     		str	r3, [r7, #12]
1005:../freertos/timers.c **** void *pvReturn;
1006:../freertos/timers.c **** 
1007:../freertos/timers.c **** 	configASSERT( xTimer );
 1549              		.loc 1 1007 0
 1550 000c 7B68     		ldr	r3, [r7, #4]
 1551 000e 002B     		cmp	r3, #0
 1552 0010 01D1     		bne	.L117
 1553              		.loc 1 1007 0 is_stmt 0 discriminator 1
 1554              	@ 1007 "../freertos/timers.c" 1
 1555 0012 72B6     		 cpsid i 
 1556              	@ 0 "" 2
 1557              		.code	16
 1558              	.L118:
 1559 0014 FEE7     		b	.L118
 1560              	.L117:
1008:../freertos/timers.c **** 
1009:../freertos/timers.c **** 	taskENTER_CRITICAL();
 1561              		.loc 1 1009 0 is_stmt 1
 1562 0016 FFF7FEFF 		bl	vPortEnterCritical
1010:../freertos/timers.c **** 	{
1011:../freertos/timers.c **** 		pvReturn = pxTimer->pvTimerID;
 1563              		.loc 1 1011 0
 1564 001a FB68     		ldr	r3, [r7, #12]
 1565 001c 1B6A     		ldr	r3, [r3, #32]
 1566 001e BB60     		str	r3, [r7, #8]
1012:../freertos/timers.c **** 	}
1013:../freertos/timers.c **** 	taskEXIT_CRITICAL();
 1567              		.loc 1 1013 0
 1568 0020 FFF7FEFF 		bl	vPortExitCritical
1014:../freertos/timers.c **** 
1015:../freertos/timers.c **** 	return pvReturn;
 1569              		.loc 1 1015 0
 1570 0024 BB68     		ldr	r3, [r7, #8]
1016:../freertos/timers.c **** }
 1571              		.loc 1 1016 0
 1572 0026 181C     		mov	r0, r3
 1573 0028 BD46     		mov	sp, r7
 1574 002a 04B0     		add	sp, sp, #16
 1575              		@ sp needed
 1576 002c 80BD     		pop	{r7, pc}
 1577              		.cfi_endproc
 1578              	.LFE18:
 1580 002e C046     		.section	.text.vTimerSetTimerID,"ax",%progbits
 1581              		.align	2
 1582              		.global	vTimerSetTimerID
 1583              		.code	16
 1584              		.thumb_func
 1586              	vTimerSetTimerID:
 1587              	.LFB19:
1017:../freertos/timers.c **** /*-----------------------------------------------------------*/
1018:../freertos/timers.c **** 
1019:../freertos/timers.c **** void vTimerSetTimerID( TimerHandle_t xTimer, void *pvNewID )
1020:../freertos/timers.c **** {
 1588              		.loc 1 1020 0
 1589              		.cfi_startproc
 1590 0000 80B5     		push	{r7, lr}
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 7, -8
 1593              		.cfi_offset 14, -4
 1594 0002 84B0     		sub	sp, sp, #16
 1595              		.cfi_def_cfa_offset 24
 1596 0004 00AF     		add	r7, sp, #0
 1597              		.cfi_def_cfa_register 7
 1598 0006 7860     		str	r0, [r7, #4]
 1599 0008 3960     		str	r1, [r7]
1021:../freertos/timers.c **** Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 1600              		.loc 1 1021 0
 1601 000a 7B68     		ldr	r3, [r7, #4]
 1602 000c FB60     		str	r3, [r7, #12]
1022:../freertos/timers.c **** 
1023:../freertos/timers.c **** 	configASSERT( xTimer );
 1603              		.loc 1 1023 0
 1604 000e 7B68     		ldr	r3, [r7, #4]
 1605 0010 002B     		cmp	r3, #0
 1606 0012 01D1     		bne	.L121
 1607              		.loc 1 1023 0 is_stmt 0 discriminator 1
 1608              	@ 1023 "../freertos/timers.c" 1
 1609 0014 72B6     		 cpsid i 
 1610              	@ 0 "" 2
 1611              		.code	16
 1612              	.L122:
 1613 0016 FEE7     		b	.L122
 1614              	.L121:
1024:../freertos/timers.c **** 
1025:../freertos/timers.c **** 	taskENTER_CRITICAL();
 1615              		.loc 1 1025 0 is_stmt 1
 1616 0018 FFF7FEFF 		bl	vPortEnterCritical
1026:../freertos/timers.c **** 	{
1027:../freertos/timers.c **** 		pxTimer->pvTimerID = pvNewID;
 1617              		.loc 1 1027 0
 1618 001c FB68     		ldr	r3, [r7, #12]
 1619 001e 3A68     		ldr	r2, [r7]
 1620 0020 1A62     		str	r2, [r3, #32]
1028:../freertos/timers.c **** 	}
1029:../freertos/timers.c **** 	taskEXIT_CRITICAL();
 1621              		.loc 1 1029 0
 1622 0022 FFF7FEFF 		bl	vPortExitCritical
1030:../freertos/timers.c **** }
 1623              		.loc 1 1030 0
 1624 0026 BD46     		mov	sp, r7
 1625 0028 04B0     		add	sp, sp, #16
 1626              		@ sp needed
 1627 002a 80BD     		pop	{r7, pc}
 1628              		.cfi_endproc
 1629              	.LFE19:
 1631              		.section	.text.xTimerPendFunctionCallFromISR,"ax",%progbits
 1632              		.align	2
 1633              		.global	xTimerPendFunctionCallFromISR
 1634              		.code	16
 1635              		.thumb_func
 1637              	xTimerPendFunctionCallFromISR:
 1638              	.LFB20:
1031:../freertos/timers.c **** /*-----------------------------------------------------------*/
1032:../freertos/timers.c **** 
1033:../freertos/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1034:../freertos/timers.c **** 
1035:../freertos/timers.c **** 	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, ui
1036:../freertos/timers.c **** 	{
 1639              		.loc 1 1036 0
 1640              		.cfi_startproc
 1641 0000 80B5     		push	{r7, lr}
 1642              		.cfi_def_cfa_offset 8
 1643              		.cfi_offset 7, -8
 1644              		.cfi_offset 14, -4
 1645 0002 8AB0     		sub	sp, sp, #40
 1646              		.cfi_def_cfa_offset 48
 1647 0004 00AF     		add	r7, sp, #0
 1648              		.cfi_def_cfa_register 7
 1649 0006 F860     		str	r0, [r7, #12]
 1650 0008 B960     		str	r1, [r7, #8]
 1651 000a 7A60     		str	r2, [r7, #4]
 1652 000c 3B60     		str	r3, [r7]
1037:../freertos/timers.c **** 	DaemonTaskMessage_t xMessage;
1038:../freertos/timers.c **** 	BaseType_t xReturn;
1039:../freertos/timers.c **** 
1040:../freertos/timers.c **** 		/* Complete the message with the function parameters and post it to the
1041:../freertos/timers.c **** 		daemon task. */
1042:../freertos/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 1653              		.loc 1 1042 0
 1654 000e 3B1C     		mov	r3, r7
 1655 0010 1433     		add	r3, r3, #20
 1656 0012 0222     		mov	r2, #2
 1657 0014 5242     		neg	r2, r2
 1658 0016 1A60     		str	r2, [r3]
1043:../freertos/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1659              		.loc 1 1043 0
 1660 0018 3B1C     		mov	r3, r7
 1661 001a 1433     		add	r3, r3, #20
 1662 001c FA68     		ldr	r2, [r7, #12]
 1663 001e 5A60     		str	r2, [r3, #4]
1044:../freertos/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1664              		.loc 1 1044 0
 1665 0020 3B1C     		mov	r3, r7
 1666 0022 1433     		add	r3, r3, #20
 1667 0024 BA68     		ldr	r2, [r7, #8]
 1668 0026 9A60     		str	r2, [r3, #8]
1045:../freertos/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1669              		.loc 1 1045 0
 1670 0028 3B1C     		mov	r3, r7
 1671 002a 1433     		add	r3, r3, #20
 1672 002c 7A68     		ldr	r2, [r7, #4]
 1673 002e DA60     		str	r2, [r3, #12]
1046:../freertos/timers.c **** 
1047:../freertos/timers.c **** 		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 1674              		.loc 1 1047 0
 1675 0030 084B     		ldr	r3, .L125
 1676 0032 1968     		ldr	r1, [r3]
 1677 0034 3A1C     		mov	r2, r7
 1678 0036 1432     		add	r2, r2, #20
 1679 0038 3B68     		ldr	r3, [r7]
 1680 003a 081C     		mov	r0, r1
 1681 003c 111C     		mov	r1, r2
 1682 003e 1A1C     		mov	r2, r3
 1683 0040 0023     		mov	r3, #0
 1684 0042 FFF7FEFF 		bl	xQueueGenericSendFromISR
 1685 0046 031C     		mov	r3, r0
 1686 0048 7B62     		str	r3, [r7, #36]
1048:../freertos/timers.c **** 
1049:../freertos/timers.c **** 		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1050:../freertos/timers.c **** 
1051:../freertos/timers.c **** 		return xReturn;
 1687              		.loc 1 1051 0
 1688 004a 7B6A     		ldr	r3, [r7, #36]
1052:../freertos/timers.c **** 	}
 1689              		.loc 1 1052 0
 1690 004c 181C     		mov	r0, r3
 1691 004e BD46     		mov	sp, r7
 1692 0050 0AB0     		add	sp, sp, #40
 1693              		@ sp needed
 1694 0052 80BD     		pop	{r7, pc}
 1695              	.L126:
 1696              		.align	2
 1697              	.L125:
 1698 0054 00000000 		.word	xTimerQueue
 1699              		.cfi_endproc
 1700              	.LFE20:
 1702              		.section	.text.xTimerPendFunctionCall,"ax",%progbits
 1703              		.align	2
 1704              		.global	xTimerPendFunctionCall
 1705              		.code	16
 1706              		.thumb_func
 1708              	xTimerPendFunctionCall:
 1709              	.LFB21:
1053:../freertos/timers.c **** 
1054:../freertos/timers.c **** #endif /* INCLUDE_xTimerPendFunctionCall */
1055:../freertos/timers.c **** /*-----------------------------------------------------------*/
1056:../freertos/timers.c **** 
1057:../freertos/timers.c **** #if( INCLUDE_xTimerPendFunctionCall == 1 )
1058:../freertos/timers.c **** 
1059:../freertos/timers.c **** 	BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t 
1060:../freertos/timers.c **** 	{
 1710              		.loc 1 1060 0
 1711              		.cfi_startproc
 1712 0000 80B5     		push	{r7, lr}
 1713              		.cfi_def_cfa_offset 8
 1714              		.cfi_offset 7, -8
 1715              		.cfi_offset 14, -4
 1716 0002 8AB0     		sub	sp, sp, #40
 1717              		.cfi_def_cfa_offset 48
 1718 0004 00AF     		add	r7, sp, #0
 1719              		.cfi_def_cfa_register 7
 1720 0006 F860     		str	r0, [r7, #12]
 1721 0008 B960     		str	r1, [r7, #8]
 1722 000a 7A60     		str	r2, [r7, #4]
 1723 000c 3B60     		str	r3, [r7]
1061:../freertos/timers.c **** 	DaemonTaskMessage_t xMessage;
1062:../freertos/timers.c **** 	BaseType_t xReturn;
1063:../freertos/timers.c **** 
1064:../freertos/timers.c **** 		/* This function can only be called after a timer has been created or
1065:../freertos/timers.c **** 		after the scheduler has been started because, until then, the timer
1066:../freertos/timers.c **** 		queue does not exist. */
1067:../freertos/timers.c **** 		configASSERT( xTimerQueue );
 1724              		.loc 1 1067 0
 1725 000e 144B     		ldr	r3, .L131
 1726 0010 1B68     		ldr	r3, [r3]
 1727 0012 002B     		cmp	r3, #0
 1728 0014 01D1     		bne	.L128
 1729              		.loc 1 1067 0 is_stmt 0 discriminator 1
 1730              	@ 1067 "../freertos/timers.c" 1
 1731 0016 72B6     		 cpsid i 
 1732              	@ 0 "" 2
 1733              		.code	16
 1734              	.L129:
 1735 0018 FEE7     		b	.L129
 1736              	.L128:
1068:../freertos/timers.c **** 
1069:../freertos/timers.c **** 		/* Complete the message with the function parameters and post it to the
1070:../freertos/timers.c **** 		daemon task. */
1071:../freertos/timers.c **** 		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 1737              		.loc 1 1071 0 is_stmt 1
 1738 001a 3B1C     		mov	r3, r7
 1739 001c 1433     		add	r3, r3, #20
 1740 001e 0122     		mov	r2, #1
 1741 0020 5242     		neg	r2, r2
 1742 0022 1A60     		str	r2, [r3]
1072:../freertos/timers.c **** 		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 1743              		.loc 1 1072 0
 1744 0024 3B1C     		mov	r3, r7
 1745 0026 1433     		add	r3, r3, #20
 1746 0028 FA68     		ldr	r2, [r7, #12]
 1747 002a 5A60     		str	r2, [r3, #4]
1073:../freertos/timers.c **** 		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 1748              		.loc 1 1073 0
 1749 002c 3B1C     		mov	r3, r7
 1750 002e 1433     		add	r3, r3, #20
 1751 0030 BA68     		ldr	r2, [r7, #8]
 1752 0032 9A60     		str	r2, [r3, #8]
1074:../freertos/timers.c **** 		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 1753              		.loc 1 1074 0
 1754 0034 3B1C     		mov	r3, r7
 1755 0036 1433     		add	r3, r3, #20
 1756 0038 7A68     		ldr	r2, [r7, #4]
 1757 003a DA60     		str	r2, [r3, #12]
1075:../freertos/timers.c **** 
1076:../freertos/timers.c **** 		xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 1758              		.loc 1 1076 0
 1759 003c 084B     		ldr	r3, .L131
 1760 003e 1968     		ldr	r1, [r3]
 1761 0040 3A1C     		mov	r2, r7
 1762 0042 1432     		add	r2, r2, #20
 1763 0044 3B68     		ldr	r3, [r7]
 1764 0046 081C     		mov	r0, r1
 1765 0048 111C     		mov	r1, r2
 1766 004a 1A1C     		mov	r2, r3
 1767 004c 0023     		mov	r3, #0
 1768 004e FFF7FEFF 		bl	xQueueGenericSend
 1769 0052 031C     		mov	r3, r0
 1770 0054 7B62     		str	r3, [r7, #36]
1077:../freertos/timers.c **** 
1078:../freertos/timers.c **** 		tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );
1079:../freertos/timers.c **** 
1080:../freertos/timers.c **** 		return xReturn;
 1771              		.loc 1 1080 0
 1772 0056 7B6A     		ldr	r3, [r7, #36]
1081:../freertos/timers.c **** 	}
 1773              		.loc 1 1081 0
 1774 0058 181C     		mov	r0, r3
 1775 005a BD46     		mov	sp, r7
 1776 005c 0AB0     		add	sp, sp, #40
 1777              		@ sp needed
 1778 005e 80BD     		pop	{r7, pc}
 1779              	.L132:
 1780              		.align	2
 1781              	.L131:
 1782 0060 00000000 		.word	xTimerQueue
 1783              		.cfi_endproc
 1784              	.LFE21:
 1786              		.section	.bss.xLastTime.4960,"aw",%nobits
 1787              		.align	2
 1790              	xLastTime.4960:
 1791 0000 00000000 		.space	4
 1792              		.text
 1793              	.Letext0:
 1794              		.file 2 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 1795              		.file 3 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\stdint.h"
 1796              		.file 4 "../freertos/portmacro.h"
 1797              		.file 5 "../freertos/list.h"
 1798              		.file 6 "../freertos/task.h"
 1799              		.file 7 "../freertos/queue.h"
 1800              		.file 8 "../freertos/timers.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timers.c
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:18     .bss.xActiveTimerList1:00000000 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:21     .bss.xActiveTimerList1:00000000 xActiveTimerList1
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:24     .bss.xActiveTimerList2:00000000 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:27     .bss.xActiveTimerList2:00000000 xActiveTimerList2
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:30     .bss.pxCurrentTimerList:00000000 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:33     .bss.pxCurrentTimerList:00000000 pxCurrentTimerList
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:36     .bss.pxOverflowTimerList:00000000 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:39     .bss.pxOverflowTimerList:00000000 pxOverflowTimerList
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:42     .bss.xTimerQueue:00000000 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:45     .bss.xTimerQueue:00000000 xTimerQueue
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:48     .bss.xTimerTaskHandle:00000000 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:51     .bss.xTimerTaskHandle:00000000 xTimerTaskHandle
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:54     .rodata:00000000 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:58     .text.xTimerCreateTimerTask:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:63     .text.xTimerCreateTimerTask:00000000 xTimerCreateTimerTask
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1399   .text.prvCheckForValidListAndQueue:00000000 prvCheckForValidListAndQueue
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:124    .text.xTimerCreateTimerTask:00000048 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:661    .text.prvTimerTask:00000000 prvTimerTask
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:132    .text.xTimerCreate:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:137    .text.xTimerCreate:00000000 xTimerCreate
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:190    .text.prvInitialiseNewTimer:00000000 prvInitialiseNewTimer
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:186    .text.prvInitialiseNewTimer:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:259    .text.xTimerGenericCommand:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:264    .text.xTimerGenericCommand:00000000 xTimerGenericCommand
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:378    .text.xTimerGenericCommand:000000a8 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:383    .text.xTimerGetTimerDaemonTaskHandle:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:388    .text.xTimerGetTimerDaemonTaskHandle:00000000 xTimerGetTimerDaemonTaskHandle
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:422    .text.xTimerGetTimerDaemonTaskHandle:0000001c $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:427    .text.xTimerGetPeriod:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:432    .text.xTimerGetPeriod:00000000 xTimerGetPeriod
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:473    .text.xTimerGetExpiryTime:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:478    .text.xTimerGetExpiryTime:00000000 xTimerGetExpiryTime
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:522    .text.pcTimerGetName:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:527    .text.pcTimerGetName:00000000 pcTimerGetName
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:568    .text.prvProcessExpiredTimer:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:572    .text.prvProcessExpiredTimer:00000000 prvProcessExpiredTimer
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:920    .text.prvInsertTimerInActiveList:00000000 prvInsertTimerInActiveList
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:652    .text.prvProcessExpiredTimer:00000070 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:657    .text.prvTimerTask:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:800    .text.prvGetNextExpireTime:00000000 prvGetNextExpireTime
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:700    .text.prvProcessTimerOrBlockTask:00000000 prvProcessTimerOrBlockTask
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1020   .text.prvProcessReceivedCommands:00000000 prvProcessReceivedCommands
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:696    .text.prvProcessTimerOrBlockTask:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:860    .text.prvSampleTimeNow:00000000 prvSampleTimeNow
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:790    .text.prvProcessTimerOrBlockTask:00000088 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:796    .text.prvGetNextExpireTime:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:851    .text.prvGetNextExpireTime:0000003c $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:856    .text.prvSampleTimeNow:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1262   .text.prvSwitchTimerLists:00000000 prvSwitchTimerLists
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:911    .text.prvSampleTimeNow:0000003c $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1790   .bss.xLastTime.4960:00000000 xLastTime.4960
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:916    .text.prvInsertTimerInActiveList:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1010   .text.prvInsertTimerInActiveList:0000007c $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1016   .text.prvProcessReceivedCommands:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1111   .rodata.prvProcessReceivedCommands:00000000 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1252   .text.prvProcessReceivedCommands:00000138 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1258   .text.prvSwitchTimerLists:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1385   .text.prvSwitchTimerLists:000000b0 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1395   .text.prvCheckForValidListAndQueue:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1462   .text.prvCheckForValidListAndQueue:0000005c $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1472   .text.xTimerIsTimerActive:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1477   .text.xTimerIsTimerActive:00000000 xTimerIsTimerActive
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1528   .text.pvTimerGetTimerID:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1533   .text.pvTimerGetTimerID:00000000 pvTimerGetTimerID
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1581   .text.vTimerSetTimerID:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1586   .text.vTimerSetTimerID:00000000 vTimerSetTimerID
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1632   .text.xTimerPendFunctionCallFromISR:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1637   .text.xTimerPendFunctionCallFromISR:00000000 xTimerPendFunctionCallFromISR
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1698   .text.xTimerPendFunctionCallFromISR:00000054 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1703   .text.xTimerPendFunctionCall:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1708   .text.xTimerPendFunctionCall:00000000 xTimerPendFunctionCall
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1782   .text.xTimerPendFunctionCall:00000060 $d
C:\Users\mathe\AppData\Local\Temp\cczAIyv3.s:1787   .bss.xLastTime.4960:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.e19fef13b9966be9a9a0df56dde4c190
                           .group:00000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4._default_types.h.6.9e4229723f5523536bc8f574589d6a99
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.stdlib.h.53.a73f7e963d962393b7f9086194931e4a
                           .group:00000000 wm4.stdint.h.10.d0f8e374834fcfc2e296d5d5fe82f02a
                           .group:00000000 wm4.FreeRTOSConfig.h.71.9ce5dd93bb084cb2714008d9030c087d
                           .group:00000000 wm4.projdefs.h.71.6ed2b4e07820ea275c61d78138cfae10
                           .group:00000000 wm4.portmacro.h.72.32efb3512b0394b29d8211ba7ab279d9
                           .group:00000000 wm4.portable.h.106.61ffdda1afafb5a5e1f7197ade95b43a
                           .group:00000000 wm4.mpu_wrappers.h.71.c0872672d360e197b5a999335351843d
                           .group:00000000 wm4.FreeRTOS.h.186.2e14eee2d995e9702d028b4adcebc296
                           .group:00000000 wm4.list.h.103.6a12b7b9a7a136c3cca0ee53675c5498
                           .group:00000000 wm4.task.h.88.c21feabc7be8ca1396f9c7c7a7eaee9b
                           .group:00000000 wm4.queue.h.72.09c862d5018c52fa79f0d83a3dbbfe84
                           .group:00000000 wm4.timers.h.72.0dcea34c14180ef23637dc91dfd6a310

UNDEFINED SYMBOLS
xTaskCreate
pvPortMalloc
vListInitialiseItem
xTaskGetSchedulerState
xQueueGenericSend
xQueueGenericSendFromISR
uxListRemove
vTaskSuspendAll
xTaskResumeAll
vQueueWaitForMessageRestricted
vPortYield
xTaskGetTickCount
vListInsert
vPortFree
xQueueGenericReceive
vPortEnterCritical
vListInitialise
xQueueGenericCreate
vQueueAddToRegistry
vPortExitCritical
