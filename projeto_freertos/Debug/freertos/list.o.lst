   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"list.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.vListInitialise,"ax",%progbits
  18              		.align	2
  19              		.global	vListInitialise
  20              		.code	16
  21              		.thumb_func
  23              	vListInitialise:
  24              	.LFB0:
  25              		.file 1 "../freertos/list.c"
   1:../freertos/list.c **** /*
   2:../freertos/list.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:../freertos/list.c ****     All rights reserved
   4:../freertos/list.c **** 
   5:../freertos/list.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:../freertos/list.c **** 
   7:../freertos/list.c ****     This file is part of the FreeRTOS distribution.
   8:../freertos/list.c **** 
   9:../freertos/list.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:../freertos/list.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:../freertos/list.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:../freertos/list.c **** 
  13:../freertos/list.c ****     ***************************************************************************
  14:../freertos/list.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:../freertos/list.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:../freertos/list.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:../freertos/list.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:../freertos/list.c ****     ***************************************************************************
  19:../freertos/list.c **** 
  20:../freertos/list.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:../freertos/list.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:../freertos/list.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:../freertos/list.c ****     link: http://www.freertos.org/a00114.html
  24:../freertos/list.c **** 
  25:../freertos/list.c ****     ***************************************************************************
  26:../freertos/list.c ****      *                                                                       *
  27:../freertos/list.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:../freertos/list.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:../freertos/list.c ****      *    platform software that is more than just the market leader, it     *
  30:../freertos/list.c ****      *    is the industry's de facto standard.                               *
  31:../freertos/list.c ****      *                                                                       *
  32:../freertos/list.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:../freertos/list.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:../freertos/list.c ****      *    tutorial book, reference manual, or both:                          *
  35:../freertos/list.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:../freertos/list.c ****      *                                                                       *
  37:../freertos/list.c ****     ***************************************************************************
  38:../freertos/list.c **** 
  39:../freertos/list.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:../freertos/list.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:../freertos/list.c ****     defined configASSERT()?
  42:../freertos/list.c **** 
  43:../freertos/list.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:../freertos/list.c ****     embedded software for free we request you assist our global community by
  45:../freertos/list.c ****     participating in the support forum.
  46:../freertos/list.c **** 
  47:../freertos/list.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:../freertos/list.c ****     be as productive as possible as early as possible.  Now you can receive
  49:../freertos/list.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:../freertos/list.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:../freertos/list.c **** 
  52:../freertos/list.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:../freertos/list.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:../freertos/list.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:../freertos/list.c **** 
  56:../freertos/list.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:../freertos/list.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:../freertos/list.c **** 
  59:../freertos/list.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:../freertos/list.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:../freertos/list.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:../freertos/list.c **** 
  63:../freertos/list.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:../freertos/list.c ****     engineered and independently SIL3 certified version for use in safety and
  65:../freertos/list.c ****     mission critical applications that require provable dependability.
  66:../freertos/list.c **** 
  67:../freertos/list.c ****     1 tab == 4 spaces!
  68:../freertos/list.c **** */
  69:../freertos/list.c **** 
  70:../freertos/list.c **** 
  71:../freertos/list.c **** #include <stdlib.h>
  72:../freertos/list.c **** #include "FreeRTOS.h"
  73:../freertos/list.c **** #include "list.h"
  74:../freertos/list.c **** 
  75:../freertos/list.c **** /*-----------------------------------------------------------
  76:../freertos/list.c ****  * PUBLIC LIST API documented in list.h
  77:../freertos/list.c ****  *----------------------------------------------------------*/
  78:../freertos/list.c **** 
  79:../freertos/list.c **** void vListInitialise( List_t * const pxList )
  80:../freertos/list.c **** {
  26              		.loc 1 80 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 82B0     		sub	sp, sp, #8
  33              		.cfi_def_cfa_offset 16
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 7860     		str	r0, [r7, #4]
  81:../freertos/list.c **** 	/* The list structure contains a list item which is used to mark the
  82:../freertos/list.c **** 	end of the list.  To initialise the list the list end is inserted
  83:../freertos/list.c **** 	as the only list entry. */
  84:../freertos/list.c **** 	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list struc
  37              		.loc 1 84 0
  38 0008 7B68     		ldr	r3, [r7, #4]
  39 000a 1A1C     		mov	r2, r3
  40 000c 0832     		add	r2, r2, #8
  41 000e 7B68     		ldr	r3, [r7, #4]
  42 0010 5A60     		str	r2, [r3, #4]
  85:../freertos/list.c **** 
  86:../freertos/list.c **** 	/* The list end value is the highest possible value in the list to
  87:../freertos/list.c **** 	ensure it remains at the end of the list. */
  88:../freertos/list.c **** 	pxList->xListEnd.xItemValue = portMAX_DELAY;
  43              		.loc 1 88 0
  44 0012 7B68     		ldr	r3, [r7, #4]
  45 0014 0122     		mov	r2, #1
  46 0016 5242     		neg	r2, r2
  47 0018 9A60     		str	r2, [r3, #8]
  89:../freertos/list.c **** 
  90:../freertos/list.c **** 	/* The list end next and previous pointers point to itself so we know
  91:../freertos/list.c **** 	when the list is empty. */
  92:../freertos/list.c **** 	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list
  48              		.loc 1 92 0
  49 001a 7B68     		ldr	r3, [r7, #4]
  50 001c 1A1C     		mov	r2, r3
  51 001e 0832     		add	r2, r2, #8
  52 0020 7B68     		ldr	r3, [r7, #4]
  53 0022 DA60     		str	r2, [r3, #12]
  93:../freertos/list.c **** 	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini l
  54              		.loc 1 93 0
  55 0024 7B68     		ldr	r3, [r7, #4]
  56 0026 1A1C     		mov	r2, r3
  57 0028 0832     		add	r2, r2, #8
  58 002a 7B68     		ldr	r3, [r7, #4]
  59 002c 1A61     		str	r2, [r3, #16]
  94:../freertos/list.c **** 
  95:../freertos/list.c **** 	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  60              		.loc 1 95 0
  61 002e 7B68     		ldr	r3, [r7, #4]
  62 0030 0022     		mov	r2, #0
  63 0032 1A60     		str	r2, [r3]
  96:../freertos/list.c **** 
  97:../freertos/list.c **** 	/* Write known values into the list if
  98:../freertos/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  99:../freertos/list.c **** 	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
 100:../freertos/list.c **** 	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
 101:../freertos/list.c **** }
  64              		.loc 1 101 0
  65 0034 BD46     		mov	sp, r7
  66 0036 02B0     		add	sp, sp, #8
  67              		@ sp needed
  68 0038 80BD     		pop	{r7, pc}
  69              		.cfi_endproc
  70              	.LFE0:
  72 003a C046     		.section	.text.vListInitialiseItem,"ax",%progbits
  73              		.align	2
  74              		.global	vListInitialiseItem
  75              		.code	16
  76              		.thumb_func
  78              	vListInitialiseItem:
  79              	.LFB1:
 102:../freertos/list.c **** /*-----------------------------------------------------------*/
 103:../freertos/list.c **** 
 104:../freertos/list.c **** void vListInitialiseItem( ListItem_t * const pxItem )
 105:../freertos/list.c **** {
  80              		.loc 1 105 0
  81              		.cfi_startproc
  82 0000 80B5     		push	{r7, lr}
  83              		.cfi_def_cfa_offset 8
  84              		.cfi_offset 7, -8
  85              		.cfi_offset 14, -4
  86 0002 82B0     		sub	sp, sp, #8
  87              		.cfi_def_cfa_offset 16
  88 0004 00AF     		add	r7, sp, #0
  89              		.cfi_def_cfa_register 7
  90 0006 7860     		str	r0, [r7, #4]
 106:../freertos/list.c **** 	/* Make sure the list item is not recorded as being on a list. */
 107:../freertos/list.c **** 	pxItem->pvContainer = NULL;
  91              		.loc 1 107 0
  92 0008 7B68     		ldr	r3, [r7, #4]
  93 000a 0022     		mov	r2, #0
  94 000c 1A61     		str	r2, [r3, #16]
 108:../freertos/list.c **** 
 109:../freertos/list.c **** 	/* Write known values into the list item if
 110:../freertos/list.c **** 	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
 111:../freertos/list.c **** 	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 112:../freertos/list.c **** 	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
 113:../freertos/list.c **** }
  95              		.loc 1 113 0
  96 000e BD46     		mov	sp, r7
  97 0010 02B0     		add	sp, sp, #8
  98              		@ sp needed
  99 0012 80BD     		pop	{r7, pc}
 100              		.cfi_endproc
 101              	.LFE1:
 103              		.section	.text.vListInsertEnd,"ax",%progbits
 104              		.align	2
 105              		.global	vListInsertEnd
 106              		.code	16
 107              		.thumb_func
 109              	vListInsertEnd:
 110              	.LFB2:
 114:../freertos/list.c **** /*-----------------------------------------------------------*/
 115:../freertos/list.c **** 
 116:../freertos/list.c **** void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
 117:../freertos/list.c **** {
 111              		.loc 1 117 0
 112              		.cfi_startproc
 113 0000 80B5     		push	{r7, lr}
 114              		.cfi_def_cfa_offset 8
 115              		.cfi_offset 7, -8
 116              		.cfi_offset 14, -4
 117 0002 84B0     		sub	sp, sp, #16
 118              		.cfi_def_cfa_offset 24
 119 0004 00AF     		add	r7, sp, #0
 120              		.cfi_def_cfa_register 7
 121 0006 7860     		str	r0, [r7, #4]
 122 0008 3960     		str	r1, [r7]
 118:../freertos/list.c **** ListItem_t * const pxIndex = pxList->pxIndex;
 123              		.loc 1 118 0
 124 000a 7B68     		ldr	r3, [r7, #4]
 125 000c 5B68     		ldr	r3, [r3, #4]
 126 000e FB60     		str	r3, [r7, #12]
 119:../freertos/list.c **** 
 120:../freertos/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 121:../freertos/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 122:../freertos/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 123:../freertos/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 124:../freertos/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 125:../freertos/list.c **** 
 126:../freertos/list.c **** 	/* Insert a new list item into pxList, but rather than sort the list,
 127:../freertos/list.c **** 	makes the new list item the last item to be removed by a call to
 128:../freertos/list.c **** 	listGET_OWNER_OF_NEXT_ENTRY(). */
 129:../freertos/list.c **** 	pxNewListItem->pxNext = pxIndex;
 127              		.loc 1 129 0
 128 0010 3B68     		ldr	r3, [r7]
 129 0012 FA68     		ldr	r2, [r7, #12]
 130 0014 5A60     		str	r2, [r3, #4]
 130:../freertos/list.c **** 	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 131              		.loc 1 130 0
 132 0016 FB68     		ldr	r3, [r7, #12]
 133 0018 9A68     		ldr	r2, [r3, #8]
 134 001a 3B68     		ldr	r3, [r7]
 135 001c 9A60     		str	r2, [r3, #8]
 131:../freertos/list.c **** 
 132:../freertos/list.c **** 	/* Only used during decision coverage testing. */
 133:../freertos/list.c **** 	mtCOVERAGE_TEST_DELAY();
 134:../freertos/list.c **** 
 135:../freertos/list.c **** 	pxIndex->pxPrevious->pxNext = pxNewListItem;
 136              		.loc 1 135 0
 137 001e FB68     		ldr	r3, [r7, #12]
 138 0020 9B68     		ldr	r3, [r3, #8]
 139 0022 3A68     		ldr	r2, [r7]
 140 0024 5A60     		str	r2, [r3, #4]
 136:../freertos/list.c **** 	pxIndex->pxPrevious = pxNewListItem;
 141              		.loc 1 136 0
 142 0026 FB68     		ldr	r3, [r7, #12]
 143 0028 3A68     		ldr	r2, [r7]
 144 002a 9A60     		str	r2, [r3, #8]
 137:../freertos/list.c **** 
 138:../freertos/list.c **** 	/* Remember which list the item is in. */
 139:../freertos/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 145              		.loc 1 139 0
 146 002c 3B68     		ldr	r3, [r7]
 147 002e 7A68     		ldr	r2, [r7, #4]
 148 0030 1A61     		str	r2, [r3, #16]
 140:../freertos/list.c **** 
 141:../freertos/list.c **** 	( pxList->uxNumberOfItems )++;
 149              		.loc 1 141 0
 150 0032 7B68     		ldr	r3, [r7, #4]
 151 0034 1B68     		ldr	r3, [r3]
 152 0036 5A1C     		add	r2, r3, #1
 153 0038 7B68     		ldr	r3, [r7, #4]
 154 003a 1A60     		str	r2, [r3]
 142:../freertos/list.c **** }
 155              		.loc 1 142 0
 156 003c BD46     		mov	sp, r7
 157 003e 04B0     		add	sp, sp, #16
 158              		@ sp needed
 159 0040 80BD     		pop	{r7, pc}
 160              		.cfi_endproc
 161              	.LFE2:
 163 0042 C046     		.section	.text.vListInsert,"ax",%progbits
 164              		.align	2
 165              		.global	vListInsert
 166              		.code	16
 167              		.thumb_func
 169              	vListInsert:
 170              	.LFB3:
 143:../freertos/list.c **** /*-----------------------------------------------------------*/
 144:../freertos/list.c **** 
 145:../freertos/list.c **** void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
 146:../freertos/list.c **** {
 171              		.loc 1 146 0
 172              		.cfi_startproc
 173 0000 80B5     		push	{r7, lr}
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 7, -8
 176              		.cfi_offset 14, -4
 177 0002 84B0     		sub	sp, sp, #16
 178              		.cfi_def_cfa_offset 24
 179 0004 00AF     		add	r7, sp, #0
 180              		.cfi_def_cfa_register 7
 181 0006 7860     		str	r0, [r7, #4]
 182 0008 3960     		str	r1, [r7]
 147:../freertos/list.c **** ListItem_t *pxIterator;
 148:../freertos/list.c **** const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 183              		.loc 1 148 0
 184 000a 3B68     		ldr	r3, [r7]
 185 000c 1B68     		ldr	r3, [r3]
 186 000e BB60     		str	r3, [r7, #8]
 149:../freertos/list.c **** 
 150:../freertos/list.c **** 	/* Only effective when configASSERT() is also defined, these tests may catch
 151:../freertos/list.c **** 	the list data structures being overwritten in memory.  They will not catch
 152:../freertos/list.c **** 	data errors caused by incorrect configuration or use of FreeRTOS. */
 153:../freertos/list.c **** 	listTEST_LIST_INTEGRITY( pxList );
 154:../freertos/list.c **** 	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 155:../freertos/list.c **** 
 156:../freertos/list.c **** 	/* Insert the new list item into the list, sorted in xItemValue order.
 157:../freertos/list.c **** 
 158:../freertos/list.c **** 	If the list already contains a list item with the same item value then the
 159:../freertos/list.c **** 	new list item should be placed after it.  This ensures that TCB's which are
 160:../freertos/list.c **** 	stored in ready lists (all of which have the same xItemValue value) get a
 161:../freertos/list.c **** 	share of the CPU.  However, if the xItemValue is the same as the back marker
 162:../freertos/list.c **** 	the iteration loop below will not end.  Therefore the value is checked
 163:../freertos/list.c **** 	first, and the algorithm slightly modified if necessary. */
 164:../freertos/list.c **** 	if( xValueOfInsertion == portMAX_DELAY )
 187              		.loc 1 164 0
 188 0010 BB68     		ldr	r3, [r7, #8]
 189 0012 0133     		add	r3, r3, #1
 190 0014 03D1     		bne	.L5
 165:../freertos/list.c **** 	{
 166:../freertos/list.c **** 		pxIterator = pxList->xListEnd.pxPrevious;
 191              		.loc 1 166 0
 192 0016 7B68     		ldr	r3, [r7, #4]
 193 0018 1B69     		ldr	r3, [r3, #16]
 194 001a FB60     		str	r3, [r7, #12]
 195 001c 0CE0     		b	.L6
 196              	.L5:
 167:../freertos/list.c **** 	}
 168:../freertos/list.c **** 	else
 169:../freertos/list.c **** 	{
 170:../freertos/list.c **** 		/* *** NOTE ***********************************************************
 171:../freertos/list.c **** 		If you find your application is crashing here then likely causes are
 172:../freertos/list.c **** 		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
 173:../freertos/list.c **** 		more tips, and ensure configASSERT() is defined!
 174:../freertos/list.c **** 		http://www.freertos.org/a00110.html#configASSERT
 175:../freertos/list.c **** 
 176:../freertos/list.c **** 			1) Stack overflow -
 177:../freertos/list.c **** 			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
 178:../freertos/list.c **** 			2) Incorrect interrupt priority assignment, especially on Cortex-M
 179:../freertos/list.c **** 			   parts where numerically high priority values denote low actual
 180:../freertos/list.c **** 			   interrupt priorities, which can seem counter intuitive.  See
 181:../freertos/list.c **** 			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
 182:../freertos/list.c **** 			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 183:../freertos/list.c **** 			   http://www.freertos.org/a00110.html
 184:../freertos/list.c **** 			3) Calling an API function from within a critical section or when
 185:../freertos/list.c **** 			   the scheduler is suspended, or calling an API function that does
 186:../freertos/list.c **** 			   not end in "FromISR" from an interrupt.
 187:../freertos/list.c **** 			4) Using a queue or semaphore before it has been initialised or
 188:../freertos/list.c **** 			   before the scheduler has been started (are interrupts firing
 189:../freertos/list.c **** 			   before vTaskStartScheduler() has been called?).
 190:../freertos/list.c **** 		**********************************************************************/
 191:../freertos/list.c **** 
 192:../freertos/list.c **** 		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValu
 197              		.loc 1 192 0
 198 001e 7B68     		ldr	r3, [r7, #4]
 199 0020 0833     		add	r3, r3, #8
 200 0022 FB60     		str	r3, [r7, #12]
 201 0024 02E0     		b	.L7
 202              	.L8:
 203              		.loc 1 192 0 is_stmt 0 discriminator 2
 204 0026 FB68     		ldr	r3, [r7, #12]
 205 0028 5B68     		ldr	r3, [r3, #4]
 206 002a FB60     		str	r3, [r7, #12]
 207              	.L7:
 208              		.loc 1 192 0 discriminator 1
 209 002c FB68     		ldr	r3, [r7, #12]
 210 002e 5B68     		ldr	r3, [r3, #4]
 211 0030 1A68     		ldr	r2, [r3]
 212 0032 BB68     		ldr	r3, [r7, #8]
 213 0034 9A42     		cmp	r2, r3
 214 0036 F6D9     		bls	.L8
 215              	.L6:
 193:../freertos/list.c **** 		{
 194:../freertos/list.c **** 			/* There is nothing to do here, just iterating to the wanted
 195:../freertos/list.c **** 			insertion position. */
 196:../freertos/list.c **** 		}
 197:../freertos/list.c **** 	}
 198:../freertos/list.c **** 
 199:../freertos/list.c **** 	pxNewListItem->pxNext = pxIterator->pxNext;
 216              		.loc 1 199 0 is_stmt 1
 217 0038 FB68     		ldr	r3, [r7, #12]
 218 003a 5A68     		ldr	r2, [r3, #4]
 219 003c 3B68     		ldr	r3, [r7]
 220 003e 5A60     		str	r2, [r3, #4]
 200:../freertos/list.c **** 	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 221              		.loc 1 200 0
 222 0040 3B68     		ldr	r3, [r7]
 223 0042 5B68     		ldr	r3, [r3, #4]
 224 0044 3A68     		ldr	r2, [r7]
 225 0046 9A60     		str	r2, [r3, #8]
 201:../freertos/list.c **** 	pxNewListItem->pxPrevious = pxIterator;
 226              		.loc 1 201 0
 227 0048 3B68     		ldr	r3, [r7]
 228 004a FA68     		ldr	r2, [r7, #12]
 229 004c 9A60     		str	r2, [r3, #8]
 202:../freertos/list.c **** 	pxIterator->pxNext = pxNewListItem;
 230              		.loc 1 202 0
 231 004e FB68     		ldr	r3, [r7, #12]
 232 0050 3A68     		ldr	r2, [r7]
 233 0052 5A60     		str	r2, [r3, #4]
 203:../freertos/list.c **** 
 204:../freertos/list.c **** 	/* Remember which list the item is in.  This allows fast removal of the
 205:../freertos/list.c **** 	item later. */
 206:../freertos/list.c **** 	pxNewListItem->pvContainer = ( void * ) pxList;
 234              		.loc 1 206 0
 235 0054 3B68     		ldr	r3, [r7]
 236 0056 7A68     		ldr	r2, [r7, #4]
 237 0058 1A61     		str	r2, [r3, #16]
 207:../freertos/list.c **** 
 208:../freertos/list.c **** 	( pxList->uxNumberOfItems )++;
 238              		.loc 1 208 0
 239 005a 7B68     		ldr	r3, [r7, #4]
 240 005c 1B68     		ldr	r3, [r3]
 241 005e 5A1C     		add	r2, r3, #1
 242 0060 7B68     		ldr	r3, [r7, #4]
 243 0062 1A60     		str	r2, [r3]
 209:../freertos/list.c **** }
 244              		.loc 1 209 0
 245 0064 BD46     		mov	sp, r7
 246 0066 04B0     		add	sp, sp, #16
 247              		@ sp needed
 248 0068 80BD     		pop	{r7, pc}
 249              		.cfi_endproc
 250              	.LFE3:
 252 006a C046     		.section	.text.uxListRemove,"ax",%progbits
 253              		.align	2
 254              		.global	uxListRemove
 255              		.code	16
 256              		.thumb_func
 258              	uxListRemove:
 259              	.LFB4:
 210:../freertos/list.c **** /*-----------------------------------------------------------*/
 211:../freertos/list.c **** 
 212:../freertos/list.c **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 213:../freertos/list.c **** {
 260              		.loc 1 213 0
 261              		.cfi_startproc
 262 0000 80B5     		push	{r7, lr}
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 7, -8
 265              		.cfi_offset 14, -4
 266 0002 84B0     		sub	sp, sp, #16
 267              		.cfi_def_cfa_offset 24
 268 0004 00AF     		add	r7, sp, #0
 269              		.cfi_def_cfa_register 7
 270 0006 7860     		str	r0, [r7, #4]
 214:../freertos/list.c **** /* The list item knows which list it is in.  Obtain the list from the list
 215:../freertos/list.c **** item. */
 216:../freertos/list.c **** List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 271              		.loc 1 216 0
 272 0008 7B68     		ldr	r3, [r7, #4]
 273 000a 1B69     		ldr	r3, [r3, #16]
 274 000c FB60     		str	r3, [r7, #12]
 217:../freertos/list.c **** 
 218:../freertos/list.c **** 	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 275              		.loc 1 218 0
 276 000e 7B68     		ldr	r3, [r7, #4]
 277 0010 5B68     		ldr	r3, [r3, #4]
 278 0012 7A68     		ldr	r2, [r7, #4]
 279 0014 9268     		ldr	r2, [r2, #8]
 280 0016 9A60     		str	r2, [r3, #8]
 219:../freertos/list.c **** 	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 281              		.loc 1 219 0
 282 0018 7B68     		ldr	r3, [r7, #4]
 283 001a 9B68     		ldr	r3, [r3, #8]
 284 001c 7A68     		ldr	r2, [r7, #4]
 285 001e 5268     		ldr	r2, [r2, #4]
 286 0020 5A60     		str	r2, [r3, #4]
 220:../freertos/list.c **** 
 221:../freertos/list.c **** 	/* Only used during decision coverage testing. */
 222:../freertos/list.c **** 	mtCOVERAGE_TEST_DELAY();
 223:../freertos/list.c **** 
 224:../freertos/list.c **** 	/* Make sure the index is left pointing to a valid item. */
 225:../freertos/list.c **** 	if( pxList->pxIndex == pxItemToRemove )
 287              		.loc 1 225 0
 288 0022 FB68     		ldr	r3, [r7, #12]
 289 0024 5A68     		ldr	r2, [r3, #4]
 290 0026 7B68     		ldr	r3, [r7, #4]
 291 0028 9A42     		cmp	r2, r3
 292 002a 03D1     		bne	.L10
 226:../freertos/list.c **** 	{
 227:../freertos/list.c **** 		pxList->pxIndex = pxItemToRemove->pxPrevious;
 293              		.loc 1 227 0
 294 002c 7B68     		ldr	r3, [r7, #4]
 295 002e 9A68     		ldr	r2, [r3, #8]
 296 0030 FB68     		ldr	r3, [r7, #12]
 297 0032 5A60     		str	r2, [r3, #4]
 298              	.L10:
 228:../freertos/list.c **** 	}
 229:../freertos/list.c **** 	else
 230:../freertos/list.c **** 	{
 231:../freertos/list.c **** 		mtCOVERAGE_TEST_MARKER();
 232:../freertos/list.c **** 	}
 233:../freertos/list.c **** 
 234:../freertos/list.c **** 	pxItemToRemove->pvContainer = NULL;
 299              		.loc 1 234 0
 300 0034 7B68     		ldr	r3, [r7, #4]
 301 0036 0022     		mov	r2, #0
 302 0038 1A61     		str	r2, [r3, #16]
 235:../freertos/list.c **** 	( pxList->uxNumberOfItems )--;
 303              		.loc 1 235 0
 304 003a FB68     		ldr	r3, [r7, #12]
 305 003c 1B68     		ldr	r3, [r3]
 306 003e 5A1E     		sub	r2, r3, #1
 307 0040 FB68     		ldr	r3, [r7, #12]
 308 0042 1A60     		str	r2, [r3]
 236:../freertos/list.c **** 
 237:../freertos/list.c **** 	return pxList->uxNumberOfItems;
 309              		.loc 1 237 0
 310 0044 FB68     		ldr	r3, [r7, #12]
 311 0046 1B68     		ldr	r3, [r3]
 238:../freertos/list.c **** }
 312              		.loc 1 238 0
 313 0048 181C     		mov	r0, r3
 314 004a BD46     		mov	sp, r7
 315 004c 04B0     		add	sp, sp, #16
 316              		@ sp needed
 317 004e 80BD     		pop	{r7, pc}
 318              		.cfi_endproc
 319              	.LFE4:
 321              		.text
 322              	.Letext0:
 323              		.file 2 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 324              		.file 3 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\stdint.h"
 325              		.file 4 "../freertos/portmacro.h"
 326              		.file 5 "../freertos/list.h"
DEFINED SYMBOLS
                            *ABS*:00000000 list.c
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:18     .text.vListInitialise:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:23     .text.vListInitialise:00000000 vListInitialise
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:73     .text.vListInitialiseItem:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:78     .text.vListInitialiseItem:00000000 vListInitialiseItem
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:104    .text.vListInsertEnd:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:109    .text.vListInsertEnd:00000000 vListInsertEnd
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:164    .text.vListInsert:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:169    .text.vListInsert:00000000 vListInsert
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:253    .text.uxListRemove:00000000 $t
C:\Users\mathe\AppData\Local\Temp\cc0T3iwj.s:258    .text.uxListRemove:00000000 uxListRemove
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.e19fef13b9966be9a9a0df56dde4c190
                           .group:00000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.184.aa65fb7281d578229bbad41b91862635
                           .group:00000000 wm4.stddef.h.39.d0197034aa5fd947cae140b9289e6734
                           .group:00000000 wm4._default_types.h.6.9e4229723f5523536bc8f574589d6a99
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.stdlib.h.53.a73f7e963d962393b7f9086194931e4a
                           .group:00000000 wm4.stdint.h.10.d0f8e374834fcfc2e296d5d5fe82f02a
                           .group:00000000 wm4.FreeRTOSConfig.h.71.9ce5dd93bb084cb2714008d9030c087d
                           .group:00000000 wm4.projdefs.h.71.6ed2b4e07820ea275c61d78138cfae10
                           .group:00000000 wm4.portmacro.h.72.32efb3512b0394b29d8211ba7ab279d9
                           .group:00000000 wm4.portable.h.106.61ffdda1afafb5a5e1f7197ade95b43a
                           .group:00000000 wm4.mpu_wrappers.h.71.c0872672d360e197b5a999335351843d
                           .group:00000000 wm4.FreeRTOS.h.186.2e14eee2d995e9702d028b4adcebc296
                           .group:00000000 wm4.list.h.103.6a12b7b9a7a136c3cca0ee53675c5498

NO UNDEFINED SYMBOLS
