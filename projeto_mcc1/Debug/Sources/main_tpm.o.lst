   1              		.cpu cortex-m0plus
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main_tpm.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  18              		.align	2
  19              		.code	16
  20              		.thumb_func
  22              	NVIC_EnableIRQ:
  23              	.LFB25:
  24              		.file 1 "../Includes/core_cm0plus.h"
   1:../Includes/core_cm0plus.h **** /**************************************************************************//**
   2:../Includes/core_cm0plus.h ****  * @file     core_cm0plus.h
   3:../Includes/core_cm0plus.h ****  * @brief    CMSIS Cortex-M0+ Core Peripheral Access Layer Header File
   4:../Includes/core_cm0plus.h ****  * @version  V4.10
   5:../Includes/core_cm0plus.h ****  * @date     18. March 2015
   6:../Includes/core_cm0plus.h ****  *
   7:../Includes/core_cm0plus.h ****  * @note
   8:../Includes/core_cm0plus.h ****  *
   9:../Includes/core_cm0plus.h ****  ******************************************************************************/
  10:../Includes/core_cm0plus.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
  11:../Includes/core_cm0plus.h **** 
  12:../Includes/core_cm0plus.h ****    All rights reserved.
  13:../Includes/core_cm0plus.h ****    Redistribution and use in source and binary forms, with or without
  14:../Includes/core_cm0plus.h ****    modification, are permitted provided that the following conditions are met:
  15:../Includes/core_cm0plus.h ****    - Redistributions of source code must retain the above copyright
  16:../Includes/core_cm0plus.h ****      notice, this list of conditions and the following disclaimer.
  17:../Includes/core_cm0plus.h ****    - Redistributions in binary form must reproduce the above copyright
  18:../Includes/core_cm0plus.h ****      notice, this list of conditions and the following disclaimer in the
  19:../Includes/core_cm0plus.h ****      documentation and/or other materials provided with the distribution.
  20:../Includes/core_cm0plus.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:../Includes/core_cm0plus.h ****      to endorse or promote products derived from this software without
  22:../Includes/core_cm0plus.h ****      specific prior written permission.
  23:../Includes/core_cm0plus.h ****    *
  24:../Includes/core_cm0plus.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:../Includes/core_cm0plus.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:../Includes/core_cm0plus.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:../Includes/core_cm0plus.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:../Includes/core_cm0plus.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:../Includes/core_cm0plus.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:../Includes/core_cm0plus.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:../Includes/core_cm0plus.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:../Includes/core_cm0plus.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:../Includes/core_cm0plus.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:../Includes/core_cm0plus.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:../Includes/core_cm0plus.h ****    ---------------------------------------------------------------------------*/
  36:../Includes/core_cm0plus.h **** 
  37:../Includes/core_cm0plus.h **** 
  38:../Includes/core_cm0plus.h **** #if defined ( __ICCARM__ )
  39:../Includes/core_cm0plus.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  40:../Includes/core_cm0plus.h **** #endif
  41:../Includes/core_cm0plus.h **** 
  42:../Includes/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_GENERIC
  43:../Includes/core_cm0plus.h **** #define __CORE_CM0PLUS_H_GENERIC
  44:../Includes/core_cm0plus.h **** 
  45:../Includes/core_cm0plus.h **** #ifdef __cplusplus
  46:../Includes/core_cm0plus.h ****  extern "C" {
  47:../Includes/core_cm0plus.h **** #endif
  48:../Includes/core_cm0plus.h **** 
  49:../Includes/core_cm0plus.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  50:../Includes/core_cm0plus.h ****   CMSIS violates the following MISRA-C:2004 rules:
  51:../Includes/core_cm0plus.h **** 
  52:../Includes/core_cm0plus.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  53:../Includes/core_cm0plus.h ****      Function definitions in header files are used to allow 'inlining'.
  54:../Includes/core_cm0plus.h **** 
  55:../Includes/core_cm0plus.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  56:../Includes/core_cm0plus.h ****      Unions are used for effective representation of core registers.
  57:../Includes/core_cm0plus.h **** 
  58:../Includes/core_cm0plus.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  59:../Includes/core_cm0plus.h ****      Function-like macros are used to allow more efficient code.
  60:../Includes/core_cm0plus.h ****  */
  61:../Includes/core_cm0plus.h **** 
  62:../Includes/core_cm0plus.h **** 
  63:../Includes/core_cm0plus.h **** /*******************************************************************************
  64:../Includes/core_cm0plus.h ****  *                 CMSIS definitions
  65:../Includes/core_cm0plus.h ****  ******************************************************************************/
  66:../Includes/core_cm0plus.h **** /** \ingroup Cortex-M0+
  67:../Includes/core_cm0plus.h ****   @{
  68:../Includes/core_cm0plus.h ****  */
  69:../Includes/core_cm0plus.h **** 
  70:../Includes/core_cm0plus.h **** /*  CMSIS CM0P definitions */
  71:../Includes/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_MAIN (0x04)                                /*!< [31:16] CMSIS HAL m
  72:../Includes/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION_SUB  (0x00)                                /*!< [15:0]  CMSIS HAL s
  73:../Includes/core_cm0plus.h **** #define __CM0PLUS_CMSIS_VERSION      ((__CM0PLUS_CMSIS_VERSION_MAIN << 16) | \
  74:../Includes/core_cm0plus.h ****                                        __CM0PLUS_CMSIS_VERSION_SUB)        /*!< CMSIS HAL version n
  75:../Includes/core_cm0plus.h **** 
  76:../Includes/core_cm0plus.h **** #define __CORTEX_M                (0x00)                                   /*!< Cortex-M Core      
  77:../Includes/core_cm0plus.h **** 
  78:../Includes/core_cm0plus.h **** 
  79:../Includes/core_cm0plus.h **** #if   defined ( __CC_ARM )
  80:../Includes/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  81:../Includes/core_cm0plus.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  82:../Includes/core_cm0plus.h ****   #define __STATIC_INLINE  static __inline
  83:../Includes/core_cm0plus.h **** 
  84:../Includes/core_cm0plus.h **** #elif defined ( __GNUC__ )
  85:../Includes/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  86:../Includes/core_cm0plus.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  87:../Includes/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
  88:../Includes/core_cm0plus.h **** 
  89:../Includes/core_cm0plus.h **** #elif defined ( __ICCARM__ )
  90:../Includes/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  91:../Includes/core_cm0plus.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  92:../Includes/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
  93:../Includes/core_cm0plus.h **** 
  94:../Includes/core_cm0plus.h **** #elif defined ( __TMS470__ )
  95:../Includes/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  96:../Includes/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
  97:../Includes/core_cm0plus.h **** 
  98:../Includes/core_cm0plus.h **** #elif defined ( __TASKING__ )
  99:../Includes/core_cm0plus.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 100:../Includes/core_cm0plus.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 101:../Includes/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
 102:../Includes/core_cm0plus.h **** 
 103:../Includes/core_cm0plus.h **** #elif defined ( __CSMC__ )
 104:../Includes/core_cm0plus.h ****   #define __packed
 105:../Includes/core_cm0plus.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 106:../Includes/core_cm0plus.h ****   #define __INLINE         inline                                    /*use -pc99 on compile line !<
 107:../Includes/core_cm0plus.h ****   #define __STATIC_INLINE  static inline
 108:../Includes/core_cm0plus.h **** 
 109:../Includes/core_cm0plus.h **** #endif
 110:../Includes/core_cm0plus.h **** 
 111:../Includes/core_cm0plus.h **** /** __FPU_USED indicates whether an FPU is used or not.
 112:../Includes/core_cm0plus.h ****     This core does not support an FPU at all
 113:../Includes/core_cm0plus.h **** */
 114:../Includes/core_cm0plus.h **** #define __FPU_USED       0
 115:../Includes/core_cm0plus.h **** 
 116:../Includes/core_cm0plus.h **** #if defined ( __CC_ARM )
 117:../Includes/core_cm0plus.h ****   #if defined __TARGET_FPU_VFP
 118:../Includes/core_cm0plus.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 119:../Includes/core_cm0plus.h ****   #endif
 120:../Includes/core_cm0plus.h **** 
 121:../Includes/core_cm0plus.h **** #elif defined ( __GNUC__ )
 122:../Includes/core_cm0plus.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 123:../Includes/core_cm0plus.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 124:../Includes/core_cm0plus.h ****   #endif
 125:../Includes/core_cm0plus.h **** 
 126:../Includes/core_cm0plus.h **** #elif defined ( __ICCARM__ )
 127:../Includes/core_cm0plus.h ****   #if defined __ARMVFP__
 128:../Includes/core_cm0plus.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 129:../Includes/core_cm0plus.h ****   #endif
 130:../Includes/core_cm0plus.h **** 
 131:../Includes/core_cm0plus.h **** #elif defined ( __TMS470__ )
 132:../Includes/core_cm0plus.h ****   #if defined __TI__VFP_SUPPORT____
 133:../Includes/core_cm0plus.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 134:../Includes/core_cm0plus.h ****   #endif
 135:../Includes/core_cm0plus.h **** 
 136:../Includes/core_cm0plus.h **** #elif defined ( __TASKING__ )
 137:../Includes/core_cm0plus.h ****   #if defined __FPU_VFP__
 138:../Includes/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 139:../Includes/core_cm0plus.h ****   #endif
 140:../Includes/core_cm0plus.h **** 
 141:../Includes/core_cm0plus.h **** #elif defined ( __CSMC__ )		/* Cosmic */
 142:../Includes/core_cm0plus.h ****   #if ( __CSMC__ & 0x400)		// FPU present for parser
 143:../Includes/core_cm0plus.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 144:../Includes/core_cm0plus.h ****   #endif
 145:../Includes/core_cm0plus.h **** #endif
 146:../Includes/core_cm0plus.h **** 
 147:../Includes/core_cm0plus.h **** #include <stdint.h>                      /* standard types definitions                      */
 148:../Includes/core_cm0plus.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 149:../Includes/core_cm0plus.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 150:../Includes/core_cm0plus.h **** 
 151:../Includes/core_cm0plus.h **** #ifdef __cplusplus
 152:../Includes/core_cm0plus.h **** }
 153:../Includes/core_cm0plus.h **** #endif
 154:../Includes/core_cm0plus.h **** 
 155:../Includes/core_cm0plus.h **** #endif /* __CORE_CM0PLUS_H_GENERIC */
 156:../Includes/core_cm0plus.h **** 
 157:../Includes/core_cm0plus.h **** #ifndef __CMSIS_GENERIC
 158:../Includes/core_cm0plus.h **** 
 159:../Includes/core_cm0plus.h **** #ifndef __CORE_CM0PLUS_H_DEPENDANT
 160:../Includes/core_cm0plus.h **** #define __CORE_CM0PLUS_H_DEPENDANT
 161:../Includes/core_cm0plus.h **** 
 162:../Includes/core_cm0plus.h **** #ifdef __cplusplus
 163:../Includes/core_cm0plus.h ****  extern "C" {
 164:../Includes/core_cm0plus.h **** #endif
 165:../Includes/core_cm0plus.h **** 
 166:../Includes/core_cm0plus.h **** /* check device defines and use defaults */
 167:../Includes/core_cm0plus.h **** #if defined __CHECK_DEVICE_DEFINES
 168:../Includes/core_cm0plus.h ****   #ifndef __CM0PLUS_REV
 169:../Includes/core_cm0plus.h ****     #define __CM0PLUS_REV             0x0000
 170:../Includes/core_cm0plus.h ****     #warning "__CM0PLUS_REV not defined in device header file; using default!"
 171:../Includes/core_cm0plus.h ****   #endif
 172:../Includes/core_cm0plus.h **** 
 173:../Includes/core_cm0plus.h ****   #ifndef __MPU_PRESENT
 174:../Includes/core_cm0plus.h ****     #define __MPU_PRESENT             0
 175:../Includes/core_cm0plus.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 176:../Includes/core_cm0plus.h ****   #endif
 177:../Includes/core_cm0plus.h **** 
 178:../Includes/core_cm0plus.h ****   #ifndef __VTOR_PRESENT
 179:../Includes/core_cm0plus.h ****     #define __VTOR_PRESENT            0
 180:../Includes/core_cm0plus.h ****     #warning "__VTOR_PRESENT not defined in device header file; using default!"
 181:../Includes/core_cm0plus.h ****   #endif
 182:../Includes/core_cm0plus.h **** 
 183:../Includes/core_cm0plus.h ****   #ifndef __NVIC_PRIO_BITS
 184:../Includes/core_cm0plus.h ****     #define __NVIC_PRIO_BITS          2
 185:../Includes/core_cm0plus.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 186:../Includes/core_cm0plus.h ****   #endif
 187:../Includes/core_cm0plus.h **** 
 188:../Includes/core_cm0plus.h ****   #ifndef __Vendor_SysTickConfig
 189:../Includes/core_cm0plus.h ****     #define __Vendor_SysTickConfig    0
 190:../Includes/core_cm0plus.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 191:../Includes/core_cm0plus.h ****   #endif
 192:../Includes/core_cm0plus.h **** #endif
 193:../Includes/core_cm0plus.h **** 
 194:../Includes/core_cm0plus.h **** /* IO definitions (access restrictions to peripheral registers) */
 195:../Includes/core_cm0plus.h **** /**
 196:../Includes/core_cm0plus.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 197:../Includes/core_cm0plus.h **** 
 198:../Includes/core_cm0plus.h ****     <strong>IO Type Qualifiers</strong> are used
 199:../Includes/core_cm0plus.h ****     \li to specify the access to peripheral variables.
 200:../Includes/core_cm0plus.h ****     \li for automatic generation of peripheral register debug information.
 201:../Includes/core_cm0plus.h **** */
 202:../Includes/core_cm0plus.h **** #ifdef __cplusplus
 203:../Includes/core_cm0plus.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 204:../Includes/core_cm0plus.h **** #else
 205:../Includes/core_cm0plus.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 206:../Includes/core_cm0plus.h **** #endif
 207:../Includes/core_cm0plus.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 208:../Includes/core_cm0plus.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 209:../Includes/core_cm0plus.h **** 
 210:../Includes/core_cm0plus.h **** /*@} end of group Cortex-M0+ */
 211:../Includes/core_cm0plus.h **** 
 212:../Includes/core_cm0plus.h **** 
 213:../Includes/core_cm0plus.h **** 
 214:../Includes/core_cm0plus.h **** /*******************************************************************************
 215:../Includes/core_cm0plus.h ****  *                 Register Abstraction
 216:../Includes/core_cm0plus.h ****   Core Register contain:
 217:../Includes/core_cm0plus.h ****   - Core Register
 218:../Includes/core_cm0plus.h ****   - Core NVIC Register
 219:../Includes/core_cm0plus.h ****   - Core SCB Register
 220:../Includes/core_cm0plus.h ****   - Core SysTick Register
 221:../Includes/core_cm0plus.h ****   - Core MPU Register
 222:../Includes/core_cm0plus.h ****  ******************************************************************************/
 223:../Includes/core_cm0plus.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 224:../Includes/core_cm0plus.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 225:../Includes/core_cm0plus.h **** */
 226:../Includes/core_cm0plus.h **** 
 227:../Includes/core_cm0plus.h **** /** \ingroup    CMSIS_core_register
 228:../Includes/core_cm0plus.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 229:../Includes/core_cm0plus.h ****     \brief  Core Register type definitions.
 230:../Includes/core_cm0plus.h ****   @{
 231:../Includes/core_cm0plus.h ****  */
 232:../Includes/core_cm0plus.h **** 
 233:../Includes/core_cm0plus.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 234:../Includes/core_cm0plus.h ****  */
 235:../Includes/core_cm0plus.h **** typedef union
 236:../Includes/core_cm0plus.h **** {
 237:../Includes/core_cm0plus.h ****   struct
 238:../Includes/core_cm0plus.h ****   {
 239:../Includes/core_cm0plus.h ****     uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved                           */
 240:../Includes/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 241:../Includes/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 242:../Includes/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 243:../Includes/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 244:../Includes/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access                  */
 245:../Includes/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 246:../Includes/core_cm0plus.h **** } APSR_Type;
 247:../Includes/core_cm0plus.h **** 
 248:../Includes/core_cm0plus.h **** /* APSR Register Definitions */
 249:../Includes/core_cm0plus.h **** #define APSR_N_Pos                         31                                             /*!< APSR
 250:../Includes/core_cm0plus.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 251:../Includes/core_cm0plus.h **** 
 252:../Includes/core_cm0plus.h **** #define APSR_Z_Pos                         30                                             /*!< APSR
 253:../Includes/core_cm0plus.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 254:../Includes/core_cm0plus.h **** 
 255:../Includes/core_cm0plus.h **** #define APSR_C_Pos                         29                                             /*!< APSR
 256:../Includes/core_cm0plus.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 257:../Includes/core_cm0plus.h **** 
 258:../Includes/core_cm0plus.h **** #define APSR_V_Pos                         28                                             /*!< APSR
 259:../Includes/core_cm0plus.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 260:../Includes/core_cm0plus.h **** 
 261:../Includes/core_cm0plus.h **** 
 262:../Includes/core_cm0plus.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 263:../Includes/core_cm0plus.h ****  */
 264:../Includes/core_cm0plus.h **** typedef union
 265:../Includes/core_cm0plus.h **** {
 266:../Includes/core_cm0plus.h ****   struct
 267:../Includes/core_cm0plus.h ****   {
 268:../Includes/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 269:../Includes/core_cm0plus.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 270:../Includes/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access                  */
 271:../Includes/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 272:../Includes/core_cm0plus.h **** } IPSR_Type;
 273:../Includes/core_cm0plus.h **** 
 274:../Includes/core_cm0plus.h **** /* IPSR Register Definitions */
 275:../Includes/core_cm0plus.h **** #define IPSR_ISR_Pos                        0                                             /*!< IPSR
 276:../Includes/core_cm0plus.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 277:../Includes/core_cm0plus.h **** 
 278:../Includes/core_cm0plus.h **** 
 279:../Includes/core_cm0plus.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 280:../Includes/core_cm0plus.h ****  */
 281:../Includes/core_cm0plus.h **** typedef union
 282:../Includes/core_cm0plus.h **** {
 283:../Includes/core_cm0plus.h ****   struct
 284:../Includes/core_cm0plus.h ****   {
 285:../Includes/core_cm0plus.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 286:../Includes/core_cm0plus.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 287:../Includes/core_cm0plus.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 288:../Includes/core_cm0plus.h ****     uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved                           */
 289:../Includes/core_cm0plus.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 290:../Includes/core_cm0plus.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 291:../Includes/core_cm0plus.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 292:../Includes/core_cm0plus.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 293:../Includes/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access                  */
 294:../Includes/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 295:../Includes/core_cm0plus.h **** } xPSR_Type;
 296:../Includes/core_cm0plus.h **** 
 297:../Includes/core_cm0plus.h **** /* xPSR Register Definitions */
 298:../Includes/core_cm0plus.h **** #define xPSR_N_Pos                         31                                             /*!< xPSR
 299:../Includes/core_cm0plus.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 300:../Includes/core_cm0plus.h **** 
 301:../Includes/core_cm0plus.h **** #define xPSR_Z_Pos                         30                                             /*!< xPSR
 302:../Includes/core_cm0plus.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 303:../Includes/core_cm0plus.h **** 
 304:../Includes/core_cm0plus.h **** #define xPSR_C_Pos                         29                                             /*!< xPSR
 305:../Includes/core_cm0plus.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 306:../Includes/core_cm0plus.h **** 
 307:../Includes/core_cm0plus.h **** #define xPSR_V_Pos                         28                                             /*!< xPSR
 308:../Includes/core_cm0plus.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 309:../Includes/core_cm0plus.h **** 
 310:../Includes/core_cm0plus.h **** #define xPSR_T_Pos                         24                                             /*!< xPSR
 311:../Includes/core_cm0plus.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 312:../Includes/core_cm0plus.h **** 
 313:../Includes/core_cm0plus.h **** #define xPSR_ISR_Pos                        0                                             /*!< xPSR
 314:../Includes/core_cm0plus.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 315:../Includes/core_cm0plus.h **** 
 316:../Includes/core_cm0plus.h **** 
 317:../Includes/core_cm0plus.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 318:../Includes/core_cm0plus.h ****  */
 319:../Includes/core_cm0plus.h **** typedef union
 320:../Includes/core_cm0plus.h **** {
 321:../Includes/core_cm0plus.h ****   struct
 322:../Includes/core_cm0plus.h ****   {
 323:../Includes/core_cm0plus.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 324:../Includes/core_cm0plus.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 325:../Includes/core_cm0plus.h ****     uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved                           */
 326:../Includes/core_cm0plus.h ****   } b;                                   /*!< Structure used for bit  access                  */
 327:../Includes/core_cm0plus.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 328:../Includes/core_cm0plus.h **** } CONTROL_Type;
 329:../Includes/core_cm0plus.h **** 
 330:../Includes/core_cm0plus.h **** /* CONTROL Register Definitions */
 331:../Includes/core_cm0plus.h **** #define CONTROL_SPSEL_Pos                   1                                             /*!< CONT
 332:../Includes/core_cm0plus.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 333:../Includes/core_cm0plus.h **** 
 334:../Includes/core_cm0plus.h **** #define CONTROL_nPRIV_Pos                   0                                             /*!< CONT
 335:../Includes/core_cm0plus.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 336:../Includes/core_cm0plus.h **** 
 337:../Includes/core_cm0plus.h **** /*@} end of group CMSIS_CORE */
 338:../Includes/core_cm0plus.h **** 
 339:../Includes/core_cm0plus.h **** 
 340:../Includes/core_cm0plus.h **** /** \ingroup    CMSIS_core_register
 341:../Includes/core_cm0plus.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 342:../Includes/core_cm0plus.h ****     \brief      Type definitions for the NVIC Registers
 343:../Includes/core_cm0plus.h ****   @{
 344:../Includes/core_cm0plus.h ****  */
 345:../Includes/core_cm0plus.h **** 
 346:../Includes/core_cm0plus.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 347:../Includes/core_cm0plus.h ****  */
 348:../Includes/core_cm0plus.h **** typedef struct
 349:../Includes/core_cm0plus.h **** {
 350:../Includes/core_cm0plus.h ****   __IO uint32_t ISER[1];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 351:../Includes/core_cm0plus.h ****        uint32_t RESERVED0[31];
 352:../Includes/core_cm0plus.h ****   __IO uint32_t ICER[1];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 353:../Includes/core_cm0plus.h ****        uint32_t RSERVED1[31];
 354:../Includes/core_cm0plus.h ****   __IO uint32_t ISPR[1];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 355:../Includes/core_cm0plus.h ****        uint32_t RESERVED2[31];
 356:../Includes/core_cm0plus.h ****   __IO uint32_t ICPR[1];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 357:../Includes/core_cm0plus.h ****        uint32_t RESERVED3[31];
 358:../Includes/core_cm0plus.h ****        uint32_t RESERVED4[64];
 359:../Includes/core_cm0plus.h ****   __IO uint32_t IP[8];                   /*!< Offset: 0x300 (R/W)  Interrupt Priority Register     
 360:../Includes/core_cm0plus.h **** }  NVIC_Type;
 361:../Includes/core_cm0plus.h **** 
 362:../Includes/core_cm0plus.h **** /*@} end of group CMSIS_NVIC */
 363:../Includes/core_cm0plus.h **** 
 364:../Includes/core_cm0plus.h **** 
 365:../Includes/core_cm0plus.h **** /** \ingroup  CMSIS_core_register
 366:../Includes/core_cm0plus.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 367:../Includes/core_cm0plus.h ****     \brief      Type definitions for the System Control Block Registers
 368:../Includes/core_cm0plus.h ****   @{
 369:../Includes/core_cm0plus.h ****  */
 370:../Includes/core_cm0plus.h **** 
 371:../Includes/core_cm0plus.h **** /** \brief  Structure type to access the System Control Block (SCB).
 372:../Includes/core_cm0plus.h ****  */
 373:../Includes/core_cm0plus.h **** typedef struct
 374:../Includes/core_cm0plus.h **** {
 375:../Includes/core_cm0plus.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 376:../Includes/core_cm0plus.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 377:../Includes/core_cm0plus.h **** #if (__VTOR_PRESENT == 1)
 378:../Includes/core_cm0plus.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 379:../Includes/core_cm0plus.h **** #else
 380:../Includes/core_cm0plus.h ****        uint32_t RESERVED0;
 381:../Includes/core_cm0plus.h **** #endif
 382:../Includes/core_cm0plus.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 383:../Includes/core_cm0plus.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 384:../Includes/core_cm0plus.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 385:../Includes/core_cm0plus.h ****        uint32_t RESERVED1;
 386:../Includes/core_cm0plus.h ****   __IO uint32_t SHP[2];                  /*!< Offset: 0x01C (R/W)  System Handlers Priority Registe
 387:../Includes/core_cm0plus.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 388:../Includes/core_cm0plus.h **** } SCB_Type;
 389:../Includes/core_cm0plus.h **** 
 390:../Includes/core_cm0plus.h **** /* SCB CPUID Register Definitions */
 391:../Includes/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 392:../Includes/core_cm0plus.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 393:../Includes/core_cm0plus.h **** 
 394:../Includes/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 395:../Includes/core_cm0plus.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 396:../Includes/core_cm0plus.h **** 
 397:../Includes/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 398:../Includes/core_cm0plus.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 399:../Includes/core_cm0plus.h **** 
 400:../Includes/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 401:../Includes/core_cm0plus.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 402:../Includes/core_cm0plus.h **** 
 403:../Includes/core_cm0plus.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 404:../Includes/core_cm0plus.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 405:../Includes/core_cm0plus.h **** 
 406:../Includes/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 407:../Includes/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 408:../Includes/core_cm0plus.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 409:../Includes/core_cm0plus.h **** 
 410:../Includes/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 411:../Includes/core_cm0plus.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 412:../Includes/core_cm0plus.h **** 
 413:../Includes/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 414:../Includes/core_cm0plus.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 415:../Includes/core_cm0plus.h **** 
 416:../Includes/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 417:../Includes/core_cm0plus.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 418:../Includes/core_cm0plus.h **** 
 419:../Includes/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 420:../Includes/core_cm0plus.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 421:../Includes/core_cm0plus.h **** 
 422:../Includes/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 423:../Includes/core_cm0plus.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 424:../Includes/core_cm0plus.h **** 
 425:../Includes/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 426:../Includes/core_cm0plus.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 427:../Includes/core_cm0plus.h **** 
 428:../Includes/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 429:../Includes/core_cm0plus.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 430:../Includes/core_cm0plus.h **** 
 431:../Includes/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 432:../Includes/core_cm0plus.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 433:../Includes/core_cm0plus.h **** 
 434:../Includes/core_cm0plus.h **** #if (__VTOR_PRESENT == 1)
 435:../Includes/core_cm0plus.h **** /* SCB Interrupt Control State Register Definitions */
 436:../Includes/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Pos                 8                                             /*!< SCB 
 437:../Includes/core_cm0plus.h **** #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 438:../Includes/core_cm0plus.h **** #endif
 439:../Includes/core_cm0plus.h **** 
 440:../Includes/core_cm0plus.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 441:../Includes/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 442:../Includes/core_cm0plus.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 443:../Includes/core_cm0plus.h **** 
 444:../Includes/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 445:../Includes/core_cm0plus.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 446:../Includes/core_cm0plus.h **** 
 447:../Includes/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 448:../Includes/core_cm0plus.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 449:../Includes/core_cm0plus.h **** 
 450:../Includes/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 451:../Includes/core_cm0plus.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 452:../Includes/core_cm0plus.h **** 
 453:../Includes/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 454:../Includes/core_cm0plus.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 455:../Includes/core_cm0plus.h **** 
 456:../Includes/core_cm0plus.h **** /* SCB System Control Register Definitions */
 457:../Includes/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 458:../Includes/core_cm0plus.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 459:../Includes/core_cm0plus.h **** 
 460:../Includes/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 461:../Includes/core_cm0plus.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 462:../Includes/core_cm0plus.h **** 
 463:../Includes/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 464:../Includes/core_cm0plus.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 465:../Includes/core_cm0plus.h **** 
 466:../Includes/core_cm0plus.h **** /* SCB Configuration Control Register Definitions */
 467:../Includes/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 468:../Includes/core_cm0plus.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 469:../Includes/core_cm0plus.h **** 
 470:../Includes/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 471:../Includes/core_cm0plus.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 472:../Includes/core_cm0plus.h **** 
 473:../Includes/core_cm0plus.h **** /* SCB System Handler Control and State Register Definitions */
 474:../Includes/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 475:../Includes/core_cm0plus.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 476:../Includes/core_cm0plus.h **** 
 477:../Includes/core_cm0plus.h **** /*@} end of group CMSIS_SCB */
 478:../Includes/core_cm0plus.h **** 
 479:../Includes/core_cm0plus.h **** 
 480:../Includes/core_cm0plus.h **** /** \ingroup  CMSIS_core_register
 481:../Includes/core_cm0plus.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 482:../Includes/core_cm0plus.h ****     \brief      Type definitions for the System Timer Registers.
 483:../Includes/core_cm0plus.h ****   @{
 484:../Includes/core_cm0plus.h ****  */
 485:../Includes/core_cm0plus.h **** 
 486:../Includes/core_cm0plus.h **** /** \brief  Structure type to access the System Timer (SysTick).
 487:../Includes/core_cm0plus.h ****  */
 488:../Includes/core_cm0plus.h **** typedef struct
 489:../Includes/core_cm0plus.h **** {
 490:../Includes/core_cm0plus.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 491:../Includes/core_cm0plus.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 492:../Includes/core_cm0plus.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 493:../Includes/core_cm0plus.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 494:../Includes/core_cm0plus.h **** } SysTick_Type;
 495:../Includes/core_cm0plus.h **** 
 496:../Includes/core_cm0plus.h **** /* SysTick Control / Status Register Definitions */
 497:../Includes/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 498:../Includes/core_cm0plus.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 499:../Includes/core_cm0plus.h **** 
 500:../Includes/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 501:../Includes/core_cm0plus.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 502:../Includes/core_cm0plus.h **** 
 503:../Includes/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 504:../Includes/core_cm0plus.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 505:../Includes/core_cm0plus.h **** 
 506:../Includes/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 507:../Includes/core_cm0plus.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 508:../Includes/core_cm0plus.h **** 
 509:../Includes/core_cm0plus.h **** /* SysTick Reload Register Definitions */
 510:../Includes/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 511:../Includes/core_cm0plus.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 512:../Includes/core_cm0plus.h **** 
 513:../Includes/core_cm0plus.h **** /* SysTick Current Register Definitions */
 514:../Includes/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 515:../Includes/core_cm0plus.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 516:../Includes/core_cm0plus.h **** 
 517:../Includes/core_cm0plus.h **** /* SysTick Calibration Register Definitions */
 518:../Includes/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 519:../Includes/core_cm0plus.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 520:../Includes/core_cm0plus.h **** 
 521:../Includes/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 522:../Includes/core_cm0plus.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 523:../Includes/core_cm0plus.h **** 
 524:../Includes/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 525:../Includes/core_cm0plus.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 526:../Includes/core_cm0plus.h **** 
 527:../Includes/core_cm0plus.h **** /*@} end of group CMSIS_SysTick */
 528:../Includes/core_cm0plus.h **** 
 529:../Includes/core_cm0plus.h **** #if (__MPU_PRESENT == 1)
 530:../Includes/core_cm0plus.h **** /** \ingroup  CMSIS_core_register
 531:../Includes/core_cm0plus.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
 532:../Includes/core_cm0plus.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
 533:../Includes/core_cm0plus.h ****   @{
 534:../Includes/core_cm0plus.h ****  */
 535:../Includes/core_cm0plus.h **** 
 536:../Includes/core_cm0plus.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
 537:../Includes/core_cm0plus.h ****  */
 538:../Includes/core_cm0plus.h **** typedef struct
 539:../Includes/core_cm0plus.h **** {
 540:../Includes/core_cm0plus.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
 541:../Includes/core_cm0plus.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
 542:../Includes/core_cm0plus.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
 543:../Includes/core_cm0plus.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
 544:../Includes/core_cm0plus.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
 545:../Includes/core_cm0plus.h **** } MPU_Type;
 546:../Includes/core_cm0plus.h **** 
 547:../Includes/core_cm0plus.h **** /* MPU Type Register */
 548:../Includes/core_cm0plus.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 549:../Includes/core_cm0plus.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 550:../Includes/core_cm0plus.h **** 
 551:../Includes/core_cm0plus.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 552:../Includes/core_cm0plus.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 553:../Includes/core_cm0plus.h **** 
 554:../Includes/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 555:../Includes/core_cm0plus.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
 556:../Includes/core_cm0plus.h **** 
 557:../Includes/core_cm0plus.h **** /* MPU Control Register */
 558:../Includes/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 559:../Includes/core_cm0plus.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 560:../Includes/core_cm0plus.h **** 
 561:../Includes/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 562:../Includes/core_cm0plus.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 563:../Includes/core_cm0plus.h **** 
 564:../Includes/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 565:../Includes/core_cm0plus.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
 566:../Includes/core_cm0plus.h **** 
 567:../Includes/core_cm0plus.h **** /* MPU Region Number Register */
 568:../Includes/core_cm0plus.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 569:../Includes/core_cm0plus.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
 570:../Includes/core_cm0plus.h **** 
 571:../Includes/core_cm0plus.h **** /* MPU Region Base Address Register */
 572:../Includes/core_cm0plus.h **** #define MPU_RBAR_ADDR_Pos                   8                                             /*!< MPU 
 573:../Includes/core_cm0plus.h **** #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU 
 574:../Includes/core_cm0plus.h **** 
 575:../Includes/core_cm0plus.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 576:../Includes/core_cm0plus.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 577:../Includes/core_cm0plus.h **** 
 578:../Includes/core_cm0plus.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 579:../Includes/core_cm0plus.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
 580:../Includes/core_cm0plus.h **** 
 581:../Includes/core_cm0plus.h **** /* MPU Region Attribute and Size Register */
 582:../Includes/core_cm0plus.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
 583:../Includes/core_cm0plus.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
 584:../Includes/core_cm0plus.h **** 
 585:../Includes/core_cm0plus.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:../Includes/core_cm0plus.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:../Includes/core_cm0plus.h **** 
 588:../Includes/core_cm0plus.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:../Includes/core_cm0plus.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
 590:../Includes/core_cm0plus.h **** 
 591:../Includes/core_cm0plus.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:../Includes/core_cm0plus.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
 593:../Includes/core_cm0plus.h **** 
 594:../Includes/core_cm0plus.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:../Includes/core_cm0plus.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
 596:../Includes/core_cm0plus.h **** 
 597:../Includes/core_cm0plus.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:../Includes/core_cm0plus.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
 599:../Includes/core_cm0plus.h **** 
 600:../Includes/core_cm0plus.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:../Includes/core_cm0plus.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
 602:../Includes/core_cm0plus.h **** 
 603:../Includes/core_cm0plus.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:../Includes/core_cm0plus.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:../Includes/core_cm0plus.h **** 
 606:../Includes/core_cm0plus.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:../Includes/core_cm0plus.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:../Includes/core_cm0plus.h **** 
 609:../Includes/core_cm0plus.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
 610:../Includes/core_cm0plus.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
 611:../Includes/core_cm0plus.h **** 
 612:../Includes/core_cm0plus.h **** /*@} end of group CMSIS_MPU */
 613:../Includes/core_cm0plus.h **** #endif
 614:../Includes/core_cm0plus.h **** 
 615:../Includes/core_cm0plus.h **** 
 616:../Includes/core_cm0plus.h **** /** \ingroup  CMSIS_core_register
 617:../Includes/core_cm0plus.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
 618:../Includes/core_cm0plus.h ****     \brief      Cortex-M0+ Core Debug Registers (DCB registers, SHCSR, and DFSR)
 619:../Includes/core_cm0plus.h ****                 are only accessible over DAP and not via processor. Therefore
 620:../Includes/core_cm0plus.h ****                 they are not covered by the Cortex-M0 header file.
 621:../Includes/core_cm0plus.h ****   @{
 622:../Includes/core_cm0plus.h ****  */
 623:../Includes/core_cm0plus.h **** /*@} end of group CMSIS_CoreDebug */
 624:../Includes/core_cm0plus.h **** 
 625:../Includes/core_cm0plus.h **** 
 626:../Includes/core_cm0plus.h **** /** \ingroup    CMSIS_core_register
 627:../Includes/core_cm0plus.h ****     \defgroup   CMSIS_core_base     Core Definitions
 628:../Includes/core_cm0plus.h ****     \brief      Definitions for base addresses, unions, and structures.
 629:../Includes/core_cm0plus.h ****   @{
 630:../Includes/core_cm0plus.h ****  */
 631:../Includes/core_cm0plus.h **** 
 632:../Includes/core_cm0plus.h **** /* Memory mapping of Cortex-M0+ Hardware */
 633:../Includes/core_cm0plus.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
 634:../Includes/core_cm0plus.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
 635:../Includes/core_cm0plus.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
 636:../Includes/core_cm0plus.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
 637:../Includes/core_cm0plus.h **** 
 638:../Includes/core_cm0plus.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
 639:../Includes/core_cm0plus.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
 640:../Includes/core_cm0plus.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
 641:../Includes/core_cm0plus.h **** 
 642:../Includes/core_cm0plus.h **** #if (__MPU_PRESENT == 1)
 643:../Includes/core_cm0plus.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
 644:../Includes/core_cm0plus.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
 645:../Includes/core_cm0plus.h **** #endif
 646:../Includes/core_cm0plus.h **** 
 647:../Includes/core_cm0plus.h **** /*@} */
 648:../Includes/core_cm0plus.h **** 
 649:../Includes/core_cm0plus.h **** 
 650:../Includes/core_cm0plus.h **** 
 651:../Includes/core_cm0plus.h **** /*******************************************************************************
 652:../Includes/core_cm0plus.h ****  *                Hardware Abstraction Layer
 653:../Includes/core_cm0plus.h ****   Core Function Interface contains:
 654:../Includes/core_cm0plus.h ****   - Core NVIC Functions
 655:../Includes/core_cm0plus.h ****   - Core SysTick Functions
 656:../Includes/core_cm0plus.h ****   - Core Register Access Functions
 657:../Includes/core_cm0plus.h ****  ******************************************************************************/
 658:../Includes/core_cm0plus.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
 659:../Includes/core_cm0plus.h **** */
 660:../Includes/core_cm0plus.h **** 
 661:../Includes/core_cm0plus.h **** 
 662:../Includes/core_cm0plus.h **** 
 663:../Includes/core_cm0plus.h **** /* ##########################   NVIC functions  #################################### */
 664:../Includes/core_cm0plus.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 665:../Includes/core_cm0plus.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
 666:../Includes/core_cm0plus.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
 667:../Includes/core_cm0plus.h ****     @{
 668:../Includes/core_cm0plus.h ****  */
 669:../Includes/core_cm0plus.h **** 
 670:../Includes/core_cm0plus.h **** /* Interrupt Priorities are WORD accessible only under ARMv6M                   */
 671:../Includes/core_cm0plus.h **** /* The following MACROS handle generation of the register offset and byte masks */
 672:../Includes/core_cm0plus.h **** #define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
 673:../Includes/core_cm0plus.h **** #define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
 674:../Includes/core_cm0plus.h **** #define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
 675:../Includes/core_cm0plus.h **** 
 676:../Includes/core_cm0plus.h **** 
 677:../Includes/core_cm0plus.h **** /** \brief  Enable External Interrupt
 678:../Includes/core_cm0plus.h **** 
 679:../Includes/core_cm0plus.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
 680:../Includes/core_cm0plus.h **** 
 681:../Includes/core_cm0plus.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
 682:../Includes/core_cm0plus.h ****  */
 683:../Includes/core_cm0plus.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
 684:../Includes/core_cm0plus.h **** {
  25              		.loc 1 684 0
  26              		.cfi_startproc
  27 0000 80B5     		push	{r7, lr}
  28              		.cfi_def_cfa_offset 8
  29              		.cfi_offset 7, -8
  30              		.cfi_offset 14, -4
  31 0002 82B0     		sub	sp, sp, #8
  32              		.cfi_def_cfa_offset 16
  33 0004 00AF     		add	r7, sp, #0
  34              		.cfi_def_cfa_register 7
  35 0006 021C     		mov	r2, r0
  36 0008 FB1D     		add	r3, r7, #7
  37 000a 1A70     		strb	r2, [r3]
 685:../Includes/core_cm0plus.h ****   NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
  38              		.loc 1 685 0
  39 000c 064B     		ldr	r3, .L2
  40 000e FA1D     		add	r2, r7, #7
  41 0010 1278     		ldrb	r2, [r2]
  42 0012 111C     		mov	r1, r2
  43 0014 1F22     		mov	r2, #31
  44 0016 0A40     		and	r2, r1
  45 0018 0121     		mov	r1, #1
  46 001a 081C     		mov	r0, r1
  47 001c 9040     		lsl	r0, r0, r2
  48 001e 021C     		mov	r2, r0
  49 0020 1A60     		str	r2, [r3]
 686:../Includes/core_cm0plus.h **** }
  50              		.loc 1 686 0
  51 0022 BD46     		mov	sp, r7
  52 0024 02B0     		add	sp, sp, #8
  53              		@ sp needed
  54 0026 80BD     		pop	{r7, pc}
  55              	.L3:
  56              		.align	2
  57              	.L2:
  58 0028 00E100E0 		.word	-536813312
  59              		.cfi_endproc
  60              	.LFE25:
  62              		.section	.rodata
  63              		.align	2
  64              	.LC0:
  65 0000 2E2E2F53 		.ascii	"../Sources/drivers/port/port.h\000"
  65      6F757263 
  65      65732F64 
  65      72697665 
  65      72732F70 
  66 001f 00       		.align	2
  67              	.LC3:
  68 0020 62617365 		.ascii	"base\000"
  68      00
  69              		.section	.text.PORT_Init,"ax",%progbits
  70              		.align	2
  71              		.code	16
  72              		.thumb_func
  74              	PORT_Init:
  75              	.LFB39:
  76              		.file 2 "../Sources/drivers/port/port.h"
   1:../Sources/drivers/port/port.h **** /***************************************************************************************
   2:../Sources/drivers/port/port.h ****  * M�dulo      : port.h
   3:../Sources/drivers/port/port.h ****  * Revis�o     : 1.0
   4:../Sources/drivers/port/port.h ****  * Data        : 09/02/2023
   5:../Sources/drivers/port/port.h ****  * Descri��o   : Arquivo com implementa��es dos M�dulos PORT da Familia Kinetis KL05.
   6:../Sources/drivers/port/port.h ****  * Coment�rios : Nenhum.
   7:../Sources/drivers/port/port.h ****  * Autor(es)   : Matheus Leitzke Pinto
   8:../Sources/drivers/port/port.h ****  ***************************************************************************************/
   9:../Sources/drivers/port/port.h **** 
  10:../Sources/drivers/port/port.h **** #ifndef PORT_DRV_H_
  11:../Sources/drivers/port/port.h **** #define PORT_DRV_H_
  12:../Sources/drivers/port/port.h **** 
  13:../Sources/drivers/port/port.h **** /*ARQUIVOS DE CABE�ALHO*/
  14:../Sources/drivers/port/port.h **** /*=======================================================================================*/
  15:../Sources/drivers/port/port.h **** 
  16:../Sources/drivers/port/port.h **** #include "drivers/common_driver.h"
  17:../Sources/drivers/port/port.h **** 
  18:../Sources/drivers/port/port.h **** /*FIM: ARQUIVOS DE CABE�ALHO*/
  19:../Sources/drivers/port/port.h **** /*=======================================================================================*/
  20:../Sources/drivers/port/port.h **** 
  21:../Sources/drivers/port/port.h **** /*TIPOS ENUMERADOS*/
  22:../Sources/drivers/port/port.h **** /*=======================================================================================*/
  23:../Sources/drivers/port/port.h **** 
  24:../Sources/drivers/port/port.h **** /*Poss�veis alternativas de multiplexa��o dos pinos das PORTs*/
  25:../Sources/drivers/port/port.h **** typedef enum{
  26:../Sources/drivers/port/port.h **** 	PORT_MUX_ALT0 		= 0x0u,
  27:../Sources/drivers/port/port.h **** 	PORT_MUX_ALT1 		= 0x1u,
  28:../Sources/drivers/port/port.h **** 	PORT_MUX_ALT2 		= 0x2u,
  29:../Sources/drivers/port/port.h **** 	PORT_MUX_ALT3 		= 0x3u,
  30:../Sources/drivers/port/port.h **** 	PORT_MUX_DISABLE 	= PORT_MUX_ALT0
  31:../Sources/drivers/port/port.h **** }portMux_t;
  32:../Sources/drivers/port/port.h **** 
  33:../Sources/drivers/port/port.h **** /*Poss�veis alternativas de interrup��o dos pinos das PORTs*/
  34:../Sources/drivers/port/port.h **** typedef enum{
  35:../Sources/drivers/port/port.h **** 	PORT_IRQ_DISABLE 		 	 = 0x0U,
  36:../Sources/drivers/port/port.h **** 	PORT_IRQ_DMA_ON_RISING_EDGE  = 0x1U,
  37:../Sources/drivers/port/port.h **** 	PORT_IRQ_DMA_ON_FALLING_EDGE = 0x2U,
  38:../Sources/drivers/port/port.h **** 	PORT_IRQ_DMA_ON_EITHER_EDGE  = 0x3U,
  39:../Sources/drivers/port/port.h **** 	PORT_IRQ_ON_lOW_LEVEL		 = 0x8U,
  40:../Sources/drivers/port/port.h **** 	PORT_IRQ_ON_RISING_EDGE 	 = 0x9U,
  41:../Sources/drivers/port/port.h **** 	PORT_IRQ_ON_FALLING_EDGE 	 = 0xAU,
  42:../Sources/drivers/port/port.h **** 	PORT_IRQ_ON_EITHER_EDGE 	 = 0xBU,
  43:../Sources/drivers/port/port.h **** 	PORT_IRQ_ON_HIGH_LEVEL 	 	 = 0xCU
  44:../Sources/drivers/port/port.h **** }portIRQ_t;
  45:../Sources/drivers/port/port.h **** 
  46:../Sources/drivers/port/port.h **** /*FIM: TIPOS ENUMERADOS*/
  47:../Sources/drivers/port/port.h **** /*=======================================================================================*/
  48:../Sources/drivers/port/port.h **** 
  49:../Sources/drivers/port/port.h **** /*PROTOTIPOS - FUN��ES P�BLICAS*/
  50:../Sources/drivers/port/port.h **** /*=======================================================================================*/
  51:../Sources/drivers/port/port.h **** 
  52:../Sources/drivers/port/port.h **** /**********************************************************************
  53:../Sources/drivers/port/port.h ****  * Fun��o		:	PORT_IRQEnable
  54:../Sources/drivers/port/port.h ****  *
  55:../Sources/drivers/port/port.h ****  * Descri��o	:   Habilita a gera��o de interrup��o pelo pino de
  56:../Sources/drivers/port/port.h ****  * 					um m�dulo PORT.
  57:../Sources/drivers/port/port.h ****  *
  58:../Sources/drivers/port/port.h ****  * Entradas		:   *base - registrador base do perif�rico PORT.
  59:../Sources/drivers/port/port.h ****  *                  pin	- numera��o do pino;
  60:../Sources/drivers/port/port.h ****  * 					irq - uma das alternativas de interrup��o do pino.
  61:../Sources/drivers/port/port.h ****  *
  62:../Sources/drivers/port/port.h ****  * Sa�das		:  Nenhuma.
  63:../Sources/drivers/port/port.h ****  *
  64:../Sources/drivers/port/port.h ****  * Coment�rios 	:  Nenhum.
  65:../Sources/drivers/port/port.h ****  * ********************************************************************/
  66:../Sources/drivers/port/port.h **** void PORT_IRQEnable(PORT_Type *base, uint8_t pin, portIRQ_t irq);
  67:../Sources/drivers/port/port.h **** 
  68:../Sources/drivers/port/port.h **** /**********************************************************************
  69:../Sources/drivers/port/port.h ****  * Fun��o		:	PORT_GetIRQFlag
  70:../Sources/drivers/port/port.h ****  *
  71:../Sources/drivers/port/port.h ****  * Descri��o	:   Retorna se a flag de interrup��o de pino do PORT foi setada.
  72:../Sources/drivers/port/port.h ****  *
  73:../Sources/drivers/port/port.h ****  * Entradas		:   *base - registrador base do perif�rico PORT.
  74:../Sources/drivers/port/port.h ****  *                  pin	- numera��o do pino;
  75:../Sources/drivers/port/port.h ****  *
  76:../Sources/drivers/port/port.h ****  * Sa�das		:  0 - se flag n�o setada;
  77:../Sources/drivers/port/port.h ****  *                 !0 - se flag setada.
  78:../Sources/drivers/port/port.h ****  *
  79:../Sources/drivers/port/port.h ****  * Coment�rios 	:  Nenhum.
  80:../Sources/drivers/port/port.h ****  * ********************************************************************/
  81:../Sources/drivers/port/port.h **** uint32_t PORT_GetIRQFlag(PORT_Type *base, uint8_t pin);
  82:../Sources/drivers/port/port.h **** 
  83:../Sources/drivers/port/port.h **** /**********************************************************************
  84:../Sources/drivers/port/port.h ****  * Fun��o		:	PORT_ClearIRQFlag
  85:../Sources/drivers/port/port.h ****  *
  86:../Sources/drivers/port/port.h ****  * Descri��o	:   Limpa flag de interrup��o do pino de PORT.
  87:../Sources/drivers/port/port.h ****  *
  88:../Sources/drivers/port/port.h ****  * Entradas		:   *base - registrador base do perif�rico PORT.
  89:../Sources/drivers/port/port.h ****  *                  pin	- numera��o do pino;
  90:../Sources/drivers/port/port.h ****  *
  91:../Sources/drivers/port/port.h ****  * Sa�das		:  Nenhuma.
  92:../Sources/drivers/port/port.h ****  *
  93:../Sources/drivers/port/port.h ****  * Coment�rios 	:  Nenhum.
  94:../Sources/drivers/port/port.h ****  * ********************************************************************/
  95:../Sources/drivers/port/port.h **** void PORT_ClearIRQFlag(PORT_Type *base, uint8_t pin);
  96:../Sources/drivers/port/port.h **** 
  97:../Sources/drivers/port/port.h **** /*FIM: PROTOTIPOS - FUN��ES P�BLICAS*/
  98:../Sources/drivers/port/port.h **** /*=======================================================================================*/
  99:../Sources/drivers/port/port.h **** 
 100:../Sources/drivers/port/port.h **** 
 101:../Sources/drivers/port/port.h **** /*PROTOTIPOS - FUN��ES INLINE*/
 102:../Sources/drivers/port/port.h **** /*=======================================================================================*/
 103:../Sources/drivers/port/port.h **** 
 104:../Sources/drivers/port/port.h **** static inline void PORT_Init(PORT_Type* base);
 105:../Sources/drivers/port/port.h **** static inline void PORT_SetMux(PORT_Type *base, uint8_t pin, portMux_t mux);
 106:../Sources/drivers/port/port.h **** static inline void PORT_PullEnable(PORT_Type *base, uint8_t pin);
 107:../Sources/drivers/port/port.h **** static inline void PORT_HighStrengthEnable(PORT_Type *base, uint8_t pin);
 108:../Sources/drivers/port/port.h **** 
 109:../Sources/drivers/port/port.h **** /*FIM: PROTOTIPOS - FUN��ES INLINE*/
 110:../Sources/drivers/port/port.h **** /*=======================================================================================*/
 111:../Sources/drivers/port/port.h **** 
 112:../Sources/drivers/port/port.h **** /*FUN��ES INLINE*/
 113:../Sources/drivers/port/port.h **** /*=======================================================================================*/
 114:../Sources/drivers/port/port.h **** 
 115:../Sources/drivers/port/port.h **** /**********************************************************************
 116:../Sources/drivers/port/port.h ****  * Fun��o		:	PORT_Init
 117:../Sources/drivers/port/port.h ****  *
 118:../Sources/drivers/port/port.h ****  * Descri��o	:   Deve ser chamado antes de utilizar um m�dulo PORT.
 119:../Sources/drivers/port/port.h ****  *
 120:../Sources/drivers/port/port.h ****  * Entradas		:   *base - registrador base do perif�rico PORT.
 121:../Sources/drivers/port/port.h ****  *
 122:../Sources/drivers/port/port.h ****  * Sa�das 		:   Nenhuma.
 123:../Sources/drivers/port/port.h ****  *
 124:../Sources/drivers/port/port.h ****  * Coment�rios 	: 	Nenhum.
 125:../Sources/drivers/port/port.h ****  * ********************************************************************/
 126:../Sources/drivers/port/port.h **** static inline void PORT_Init(PORT_Type* base)
 127:../Sources/drivers/port/port.h **** {
  77              		.loc 2 127 0
  78              		.cfi_startproc
  79 0000 80B5     		push	{r7, lr}
  80              		.cfi_def_cfa_offset 8
  81              		.cfi_offset 7, -8
  82              		.cfi_offset 14, -4
  83 0002 82B0     		sub	sp, sp, #8
  84              		.cfi_def_cfa_offset 16
  85 0004 00AF     		add	r7, sp, #0
  86              		.cfi_def_cfa_register 7
  87 0006 7860     		str	r0, [r7, #4]
 128:../Sources/drivers/port/port.h **** 	assert(base);
  88              		.loc 2 128 0
  89 0008 7B68     		ldr	r3, [r7, #4]
  90 000a 002B     		cmp	r3, #0
  91 000c 06D1     		bne	.L5
  92              		.loc 2 128 0 is_stmt 0 discriminator 1
  93 000e 1949     		ldr	r1, .L8
  94 0010 194A     		ldr	r2, .L8+4
  95 0012 1A4B     		ldr	r3, .L8+8
  96 0014 081C     		mov	r0, r1
  97 0016 8021     		mov	r1, #128
  98 0018 FFF7FEFF 		bl	__assert_func
  99              	.L5:
 129:../Sources/drivers/port/port.h **** 
 130:../Sources/drivers/port/port.h **** 	if( PORTA == base )
 100              		.loc 2 130 0 is_stmt 1
 101 001c 7A68     		ldr	r2, [r7, #4]
 102 001e 184B     		ldr	r3, .L8+12
 103 0020 9A42     		cmp	r2, r3
 104 0022 09D1     		bne	.L6
 131:../Sources/drivers/port/port.h **** 	{
 132:../Sources/drivers/port/port.h **** 		   SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK; /* Ativa o clock do perif�rico PORTA*/
 105              		.loc 2 132 0
 106 0024 174A     		ldr	r2, .L8+16
 107 0026 1749     		ldr	r1, .L8+16
 108 0028 174B     		ldr	r3, .L8+20
 109 002a CB58     		ldr	r3, [r1, r3]
 110 002c 8021     		mov	r1, #128
 111 002e 8900     		lsl	r1, r1, #2
 112 0030 1943     		orr	r1, r3
 113 0032 154B     		ldr	r3, .L8+20
 114 0034 D150     		str	r1, [r2, r3]
 115 0036 19E0     		b	.L4
 116              	.L6:
 133:../Sources/drivers/port/port.h **** 	}
 134:../Sources/drivers/port/port.h **** 	else
 135:../Sources/drivers/port/port.h **** 	{
 136:../Sources/drivers/port/port.h **** 		if( PORTB == base )
 117              		.loc 2 136 0
 118 0038 7A68     		ldr	r2, [r7, #4]
 119 003a 144B     		ldr	r3, .L8+24
 120 003c 9A42     		cmp	r2, r3
 121 003e 15D1     		bne	.L4
 137:../Sources/drivers/port/port.h **** 		{
 138:../Sources/drivers/port/port.h **** 			SIM_SCGC5 |= SIM_SCGC5_PORTB_MASK; /* Ativa o clock do perif�rico PORTB*/
 122              		.loc 2 138 0
 123 0040 104A     		ldr	r2, .L8+16
 124 0042 1049     		ldr	r1, .L8+16
 125 0044 104B     		ldr	r3, .L8+20
 126 0046 CB58     		ldr	r3, [r1, r3]
 127 0048 8021     		mov	r1, #128
 128 004a C900     		lsl	r1, r1, #3
 129 004c 1943     		orr	r1, r3
 130 004e 0E4B     		ldr	r3, .L8+20
 131 0050 D150     		str	r1, [r2, r3]
 139:../Sources/drivers/port/port.h **** 			/*Desabilita NMI em PTB5 e habilita como GPIO*/
 140:../Sources/drivers/port/port.h **** 			base->PCR[5] &= ~PORT_PCR_MUX_MASK; /*Limpa configura��es anteriores*/
 132              		.loc 2 140 0
 133 0052 7B68     		ldr	r3, [r7, #4]
 134 0054 5A69     		ldr	r2, [r3, #20]
 135 0056 0E4B     		ldr	r3, .L8+28
 136 0058 1A40     		and	r2, r3
 137 005a 7B68     		ldr	r3, [r7, #4]
 138 005c 5A61     		str	r2, [r3, #20]
 141:../Sources/drivers/port/port.h **** 			base->PCR[5] |= PORT_PCR_MUX(PORT_MUX_ALT1);
 139              		.loc 2 141 0
 140 005e 7B68     		ldr	r3, [r7, #4]
 141 0060 5B69     		ldr	r3, [r3, #20]
 142 0062 8022     		mov	r2, #128
 143 0064 5200     		lsl	r2, r2, #1
 144 0066 1A43     		orr	r2, r3
 145 0068 7B68     		ldr	r3, [r7, #4]
 146 006a 5A61     		str	r2, [r3, #20]
 147              	.L4:
 142:../Sources/drivers/port/port.h **** 		}
 143:../Sources/drivers/port/port.h **** 	}
 144:../Sources/drivers/port/port.h **** }
 148              		.loc 2 144 0
 149 006c BD46     		mov	sp, r7
 150 006e 02B0     		add	sp, sp, #8
 151              		@ sp needed
 152 0070 80BD     		pop	{r7, pc}
 153              	.L9:
 154 0072 C046     		.align	2
 155              	.L8:
 156 0074 00000000 		.word	.LC0
 157 0078 00000000 		.word	__func__.5655
 158 007c 20000000 		.word	.LC3
 159 0080 00900440 		.word	1074040832
 160 0084 00700440 		.word	1074032640
 161 0088 38100000 		.word	4152
 162 008c 00A00440 		.word	1074044928
 163 0090 FFF8FFFF 		.word	-1793
 164              		.cfi_endproc
 165              	.LFE39:
 167              		.section	.rodata
 168 0025 000000   		.align	2
 169              	.LC5:
 170 0028 2E2E2F53 		.ascii	"../Sources/drivers/gpio/gpio.h\000"
 170      6F757263 
 170      65732F64 
 170      72697665 
 170      72732F67 
 171 0047 00       		.align	2
 172              	.LC9:
 173 0048 28207069 		.ascii	"( pin >= 0 ) && ( pin < 32 )\000"
 173      6E203E3D 
 173      20302029 
 173      20262620 
 173      28207069 
 174              		.section	.text.GPIO_TogglePin,"ax",%progbits
 175              		.align	2
 176              		.code	16
 177              		.thumb_func
 179              	GPIO_TogglePin:
 180              	.LFB45:
 181              		.file 3 "../Sources/drivers/gpio/gpio.h"
   1:../Sources/drivers/gpio/gpio.h **** /***************************************************************************************
   2:../Sources/drivers/gpio/gpio.h ****  * M�dulo      : gpio.h
   3:../Sources/drivers/gpio/gpio.h ****  * Revis�o     : 1.0
   4:../Sources/drivers/gpio/gpio.h ****  * Data        : 16/02/2023
   5:../Sources/drivers/gpio/gpio.h ****  * Descri��o   : Arquivo com implementa��es dos M�dulos GPIO da Familia Kinetis KL05.
   6:../Sources/drivers/gpio/gpio.h ****  * Coment�rios : Nenhum.
   7:../Sources/drivers/gpio/gpio.h ****  * Autor(es)   : Matheus Leitzke Pinto
   8:../Sources/drivers/gpio/gpio.h ****  ***************************************************************************************/
   9:../Sources/drivers/gpio/gpio.h **** 
  10:../Sources/drivers/gpio/gpio.h **** #ifndef GPIO_DRV_H_
  11:../Sources/drivers/gpio/gpio.h **** #define GPIO_DRV_H_
  12:../Sources/drivers/gpio/gpio.h **** 
  13:../Sources/drivers/gpio/gpio.h **** /*ARQUIVOS DE CABE�ALHO*/
  14:../Sources/drivers/gpio/gpio.h **** /*=======================================================================================*/
  15:../Sources/drivers/gpio/gpio.h **** 
  16:../Sources/drivers/gpio/gpio.h **** #include "drivers/common_driver.h"
  17:../Sources/drivers/gpio/gpio.h **** #include "drivers/port/port.h"
  18:../Sources/drivers/gpio/gpio.h **** 
  19:../Sources/drivers/gpio/gpio.h **** /*FIM: ARQUIVOS DE CABE�ALHO*/
  20:../Sources/drivers/gpio/gpio.h **** /*=======================================================================================*/
  21:../Sources/drivers/gpio/gpio.h **** 
  22:../Sources/drivers/gpio/gpio.h **** /*PROT�TIPOS - FUN��ES INLINE*/
  23:../Sources/drivers/gpio/gpio.h **** /*=======================================================================================*/
  24:../Sources/drivers/gpio/gpio.h **** 
  25:../Sources/drivers/gpio/gpio.h **** static inline void GPIO_SetPin(GPIO_Type *base, uint8_t pin);
  26:../Sources/drivers/gpio/gpio.h **** static inline void GPIO_ClearPin(GPIO_Type *base, uint8_t pin);
  27:../Sources/drivers/gpio/gpio.h **** static inline void GPIO_TogglePin(GPIO_Type *base, uint8_t pin);
  28:../Sources/drivers/gpio/gpio.h **** static inline void GPIO_WritePin(GPIO_Type *base, uint8_t pin, uint8_t value);
  29:../Sources/drivers/gpio/gpio.h **** static inline void GPIO_SetPinsMask(GPIO_Type *base, uint32_t mask);
  30:../Sources/drivers/gpio/gpio.h **** static inline void GPIO_ClearPinsMask(GPIO_Type *base, uint32_t mask);
  31:../Sources/drivers/gpio/gpio.h **** static inline uint8_t GPIO_ReadPin(GPIO_Type *base, uint8_t pin);
  32:../Sources/drivers/gpio/gpio.h **** 
  33:../Sources/drivers/gpio/gpio.h **** /*FIM: PROT�TIPOS - FUN��ES INLINE*/
  34:../Sources/drivers/gpio/gpio.h **** /*=======================================================================================*/
  35:../Sources/drivers/gpio/gpio.h **** 
  36:../Sources/drivers/gpio/gpio.h **** /*PROTOTIPOS - FUN��ES P�BLICAS*/
  37:../Sources/drivers/gpio/gpio.h **** /*=======================================================================================*/
  38:../Sources/drivers/gpio/gpio.h **** 
  39:../Sources/drivers/gpio/gpio.h **** /**********************************************************************
  40:../Sources/drivers/gpio/gpio.h ****  * Fun��o		:	GPIO_InitInputPin
  41:../Sources/drivers/gpio/gpio.h ****  *
  42:../Sources/drivers/gpio/gpio.h ****  * Descri��o	:   Inicializa pino de m�dulo GPIO como entrada.
  43:../Sources/drivers/gpio/gpio.h ****  *
  44:../Sources/drivers/gpio/gpio.h ****  * Entradas		:   *base - registrador base do perif�rico GPIO;
  45:../Sources/drivers/gpio/gpio.h ****  *                  pin   - numera��o do pino.
  46:../Sources/drivers/gpio/gpio.h ****  *
  47:../Sources/drivers/gpio/gpio.h ****  * Sa�das		:  	Nenhuma.
  48:../Sources/drivers/gpio/gpio.h ****  *
  49:../Sources/drivers/gpio/gpio.h ****  * Coment�rios 	: 	Essa fun��o tamb�m realiza a multiplexa��o do
  50:../Sources/drivers/gpio/gpio.h ****  *                  do pino do PORT relacionado ao GPIO.
  51:../Sources/drivers/gpio/gpio.h ****  * ********************************************************************/
  52:../Sources/drivers/gpio/gpio.h **** void GPIO_InitInputPin(GPIO_Type *base, uint8_t pin);
  53:../Sources/drivers/gpio/gpio.h **** 
  54:../Sources/drivers/gpio/gpio.h **** /**********************************************************************
  55:../Sources/drivers/gpio/gpio.h ****  * Fun��o		:	GPIO_InitOutputPin
  56:../Sources/drivers/gpio/gpio.h ****  *
  57:../Sources/drivers/gpio/gpio.h ****  * Descri��o	:   Inicializa pino de m�dulo GPIO como sa�da.
  58:../Sources/drivers/gpio/gpio.h ****  *
  59:../Sources/drivers/gpio/gpio.h ****  * Entradas		:   *base - registrador base do perif�rico GPIO;
  60:../Sources/drivers/gpio/gpio.h ****  *                  pin   - numera��o do pino;
  61:../Sources/drivers/gpio/gpio.h ****  *                  initVal - valor l�gico inicial do pino (0 ou !0).
  62:../Sources/drivers/gpio/gpio.h ****  *
  63:../Sources/drivers/gpio/gpio.h ****  * Sa�das		:  	Nenhuma.
  64:../Sources/drivers/gpio/gpio.h ****  *
  65:../Sources/drivers/gpio/gpio.h ****  * Coment�rios 	: 	Essa fun��o tamb�m realiza a multiplexa��o do
  66:../Sources/drivers/gpio/gpio.h ****  *                  do pino do PORT relacionado ao GPIO.
  67:../Sources/drivers/gpio/gpio.h ****  * ********************************************************************/
  68:../Sources/drivers/gpio/gpio.h **** void GPIO_InitOutputPin(GPIO_Type *base, uint8_t pin, uint8_t initVal);
  69:../Sources/drivers/gpio/gpio.h **** 
  70:../Sources/drivers/gpio/gpio.h **** /*FIM: PROTOTIPOS - FUN��ES P�BLICAS*/
  71:../Sources/drivers/gpio/gpio.h **** /*=======================================================================================*/
  72:../Sources/drivers/gpio/gpio.h **** 
  73:../Sources/drivers/gpio/gpio.h **** /*FUN��ES INLINE*/
  74:../Sources/drivers/gpio/gpio.h **** /*=======================================================================================*/
  75:../Sources/drivers/gpio/gpio.h **** 
  76:../Sources/drivers/gpio/gpio.h **** /**********************************************************************
  77:../Sources/drivers/gpio/gpio.h ****  * Fun��o		:	GPIO_SetPinValue
  78:../Sources/drivers/gpio/gpio.h ****  *
  79:../Sources/drivers/gpio/gpio.h ****  * Descri��o	:   Coloca o valor l�gico 1 no pino do m�dulo GPIO.
  80:../Sources/drivers/gpio/gpio.h ****  *
  81:../Sources/drivers/gpio/gpio.h ****  * Entradas		:   *base - registrador base do perif�rico GPIO;
  82:../Sources/drivers/gpio/gpio.h ****  *                  pin   - numera��o do pino.
  83:../Sources/drivers/gpio/gpio.h ****  *
  84:../Sources/drivers/gpio/gpio.h ****  * Sa�das		:  	Nenhuma.
  85:../Sources/drivers/gpio/gpio.h ****  *
  86:../Sources/drivers/gpio/gpio.h ****  * Coment�rios 	: 	Nenhum.
  87:../Sources/drivers/gpio/gpio.h ****  * ********************************************************************/
  88:../Sources/drivers/gpio/gpio.h **** static inline void GPIO_SetPin(GPIO_Type *base, uint8_t pin)
  89:../Sources/drivers/gpio/gpio.h **** {
  90:../Sources/drivers/gpio/gpio.h **** 	assert(base);
  91:../Sources/drivers/gpio/gpio.h **** 	assert( ( pin >= 0 ) && ( pin < 32 ) );
  92:../Sources/drivers/gpio/gpio.h **** 
  93:../Sources/drivers/gpio/gpio.h **** 	base->PSOR = (1 << pin);
  94:../Sources/drivers/gpio/gpio.h **** }
  95:../Sources/drivers/gpio/gpio.h **** 
  96:../Sources/drivers/gpio/gpio.h **** /**********************************************************************
  97:../Sources/drivers/gpio/gpio.h ****  * Fun��o		:	GPIO_ClearPinValue
  98:../Sources/drivers/gpio/gpio.h ****  *
  99:../Sources/drivers/gpio/gpio.h ****  * Descri��o	:   Coloca o valor l�gico 0 no pino do m�dulo GPIO.
 100:../Sources/drivers/gpio/gpio.h ****  *
 101:../Sources/drivers/gpio/gpio.h ****  * Entradas		:   *base - registrador base do perif�rico GPIO;
 102:../Sources/drivers/gpio/gpio.h ****  *                  pin   - numera��o do pino.
 103:../Sources/drivers/gpio/gpio.h ****  *
 104:../Sources/drivers/gpio/gpio.h ****  * Sa�das		:  	Nenhuma.
 105:../Sources/drivers/gpio/gpio.h ****  *
 106:../Sources/drivers/gpio/gpio.h ****  * Coment�rios 	: 	Nenhum.
 107:../Sources/drivers/gpio/gpio.h ****  * ********************************************************************/
 108:../Sources/drivers/gpio/gpio.h **** static inline void GPIO_ClearPin(GPIO_Type *base, uint8_t pin)
 109:../Sources/drivers/gpio/gpio.h **** {
 110:../Sources/drivers/gpio/gpio.h **** 	assert(base);
 111:../Sources/drivers/gpio/gpio.h **** 	assert( ( pin >= 0 ) && ( pin < 32 ) );
 112:../Sources/drivers/gpio/gpio.h **** 
 113:../Sources/drivers/gpio/gpio.h **** 	base->PCOR = (1 << pin);
 114:../Sources/drivers/gpio/gpio.h **** }
 115:../Sources/drivers/gpio/gpio.h **** 
 116:../Sources/drivers/gpio/gpio.h **** /**********************************************************************
 117:../Sources/drivers/gpio/gpio.h ****  * Fun��o		:	GPIO_TogglePin
 118:../Sources/drivers/gpio/gpio.h ****  *
 119:../Sources/drivers/gpio/gpio.h ****  * Descri��o	:   Inverte o valor l�gico no pino do m�dulo GPIO.
 120:../Sources/drivers/gpio/gpio.h ****  *
 121:../Sources/drivers/gpio/gpio.h ****  * Entradas		:   *base - registrador base do perif�rico GPIO;
 122:../Sources/drivers/gpio/gpio.h ****  *                  pin   - numera��o do pino.
 123:../Sources/drivers/gpio/gpio.h ****  *
 124:../Sources/drivers/gpio/gpio.h ****  * Sa�das		:  	Nenhuma.
 125:../Sources/drivers/gpio/gpio.h ****  *
 126:../Sources/drivers/gpio/gpio.h ****  * Coment�rios 	: 	Nenhum.
 127:../Sources/drivers/gpio/gpio.h ****  * ********************************************************************/
 128:../Sources/drivers/gpio/gpio.h **** static inline void GPIO_TogglePin(GPIO_Type *base, uint8_t pin)
 129:../Sources/drivers/gpio/gpio.h **** {
 182              		.loc 3 129 0
 183              		.cfi_startproc
 184 0000 80B5     		push	{r7, lr}
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 7, -8
 187              		.cfi_offset 14, -4
 188 0002 82B0     		sub	sp, sp, #8
 189              		.cfi_def_cfa_offset 16
 190 0004 00AF     		add	r7, sp, #0
 191              		.cfi_def_cfa_register 7
 192 0006 7860     		str	r0, [r7, #4]
 193 0008 0A1C     		mov	r2, r1
 194 000a FB1C     		add	r3, r7, #3
 195 000c 1A70     		strb	r2, [r3]
 130:../Sources/drivers/gpio/gpio.h **** 	assert(base);
 196              		.loc 3 130 0
 197 000e 7B68     		ldr	r3, [r7, #4]
 198 0010 002B     		cmp	r3, #0
 199 0012 06D1     		bne	.L11
 200              		.loc 3 130 0 is_stmt 0 discriminator 1
 201 0014 0E49     		ldr	r1, .L13
 202 0016 0F4A     		ldr	r2, .L13+4
 203 0018 0F4B     		ldr	r3, .L13+8
 204 001a 081C     		mov	r0, r1
 205 001c 8221     		mov	r1, #130
 206 001e FFF7FEFF 		bl	__assert_func
 207              	.L11:
 131:../Sources/drivers/gpio/gpio.h **** 	assert( ( pin >= 0 ) && ( pin < 32 ) );
 208              		.loc 3 131 0 is_stmt 1
 209 0022 FB1C     		add	r3, r7, #3
 210 0024 1B78     		ldrb	r3, [r3]
 211 0026 1F2B     		cmp	r3, #31
 212 0028 06D9     		bls	.L12
 213              		.loc 3 131 0 is_stmt 0 discriminator 1
 214 002a 0949     		ldr	r1, .L13
 215 002c 094A     		ldr	r2, .L13+4
 216 002e 0B4B     		ldr	r3, .L13+12
 217 0030 081C     		mov	r0, r1
 218 0032 8321     		mov	r1, #131
 219 0034 FFF7FEFF 		bl	__assert_func
 220              	.L12:
 132:../Sources/drivers/gpio/gpio.h **** 
 133:../Sources/drivers/gpio/gpio.h **** 	base->PTOR = (1 << pin);
 221              		.loc 3 133 0 is_stmt 1
 222 0038 FB1C     		add	r3, r7, #3
 223 003a 1B78     		ldrb	r3, [r3]
 224 003c 0122     		mov	r2, #1
 225 003e 111C     		mov	r1, r2
 226 0040 9940     		lsl	r1, r1, r3
 227 0042 0B1C     		mov	r3, r1
 228 0044 1A1C     		mov	r2, r3
 229 0046 7B68     		ldr	r3, [r7, #4]
 230 0048 DA60     		str	r2, [r3, #12]
 134:../Sources/drivers/gpio/gpio.h **** }
 231              		.loc 3 134 0
 232 004a BD46     		mov	sp, r7
 233 004c 02B0     		add	sp, sp, #8
 234              		@ sp needed
 235 004e 80BD     		pop	{r7, pc}
 236              	.L14:
 237              		.align	2
 238              	.L13:
 239 0050 28000000 		.word	.LC5
 240 0054 00000000 		.word	__func__.5715
 241 0058 20000000 		.word	.LC3
 242 005c 48000000 		.word	.LC9
 243              		.cfi_endproc
 244              	.LFE45:
 246              		.section	.rodata
 247 0065 000000   		.align	2
 248              	.LC11:
 249 0068 2E2E2F53 		.ascii	"../Sources/drivers/tpm/tpm.h\000"
 249      6F757263 
 249      65732F64 
 249      72697665 
 249      72732F74 
 250 0085 000000   		.section	.text.TPM_InitCounter,"ax",%progbits
 251              		.align	2
 252              		.code	16
 253              		.thumb_func
 255              	TPM_InitCounter:
 256              	.LFB50:
 257              		.file 4 "../Sources/drivers/tpm/tpm.h"
   1:../Sources/drivers/tpm/tpm.h **** /***************************************************************************************
   2:../Sources/drivers/tpm/tpm.h ****  * M�dulo      : tpm.h
   3:../Sources/drivers/tpm/tpm.h ****  *
   4:../Sources/drivers/tpm/tpm.h ****  * Revis�o     : 1.0
   5:../Sources/drivers/tpm/tpm.h ****  *
   6:../Sources/drivers/tpm/tpm.h ****  * Data        : 16/02/2022
   7:../Sources/drivers/tpm/tpm.h ****  *
   8:../Sources/drivers/tpm/tpm.h ****  * Descri��o   : Arquivo com implementa��es dos M�dulos Timer/PWM (TPM) da Familia Kinetis KL05.
   9:../Sources/drivers/tpm/tpm.h ****  *
  10:../Sources/drivers/tpm/tpm.h ****  * Coment�rios : Nenhum.
  11:../Sources/drivers/tpm/tpm.h ****  *
  12:../Sources/drivers/tpm/tpm.h ****  * Autor(es)   : Matheus Leitzke Pinto
  13:../Sources/drivers/tpm/tpm.h ****  ***************************************************************************************/
  14:../Sources/drivers/tpm/tpm.h **** 
  15:../Sources/drivers/tpm/tpm.h **** #ifndef TPM_DRV_H_
  16:../Sources/drivers/tpm/tpm.h **** #define TPM_DRV_H_
  17:../Sources/drivers/tpm/tpm.h **** 
  18:../Sources/drivers/tpm/tpm.h **** /*ARQUIVOS DE CABE�ALHO*/
  19:../Sources/drivers/tpm/tpm.h **** /*=======================================================================================*/
  20:../Sources/drivers/tpm/tpm.h **** 
  21:../Sources/drivers/tpm/tpm.h **** #include "drivers/common_driver.h"
  22:../Sources/drivers/tpm/tpm.h **** 
  23:../Sources/drivers/tpm/tpm.h **** /*FIM: ARQUIVOS DE CABE�ALHO*/
  24:../Sources/drivers/tpm/tpm.h **** /*=======================================================================================*/
  25:../Sources/drivers/tpm/tpm.h **** 
  26:../Sources/drivers/tpm/tpm.h **** /*TIPOS ENUMERADOS*/
  27:../Sources/drivers/tpm/tpm.h **** /*=======================================================================================*/
  28:../Sources/drivers/tpm/tpm.h **** 
  29:../Sources/drivers/tpm/tpm.h **** /*Poss�veis modos de opera��o dos m�dulos TPM*/
  30:../Sources/drivers/tpm/tpm.h **** typedef enum{
  31:../Sources/drivers/tpm/tpm.h **** 	TPM_OUT_COMPARE_MODE, 		/* Modo comparador de sa�da*/
  32:../Sources/drivers/tpm/tpm.h **** 	TPM_IN_COMPARE_MODE	,		/* Modo captura de entrada*/
  33:../Sources/drivers/tpm/tpm.h **** 	TPM_EDGE_PWM_MODE	,		/* Modo PWM alinhado a borda*/
  34:../Sources/drivers/tpm/tpm.h **** 	TPM_CENTER_PWM_MODE			/* Modo PWM alinhado ao centro */
  35:../Sources/drivers/tpm/tpm.h **** }tpmChMode_t;
  36:../Sources/drivers/tpm/tpm.h **** 
  37:../Sources/drivers/tpm/tpm.h **** /*Poss�veis configura��es do modos de opera��o dos m�dulos TPM*/
  38:../Sources/drivers/tpm/tpm.h **** typedef enum{
  39:../Sources/drivers/tpm/tpm.h **** 	TPM_OUT_TOGGLE_GONFIG		, 	/*Modo compara��o de sa�da: inverte l�gica de sa�da*/
  40:../Sources/drivers/tpm/tpm.h **** 	TPM_OUT_CLEAR_GONFIG		,  	/*Modo compara��o de sa�da: limpa sa�da*/
  41:../Sources/drivers/tpm/tpm.h **** 	TPM_OUT_SET_GONFIG			,  	/*Modo compara��o de sa�da: seta sa�da*/
  42:../Sources/drivers/tpm/tpm.h **** 	TPM_IN_RISING_EDGE_CONFIG	, 	/*Modo captura de entrada: borda de subida*/
  43:../Sources/drivers/tpm/tpm.h **** 	TPM_IN_FALLING_EDGE_CONFIG	, 	/*Modo captura de entrada: borda de descida*/
  44:../Sources/drivers/tpm/tpm.h **** 	TPM_IN_BOTH_EDGE_CONFIG		, 	/*Modo captura de entrada: borda de subida/descida*/
  45:../Sources/drivers/tpm/tpm.h **** 	TPM_PWM_HIGH_TRUE_CONFIG	,	/*Modos PWM: Pulso � o n�vel*/
  46:../Sources/drivers/tpm/tpm.h **** 	TPM_PWM_HIGH_LOW_CONFIG		,	/*Modos PWM: Pulso � o baixo*/
  47:../Sources/drivers/tpm/tpm.h **** }tpmChConfig_t;
  48:../Sources/drivers/tpm/tpm.h **** 
  49:../Sources/drivers/tpm/tpm.h **** /*Poss�veis valores de divis�es do prescaler dos m�dulos TPM*/
  50:../Sources/drivers/tpm/tpm.h **** typedef enum{
  51:../Sources/drivers/tpm/tpm.h **** 	TPM_PRESCALER_DIV_1		=	0x0, 	/*Prescaler do m�dulo TPM divide por 0*/
  52:../Sources/drivers/tpm/tpm.h **** 	TPM_PRESCALER_DIV_2		=	0x1,  	/*Prescaler do m�dulo TPM divide por 1*/
  53:../Sources/drivers/tpm/tpm.h **** 	TPM_PRESCALER_DIV_4		=	0x2,  	/*Prescaler do m�dulo TPM divide por 2*/
  54:../Sources/drivers/tpm/tpm.h **** 	TPM_PRESCALER_DIV_8		=	0x3,  	/*Prescaler do m�dulo TPM divide por 3*/
  55:../Sources/drivers/tpm/tpm.h **** 	TPM_PRESCALER_DIV_16	=	0x4,  	/*Prescaler do m�dulo TPM divide por 4*/
  56:../Sources/drivers/tpm/tpm.h **** 	TPM_PRESCALER_DIV_32	=	0x5,  	/*Prescaler do m�dulo TPM divide por 5*/
  57:../Sources/drivers/tpm/tpm.h **** 	TPM_PRESCALER_DIV_64	=	0x6,  	/*Prescaler do m�dulo TPM divide por 6*/
  58:../Sources/drivers/tpm/tpm.h **** 	TPM_PRESCALER_DIV_128	=	0x7,  	/*Prescaler do m�dulo TPM divide por 7*/
  59:../Sources/drivers/tpm/tpm.h **** }tpmPrescalerValues_t;
  60:../Sources/drivers/tpm/tpm.h **** 
  61:../Sources/drivers/tpm/tpm.h **** /*Poss�veis fontes de clock*/
  62:../Sources/drivers/tpm/tpm.h **** typedef enum{
  63:../Sources/drivers/tpm/tpm.h **** 	TPM_CNT_CLOCK_DISABLE = 0U,
  64:../Sources/drivers/tpm/tpm.h **** 	TPM_CNT_CLOCK_FLL = 1U,
  65:../Sources/drivers/tpm/tpm.h **** 	TPM_CNT_CLOCK_OSC = 2U,
  66:../Sources/drivers/tpm/tpm.h **** 	TPM_CNT_CLOCK_IRC = 3U
  67:../Sources/drivers/tpm/tpm.h **** }tpmClkSrc_t;
  68:../Sources/drivers/tpm/tpm.h **** 
  69:../Sources/drivers/tpm/tpm.h **** /*FIM: TIPOS ENUMERADOS*/
  70:../Sources/drivers/tpm/tpm.h **** /*=======================================================================================*/
  71:../Sources/drivers/tpm/tpm.h **** 
  72:../Sources/drivers/tpm/tpm.h **** /*PROT�TIPOS - FUN��ES INLINE*/
  73:../Sources/drivers/tpm/tpm.h **** /*=======================================================================================*/
  74:../Sources/drivers/tpm/tpm.h **** 
  75:../Sources/drivers/tpm/tpm.h **** static inline void TPM_InitCounter(TPM_Type *base);
  76:../Sources/drivers/tpm/tpm.h **** static inline uint16_t TPM_GetChValue(TPM_Type *base, uint8_t channel);
  77:../Sources/drivers/tpm/tpm.h **** static inline void TPM_SetChMatch(TPM_Type *base, uint8_t channel, uint16_t match);
  78:../Sources/drivers/tpm/tpm.h **** static inline void TPM_EnableIRQ(TPM_Type *base);
  79:../Sources/drivers/tpm/tpm.h **** static inline uint32_t TPM_GetIRQFlag(TPM_Type *base);
  80:../Sources/drivers/tpm/tpm.h **** static inline void TPM_ClearIRQFlag(TPM_Type *base);
  81:../Sources/drivers/tpm/tpm.h **** static inline void TPM_SetModulo(TPM_Type *base, uint16_t modulo);
  82:../Sources/drivers/tpm/tpm.h **** 
  83:../Sources/drivers/tpm/tpm.h **** /*FIM: PROT�TIPOS - FUN��ES INLINE*/
  84:../Sources/drivers/tpm/tpm.h **** /*=======================================================================================*/
  85:../Sources/drivers/tpm/tpm.h **** 
  86:../Sources/drivers/tpm/tpm.h **** /*PROT�TIPOS - FUN��ES P�BLICAS*/
  87:../Sources/drivers/tpm/tpm.h **** /*=======================================================================================*/
  88:../Sources/drivers/tpm/tpm.h **** 
  89:../Sources/drivers/tpm/tpm.h **** /**********************************************************************
  90:../Sources/drivers/tpm/tpm.h ****  * Fun��o		:	TPM_SetCounterClkSrc
  91:../Sources/drivers/tpm/tpm.h ****  *
  92:../Sources/drivers/tpm/tpm.h ****  * Descri��o	:   Define a fonte de clock utilizada pelo contador.
  93:../Sources/drivers/tpm/tpm.h ****  *
  94:../Sources/drivers/tpm/tpm.h ****  * Entradas		:   *base - registrador base do perif�rico TPM;
  95:../Sources/drivers/tpm/tpm.h ****  *                  src   - tipo enumerado que define a fonte de clock.
  96:../Sources/drivers/tpm/tpm.h ****  *
  97:../Sources/drivers/tpm/tpm.h ****  * Sa�das 		: GENERAL_STATUS_SUCCESSSS, se configura��o ocorreu corretamente;
  98:../Sources/drivers/tpm/tpm.h ****  *                  GENERAL_STATUS_FAIL, caso contr�rio.
  99:../Sources/drivers/tpm/tpm.h ****  *
 100:../Sources/drivers/tpm/tpm.h ****  * Coment�rios 	: 	Pode ser chamada ap�s a inicializa��o (TPM_Init).
 101:../Sources/drivers/tpm/tpm.h ****  *                  Por�m, contador vai iniciar contagem apenas quando
 102:../Sources/drivers/tpm/tpm.h ****  *                  essa fun��o for chamada.
 103:../Sources/drivers/tpm/tpm.h ****  * ********************************************************************/
 104:../Sources/drivers/tpm/tpm.h **** uint8_t TPM_SetCounterClkSrc(TPM_Type *base, tpmClkSrc_t src);
 105:../Sources/drivers/tpm/tpm.h **** 
 106:../Sources/drivers/tpm/tpm.h **** /**********************************************************************
 107:../Sources/drivers/tpm/tpm.h ****  * Fun��o		:	TPM_Init
 108:../Sources/drivers/tpm/tpm.h ****  *
 109:../Sources/drivers/tpm/tpm.h ****  * Descri��o	:   Inicializa��o do driver do m�dulo TPM.
 110:../Sources/drivers/tpm/tpm.h ****  *
 111:../Sources/drivers/tpm/tpm.h ****  * Entradas		:   *base    - registrador base do perif�rico TPM;
 112:../Sources/drivers/tpm/tpm.h ****  *                  modulo   - valor de final de contagem;
 113:../Sources/drivers/tpm/tpm.h ****  *                  prescale - tipo enumerado com um dos poss�veis
 114:../Sources/drivers/tpm/tpm.h ****  *                             valores de prescaler.
 115:../Sources/drivers/tpm/tpm.h ****  *
 116:../Sources/drivers/tpm/tpm.h ****  * Sa�das 		:   Nenhuma.
 117:../Sources/drivers/tpm/tpm.h ****  *
 118:../Sources/drivers/tpm/tpm.h ****  * Coment�rios 	: 	Nenhum.
 119:../Sources/drivers/tpm/tpm.h ****  * ********************************************************************/
 120:../Sources/drivers/tpm/tpm.h **** void TPM_Init(TPM_Type *base, uint16_t modulo, tpmPrescalerValues_t prescale);
 121:../Sources/drivers/tpm/tpm.h **** 
 122:../Sources/drivers/tpm/tpm.h **** /**********************************************************************
 123:../Sources/drivers/tpm/tpm.h ****  * Fun��o		:	TPM_InitChannel
 124:../Sources/drivers/tpm/tpm.h ****  *
 125:../Sources/drivers/tpm/tpm.h ****  * Descri��o	:   Inicializa um canal do m�dulo TPM.
 126:../Sources/drivers/tpm/tpm.h ****  *
 127:../Sources/drivers/tpm/tpm.h ****  * Entradas		:   *base  - registrador base do perif�rico TPM;
 128:../Sources/drivers/tpm/tpm.h ****  *                  chNum  - num�ro do canal;
 129:../Sources/drivers/tpm/tpm.h ****  *                  mode   - modo de opera��o do canal, sendo
 130:../Sources/drivers/tpm/tpm.h ****  * 							 definidos pelo tipo TPM_chMode_t.
 131:../Sources/drivers/tpm/tpm.h ****  * 					config - poss�veisconfigura��es de cada modo de
 132:../Sources/drivers/tpm/tpm.h ****  * 							 opera��o do canal, sendo definidos pelo
 133:../Sources/drivers/tpm/tpm.h ****  * 							 tipo TPM_chConfig_t.
 134:../Sources/drivers/tpm/tpm.h ****  *
 135:../Sources/drivers/tpm/tpm.h ****  * Sa�das		:   Nenhuma.
 136:../Sources/drivers/tpm/tpm.h ****  *
 137:../Sources/drivers/tpm/tpm.h ****  * Coment�rios 	: 	Nenhum.
 138:../Sources/drivers/tpm/tpm.h ****  * ********************************************************************/
 139:../Sources/drivers/tpm/tpm.h **** void TPM_InitChannel(TPM_Type *base, uint8_t chNum, tpmChMode_t mode, tpmChConfig_t config);
 140:../Sources/drivers/tpm/tpm.h **** 
 141:../Sources/drivers/tpm/tpm.h **** 
 142:../Sources/drivers/tpm/tpm.h **** /*FIM: PROT�TIPOS - FUN��ES P�BLICAS*/
 143:../Sources/drivers/tpm/tpm.h **** /*=======================================================================================*/
 144:../Sources/drivers/tpm/tpm.h **** 
 145:../Sources/drivers/tpm/tpm.h **** /*FUN��ES INLINE*/
 146:../Sources/drivers/tpm/tpm.h **** /*=======================================================================================*/
 147:../Sources/drivers/tpm/tpm.h **** 
 148:../Sources/drivers/tpm/tpm.h **** /**********************************************************************
 149:../Sources/drivers/tpm/tpm.h ****  * Fun��o		:	TPM_InitCounter
 150:../Sources/drivers/tpm/tpm.h ****  *
 151:../Sources/drivers/tpm/tpm.h ****  * Descri��o	:   Inicializa registrador contador do m�dulo TPM0.
 152:../Sources/drivers/tpm/tpm.h ****  *
 153:../Sources/drivers/tpm/tpm.h ****  * Entradas		:   *base - registrador base do perif�rico TPM.
 154:../Sources/drivers/tpm/tpm.h ****  *
 155:../Sources/drivers/tpm/tpm.h ****  * Sa�das		:   Nenhuma.
 156:../Sources/drivers/tpm/tpm.h ****  *
 157:../Sources/drivers/tpm/tpm.h ****  * Coment�rios 	: 	Nenhum.
 158:../Sources/drivers/tpm/tpm.h ****  * ********************************************************************/
 159:../Sources/drivers/tpm/tpm.h **** static inline void TPM_InitCounter(TPM_Type *base)
 160:../Sources/drivers/tpm/tpm.h **** {
 258              		.loc 4 160 0
 259              		.cfi_startproc
 260 0000 80B5     		push	{r7, lr}
 261              		.cfi_def_cfa_offset 8
 262              		.cfi_offset 7, -8
 263              		.cfi_offset 14, -4
 264 0002 82B0     		sub	sp, sp, #8
 265              		.cfi_def_cfa_offset 16
 266 0004 00AF     		add	r7, sp, #0
 267              		.cfi_def_cfa_register 7
 268 0006 7860     		str	r0, [r7, #4]
 161:../Sources/drivers/tpm/tpm.h **** 	assert(base);
 269              		.loc 4 161 0
 270 0008 7B68     		ldr	r3, [r7, #4]
 271 000a 002B     		cmp	r3, #0
 272 000c 06D1     		bne	.L16
 273              		.loc 4 161 0 is_stmt 0 discriminator 1
 274 000e 0849     		ldr	r1, .L17
 275 0010 084A     		ldr	r2, .L17+4
 276 0012 094B     		ldr	r3, .L17+8
 277 0014 081C     		mov	r0, r1
 278 0016 A121     		mov	r1, #161
 279 0018 FFF7FEFF 		bl	__assert_func
 280              	.L16:
 162:../Sources/drivers/tpm/tpm.h **** 	base->SC |= (TPM_SC_CMOD(0x1U));
 281              		.loc 4 162 0 is_stmt 1
 282 001c 7B68     		ldr	r3, [r7, #4]
 283 001e 1B68     		ldr	r3, [r3]
 284 0020 0822     		mov	r2, #8
 285 0022 1A43     		orr	r2, r3
 286 0024 7B68     		ldr	r3, [r7, #4]
 287 0026 1A60     		str	r2, [r3]
 163:../Sources/drivers/tpm/tpm.h **** }
 288              		.loc 4 163 0
 289 0028 BD46     		mov	sp, r7
 290 002a 02B0     		add	sp, sp, #8
 291              		@ sp needed
 292 002c 80BD     		pop	{r7, pc}
 293              	.L18:
 294 002e C046     		.align	2
 295              	.L17:
 296 0030 68000000 		.word	.LC11
 297 0034 00000000 		.word	__func__.5802
 298 0038 20000000 		.word	.LC3
 299              		.cfi_endproc
 300              	.LFE50:
 302              		.section	.text.TPM_EnableIRQ,"ax",%progbits
 303              		.align	2
 304              		.code	16
 305              		.thumb_func
 307              	TPM_EnableIRQ:
 308              	.LFB53:
 164:../Sources/drivers/tpm/tpm.h **** 
 165:../Sources/drivers/tpm/tpm.h **** /**********************************************************************
 166:../Sources/drivers/tpm/tpm.h ****  * Fun��o		:	TPM_GetChValue
 167:../Sources/drivers/tpm/tpm.h ****  *
 168:../Sources/drivers/tpm/tpm.h ****  * Descri��o	:   Retorna o valor do registrador contador no modo "Captura
 169:../Sources/drivers/tpm/tpm.h ****  * 					de Entrada" ou o valor de "match" no modo "Compara��o de Sa�da"
 170:../Sources/drivers/tpm/tpm.h ****  * 					do canal 0 m�dulo TPM.
 171:../Sources/drivers/tpm/tpm.h ****  *
 172:../Sources/drivers/tpm/tpm.h ****  * Entradas		:   *base - registrador base do perif�rico TPM;
 173:../Sources/drivers/tpm/tpm.h ****  *                  channel - valor do canal do TPM.
 174:../Sources/drivers/tpm/tpm.h ****  *
 175:../Sources/drivers/tpm/tpm.h ****  * Sa�das		:   modulo: valor de 1 � 65535.
 176:../Sources/drivers/tpm/tpm.h ****  *
 177:../Sources/drivers/tpm/tpm.h ****  * Coment�rios 	: 	Nenhum.
 178:../Sources/drivers/tpm/tpm.h ****  * ********************************************************************/
 179:../Sources/drivers/tpm/tpm.h **** static inline uint16_t TPM_GetChValue(TPM_Type *base, uint8_t channel)
 180:../Sources/drivers/tpm/tpm.h **** {
 181:../Sources/drivers/tpm/tpm.h **** 	assert(base);
 182:../Sources/drivers/tpm/tpm.h **** 
 183:../Sources/drivers/tpm/tpm.h **** 	return (uint16_t)base->CONTROLS[channel].CnV;
 184:../Sources/drivers/tpm/tpm.h **** }
 185:../Sources/drivers/tpm/tpm.h **** 
 186:../Sources/drivers/tpm/tpm.h **** 
 187:../Sources/drivers/tpm/tpm.h **** /**********************************************************************
 188:../Sources/drivers/tpm/tpm.h ****  * Fun��o		:	TPM_SetChMatch
 189:../Sources/drivers/tpm/tpm.h ****  *
 190:../Sources/drivers/tpm/tpm.h ****  * Descri��o	:    Define valor de "match" em canal do m�dulo TPM0.
 191:../Sources/drivers/tpm/tpm.h ****  *
 192:../Sources/drivers/tpm/tpm.h ****  * Entradas		:   *base - registrador base do perif�rico TPM;
 193:../Sources/drivers/tpm/tpm.h ****  *                  channel - valor do canal do TPM;
 194:../Sources/drivers/tpm/tpm.h ****  *                  match: valor de 2 � 65535.
 195:../Sources/drivers/tpm/tpm.h ****  *
 196:../Sources/drivers/tpm/tpm.h ****  * Sa�das		:   Nenhuma.
 197:../Sources/drivers/tpm/tpm.h ****  *
 198:../Sources/drivers/tpm/tpm.h ****  * Coment�rios 	: 	Nenhum.
 199:../Sources/drivers/tpm/tpm.h ****  * ********************************************************************/
 200:../Sources/drivers/tpm/tpm.h **** static inline void TPM_SetChMatch(TPM_Type *base, uint8_t channel, uint16_t match)
 201:../Sources/drivers/tpm/tpm.h **** {
 202:../Sources/drivers/tpm/tpm.h **** 	assert(base);
 203:../Sources/drivers/tpm/tpm.h **** 
 204:../Sources/drivers/tpm/tpm.h **** 	base->CONTROLS[channel].CnV = match;
 205:../Sources/drivers/tpm/tpm.h **** }
 206:../Sources/drivers/tpm/tpm.h **** 
 207:../Sources/drivers/tpm/tpm.h **** /**********************************************************************
 208:../Sources/drivers/tpm/tpm.h ****  * Fun��o		:	TPM_EnableIRQ
 209:../Sources/drivers/tpm/tpm.h ****  *
 210:../Sources/drivers/tpm/tpm.h ****  * Descri��o	:   Habilita a gera��o de interrup��o pelo m�dulo TPM.
 211:../Sources/drivers/tpm/tpm.h ****  *
 212:../Sources/drivers/tpm/tpm.h ****  * Entradas		:   *base - registrador base do perif�rico TPM.
 213:../Sources/drivers/tpm/tpm.h ****  *
 214:../Sources/drivers/tpm/tpm.h ****  * Sa�das		:   Nenhuma.
 215:../Sources/drivers/tpm/tpm.h ****  *
 216:../Sources/drivers/tpm/tpm.h ****  * Coment�rios 	: 	Nenhum.
 217:../Sources/drivers/tpm/tpm.h ****  * ********************************************************************/
 218:../Sources/drivers/tpm/tpm.h **** static inline void TPM_EnableIRQ(TPM_Type *base)
 219:../Sources/drivers/tpm/tpm.h **** {
 309              		.loc 4 219 0
 310              		.cfi_startproc
 311 0000 80B5     		push	{r7, lr}
 312              		.cfi_def_cfa_offset 8
 313              		.cfi_offset 7, -8
 314              		.cfi_offset 14, -4
 315 0002 82B0     		sub	sp, sp, #8
 316              		.cfi_def_cfa_offset 16
 317 0004 00AF     		add	r7, sp, #0
 318              		.cfi_def_cfa_register 7
 319 0006 7860     		str	r0, [r7, #4]
 220:../Sources/drivers/tpm/tpm.h ****    base->SC |= TPM_SC_TOIE_MASK;
 320              		.loc 4 220 0
 321 0008 7B68     		ldr	r3, [r7, #4]
 322 000a 1B68     		ldr	r3, [r3]
 323 000c 4022     		mov	r2, #64
 324 000e 1A43     		orr	r2, r3
 325 0010 7B68     		ldr	r3, [r7, #4]
 326 0012 1A60     		str	r2, [r3]
 221:../Sources/drivers/tpm/tpm.h **** }
 327              		.loc 4 221 0
 328 0014 BD46     		mov	sp, r7
 329 0016 02B0     		add	sp, sp, #8
 330              		@ sp needed
 331 0018 80BD     		pop	{r7, pc}
 332              		.cfi_endproc
 333              	.LFE53:
 335 001a C046     		.section	.text.TPM_GetIRQFlag,"ax",%progbits
 336              		.align	2
 337              		.code	16
 338              		.thumb_func
 340              	TPM_GetIRQFlag:
 341              	.LFB54:
 222:../Sources/drivers/tpm/tpm.h **** 
 223:../Sources/drivers/tpm/tpm.h **** /**********************************************************************
 224:../Sources/drivers/tpm/tpm.h ****  * Fun��o		:	TPM_GetIRQFlag
 225:../Sources/drivers/tpm/tpm.h ****  *
 226:../Sources/drivers/tpm/tpm.h ****  * Descri��o	:   Retorna o valor da flag de interrup��o gerada
 227:../Sources/drivers/tpm/tpm.h ****  * 					pelo m�dulo TPM.
 228:../Sources/drivers/tpm/tpm.h ****  *
 229:../Sources/drivers/tpm/tpm.h ****  * Entradas		:   *base - registrador base do perif�rico TPM.
 230:../Sources/drivers/tpm/tpm.h ****  *
 231:../Sources/drivers/tpm/tpm.h ****  * Sa�das		:   0	,  se n�o houve interrup��o;
 232:../Sources/drivers/tpm/tpm.h ****  * 					!0	,  se houve interrup��o.
 233:../Sources/drivers/tpm/tpm.h ****  *
 234:../Sources/drivers/tpm/tpm.h ****  * Coment�rios 	: 	Nenhum.
 235:../Sources/drivers/tpm/tpm.h ****  * ********************************************************************/
 236:../Sources/drivers/tpm/tpm.h **** static inline uint32_t TPM_GetIRQFlag(TPM_Type *base)
 237:../Sources/drivers/tpm/tpm.h **** {
 342              		.loc 4 237 0
 343              		.cfi_startproc
 344 0000 80B5     		push	{r7, lr}
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 7, -8
 347              		.cfi_offset 14, -4
 348 0002 82B0     		sub	sp, sp, #8
 349              		.cfi_def_cfa_offset 16
 350 0004 00AF     		add	r7, sp, #0
 351              		.cfi_def_cfa_register 7
 352 0006 7860     		str	r0, [r7, #4]
 238:../Sources/drivers/tpm/tpm.h ****    return base->SC & TPM_SC_TOF_MASK;
 353              		.loc 4 238 0
 354 0008 7B68     		ldr	r3, [r7, #4]
 355 000a 1A68     		ldr	r2, [r3]
 356 000c 8023     		mov	r3, #128
 357 000e 1340     		and	r3, r2
 239:../Sources/drivers/tpm/tpm.h **** }
 358              		.loc 4 239 0
 359 0010 181C     		mov	r0, r3
 360 0012 BD46     		mov	sp, r7
 361 0014 02B0     		add	sp, sp, #8
 362              		@ sp needed
 363 0016 80BD     		pop	{r7, pc}
 364              		.cfi_endproc
 365              	.LFE54:
 367              		.section	.text.TPM_ClearIRQFlag,"ax",%progbits
 368              		.align	2
 369              		.code	16
 370              		.thumb_func
 372              	TPM_ClearIRQFlag:
 373              	.LFB55:
 240:../Sources/drivers/tpm/tpm.h **** 
 241:../Sources/drivers/tpm/tpm.h **** /**********************************************************************
 242:../Sources/drivers/tpm/tpm.h ****  * Fun��o		:	TPM_ClearIRQFlag
 243:../Sources/drivers/tpm/tpm.h ****  *
 244:../Sources/drivers/tpm/tpm.h ****  * Descri��o	:   Limpa a flag de interrup��o gerada pelo m�dulo TPM.
 245:../Sources/drivers/tpm/tpm.h ****  *
 246:../Sources/drivers/tpm/tpm.h ****  * Entradas		:   *base - registrador base do perif�rico TPM.
 247:../Sources/drivers/tpm/tpm.h ****  *
 248:../Sources/drivers/tpm/tpm.h ****  * Sa�das		:   Nenhuma.
 249:../Sources/drivers/tpm/tpm.h ****  *
 250:../Sources/drivers/tpm/tpm.h ****  * Coment�rios 	: 	Nenhum.
 251:../Sources/drivers/tpm/tpm.h ****  * ********************************************************************/
 252:../Sources/drivers/tpm/tpm.h **** static inline void TPM_ClearIRQFlag(TPM_Type *base)
 253:../Sources/drivers/tpm/tpm.h **** {
 374              		.loc 4 253 0
 375              		.cfi_startproc
 376 0000 80B5     		push	{r7, lr}
 377              		.cfi_def_cfa_offset 8
 378              		.cfi_offset 7, -8
 379              		.cfi_offset 14, -4
 380 0002 82B0     		sub	sp, sp, #8
 381              		.cfi_def_cfa_offset 16
 382 0004 00AF     		add	r7, sp, #0
 383              		.cfi_def_cfa_register 7
 384 0006 7860     		str	r0, [r7, #4]
 254:../Sources/drivers/tpm/tpm.h **** 	base->SC |= TPM_SC_TOF_MASK;
 385              		.loc 4 254 0
 386 0008 7B68     		ldr	r3, [r7, #4]
 387 000a 1B68     		ldr	r3, [r3]
 388 000c 8022     		mov	r2, #128
 389 000e 1A43     		orr	r2, r3
 390 0010 7B68     		ldr	r3, [r7, #4]
 391 0012 1A60     		str	r2, [r3]
 255:../Sources/drivers/tpm/tpm.h **** }
 392              		.loc 4 255 0
 393 0014 BD46     		mov	sp, r7
 394 0016 02B0     		add	sp, sp, #8
 395              		@ sp needed
 396 0018 80BD     		pop	{r7, pc}
 397              		.cfi_endproc
 398              	.LFE55:
 400 001a C046     		.section	.text.TPM0_IRQHandler,"ax",%progbits
 401              		.align	2
 402              		.global	TPM0_IRQHandler
 403              		.code	16
 404              		.thumb_func
 406              	TPM0_IRQHandler:
 407              	.LFB57:
 408              		.file 5 "../Sources/main_tpm.c"
   1:../Sources/main_tpm.c **** #include "mcu_general_config.h"
   2:../Sources/main_tpm.c **** #include "generic_drivers/lcd/lcd.h"
   3:../Sources/main_tpm.c **** #include "libraries/delay/delay.h"
   4:../Sources/main_tpm.c **** #include "libraries/emb_util/emb_util.h"
   5:../Sources/main_tpm.c **** #include "drivers/port/port.h"
   6:../Sources/main_tpm.c **** #include "drivers/gpio/gpio.h"
   7:../Sources/main_tpm.c **** #include "drivers/tpm/tpm.h"
   8:../Sources/main_tpm.c **** 
   9:../Sources/main_tpm.c **** void TPM0_IRQHandler(void)
  10:../Sources/main_tpm.c **** {
 409              		.loc 5 10 0
 410              		.cfi_startproc
 411 0000 80B5     		push	{r7, lr}
 412              		.cfi_def_cfa_offset 8
 413              		.cfi_offset 7, -8
 414              		.cfi_offset 14, -4
 415 0002 00AF     		add	r7, sp, #0
 416              		.cfi_def_cfa_register 7
  11:../Sources/main_tpm.c **** 	if( TPM_GetIRQFlag( TPM0 ) )
 417              		.loc 5 11 0
 418 0004 084B     		ldr	r3, .L25
 419 0006 181C     		mov	r0, r3
 420 0008 FFF7FEFF 		bl	TPM_GetIRQFlag
 421 000c 031C     		mov	r3, r0
 422 000e 002B     		cmp	r3, #0
 423 0010 04D0     		beq	.L24
  12:../Sources/main_tpm.c ****     {
  13:../Sources/main_tpm.c ****         GPIO_TogglePin( GPIOB, 9 );
 424              		.loc 5 13 0
 425 0012 064B     		ldr	r3, .L25+4
 426 0014 181C     		mov	r0, r3
 427 0016 0921     		mov	r1, #9
 428 0018 FFF7FEFF 		bl	GPIO_TogglePin
 429              	.L24:
  14:../Sources/main_tpm.c ****     }
  15:../Sources/main_tpm.c **** 
  16:../Sources/main_tpm.c **** 	TPM_ClearIRQFlag( TPM0 );
 430              		.loc 5 16 0
 431 001c 024B     		ldr	r3, .L25
 432 001e 181C     		mov	r0, r3
 433 0020 FFF7FEFF 		bl	TPM_ClearIRQFlag
  17:../Sources/main_tpm.c **** }
 434              		.loc 5 17 0
 435 0024 BD46     		mov	sp, r7
 436              		@ sp needed
 437 0026 80BD     		pop	{r7, pc}
 438              	.L26:
 439              		.align	2
 440              	.L25:
 441 0028 00800340 		.word	1073971200
 442 002c 40F00F40 		.word	1074786368
 443              		.cfi_endproc
 444              	.LFE57:
 446              		.section	.text.main,"ax",%progbits
 447              		.align	2
 448              		.global	main
 449              		.code	16
 450              		.thumb_func
 452              	main:
 453              	.LFB58:
  18:../Sources/main_tpm.c **** 
  19:../Sources/main_tpm.c **** int main(void)
  20:../Sources/main_tpm.c **** {
 454              		.loc 5 20 0
 455              		.cfi_startproc
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 82B0     		sub	sp, sp, #8
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
  21:../Sources/main_tpm.c **** 	const uint16_t tpmPwmModulo = 0xBFFFU;
 464              		.loc 5 21 0
 465 0006 BB1D     		add	r3, r7, #6
 466 0008 134A     		ldr	r2, .L29
 467 000a 1A80     		strh	r2, [r3]
  22:../Sources/main_tpm.c **** 
  23:../Sources/main_tpm.c **** 	/*Define como fonte de clock do contador o FLL que gera 20.971520 MHz.*/
  24:../Sources/main_tpm.c **** 	TPM_SetCounterClkSrc( TPM0, TPM_CNT_CLOCK_FLL );
 468              		.loc 5 24 0
 469 000c 134B     		ldr	r3, .L29+4
 470 000e 181C     		mov	r0, r3
 471 0010 0121     		mov	r1, #1
 472 0012 FFF7FEFF 		bl	TPM_SetCounterClkSrc
  25:../Sources/main_tpm.c **** 	/*Inicializa TPM0, dividindo clock de entrada por 128, resultando em
  26:../Sources/main_tpm.c **** 	* um clock do contador de 20,971520 MHz/128 = 163.840 Hz.
  27:../Sources/main_tpm.c **** 	* Dessa forma, a frequ�ncia de fim de contagem � de 163.840 Hz/tpmPwmModulo */
  28:../Sources/main_tpm.c **** 	TPM_Init( TPM0, tpmPwmModulo, TPM_PRESCALER_DIV_128 );
 473              		.loc 5 28 0
 474 0016 114A     		ldr	r2, .L29+4
 475 0018 BB1D     		add	r3, r7, #6
 476 001a 1B88     		ldrh	r3, [r3]
 477 001c 101C     		mov	r0, r2
 478 001e 191C     		mov	r1, r3
 479 0020 0722     		mov	r2, #7
 480 0022 FFF7FEFF 		bl	TPM_Init
  29:../Sources/main_tpm.c **** 	TPM_EnableIRQ( TPM0 );
 481              		.loc 5 29 0
 482 0026 0D4B     		ldr	r3, .L29+4
 483 0028 181C     		mov	r0, r3
 484 002a FFF7FEFF 		bl	TPM_EnableIRQ
  30:../Sources/main_tpm.c **** 
  31:../Sources/main_tpm.c **** 	PORT_Init( PORTB );
 485              		.loc 5 31 0
 486 002e 0C4B     		ldr	r3, .L29+8
 487 0030 181C     		mov	r0, r3
 488 0032 FFF7FEFF 		bl	PORT_Init
  32:../Sources/main_tpm.c **** 	GPIO_InitOutputPin( GPIOB, 9, 1 );
 489              		.loc 5 32 0
 490 0036 0B4B     		ldr	r3, .L29+12
 491 0038 181C     		mov	r0, r3
 492 003a 0921     		mov	r1, #9
 493 003c 0122     		mov	r2, #1
 494 003e FFF7FEFF 		bl	GPIO_InitOutputPin
  33:../Sources/main_tpm.c **** 
  34:../Sources/main_tpm.c **** 	NVIC_EnableIRQ( TPM0_IRQn );
 495              		.loc 5 34 0
 496 0042 1120     		mov	r0, #17
 497 0044 FFF7FEFF 		bl	NVIC_EnableIRQ
  35:../Sources/main_tpm.c **** 
  36:../Sources/main_tpm.c **** 	Delay_Init( );
 498              		.loc 5 36 0
 499 0048 FFF7FEFF 		bl	Delay_Init
  37:../Sources/main_tpm.c **** 	TPM_InitCounter( TPM0 ); /*Inicializa registrador contador*/
 500              		.loc 5 37 0
 501 004c 034B     		ldr	r3, .L29+4
 502 004e 181C     		mov	r0, r3
 503 0050 FFF7FEFF 		bl	TPM_InitCounter
 504              	.L28:
  38:../Sources/main_tpm.c **** 
  39:../Sources/main_tpm.c ****     for ( ; ; )
  40:../Sources/main_tpm.c ****     {
  41:../Sources/main_tpm.c **** 
  42:../Sources/main_tpm.c ****     }
 505              		.loc 5 42 0 discriminator 1
 506 0054 FEE7     		b	.L28
 507              	.L30:
 508 0056 C046     		.align	2
 509              	.L29:
 510 0058 FFBFFFFF 		.word	-16385
 511 005c 00800340 		.word	1073971200
 512 0060 00A00440 		.word	1074044928
 513 0064 40F00F40 		.word	1074786368
 514              		.cfi_endproc
 515              	.LFE58:
 517              		.section	.rodata.__func__.5715,"a",%progbits
 518              		.align	2
 521              	__func__.5715:
 522 0000 4750494F 		.ascii	"GPIO_TogglePin\000"
 522      5F546F67 
 522      676C6550 
 522      696E00
 523 000f 00       		.section	.rodata.__func__.5655,"a",%progbits
 524              		.align	2
 527              	__func__.5655:
 528 0000 504F5254 		.ascii	"PORT_Init\000"
 528      5F496E69 
 528      7400
 529 000a 0000     		.section	.rodata.__func__.5802,"a",%progbits
 530              		.align	2
 533              	__func__.5802:
 534 0000 54504D5F 		.ascii	"TPM_InitCounter\000"
 534      496E6974 
 534      436F756E 
 534      74657200 
 535              		.text
 536              	.Letext0:
 537              		.file 6 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\machine\\_default_types.h"
 538              		.file 7 "c:\\freescale\\kds_v3\\toolchain\\arm-none-eabi\\include\\stdint.h"
 539              		.file 8 "../Includes/MKL05Z4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main_tpm.c
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:18     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:22     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:58     .text.NVIC_EnableIRQ:00000028 $d
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:63     .rodata:00000000 $d
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:70     .text.PORT_Init:00000000 $t
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:74     .text.PORT_Init:00000000 PORT_Init
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:156    .text.PORT_Init:00000074 $d
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:527    .rodata.__func__.5655:00000000 __func__.5655
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:175    .text.GPIO_TogglePin:00000000 $t
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:179    .text.GPIO_TogglePin:00000000 GPIO_TogglePin
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:239    .text.GPIO_TogglePin:00000050 $d
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:521    .rodata.__func__.5715:00000000 __func__.5715
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:251    .text.TPM_InitCounter:00000000 $t
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:255    .text.TPM_InitCounter:00000000 TPM_InitCounter
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:296    .text.TPM_InitCounter:00000030 $d
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:533    .rodata.__func__.5802:00000000 __func__.5802
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:303    .text.TPM_EnableIRQ:00000000 $t
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:307    .text.TPM_EnableIRQ:00000000 TPM_EnableIRQ
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:336    .text.TPM_GetIRQFlag:00000000 $t
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:340    .text.TPM_GetIRQFlag:00000000 TPM_GetIRQFlag
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:368    .text.TPM_ClearIRQFlag:00000000 $t
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:372    .text.TPM_ClearIRQFlag:00000000 TPM_ClearIRQFlag
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:401    .text.TPM0_IRQHandler:00000000 $t
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:406    .text.TPM0_IRQHandler:00000000 TPM0_IRQHandler
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:441    .text.TPM0_IRQHandler:00000028 $d
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:447    .text.main:00000000 $t
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:452    .text.main:00000000 main
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:510    .text.main:00000058 $d
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:518    .rodata.__func__.5715:00000000 $d
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:524    .rodata.__func__.5655:00000000 $d
C:\Users\mathe\AppData\Local\Temp\ccm1suzd.s:530    .rodata.__func__.5802:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.e19fef13b9966be9a9a0df56dde4c190
                           .group:00000000 wm4.features.h.22.6a4ca7cd053637cc1d0db6c16f39b2d7
                           .group:00000000 wm4._default_types.h.15.8b2cb27e528498f8ff711db085d6e489
                           .group:00000000 wm4.stdint.h.20.796e373797e732130a803d4c0338fa1b
                           .group:00000000 wm4.MKL05Z4.h.103.c5a242a6313ded8e4c7cb62acb8df21b
                           .group:00000000 wm4.core_cm0plus.h.43.8d0a7c3b62d57d3de08e0cf260e796f5
                           .group:00000000 wm4.core_cmInstr.h.39.440aa208ad4c1679c5765c09acc09994
                           .group:00000000 wm4.core_cm0plus.h.160.b16144213bf005ce96482cc39658f3eb
                           .group:00000000 wm4.system_MKL05Z4.h.101.1304ea5d52ecf5deae71ccb0772f8612
                           .group:00000000 wm4.MKL05Z4.h.274.69d105c645fb54a4873c1961c705a2ed
                           .group:00000000 wm4.mcu_general_config.h.49.464b67ff30c511db75624d944293d898
                           .group:00000000 wm4.lcd.h.59.7bba9926f48e0bbbc91322b4531ef773
                           .group:00000000 wm4.delay.h.39.43a7ebb51f451ed360034624059d6293
                           .group:00000000 wm4.stddef.h.39.daafd3d79fe2f3a84d2d73d7d4e706f8
                           .group:00000000 wm4.stdbool.h.29.1c9ee6859ce8145f7838a4f2549ccec2
                           .group:00000000 wm4.newlib.h.8.fec018e441fee7bfa1923812ad010f97
                           .group:00000000 wm4.config.h.212.4163ef2871a828c674038d036b081cfd
                           .group:00000000 wm4._ansi.h.23.2147fde150631f5584b9dc29b914d1b8
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.stdlib.h.53.a73f7e963d962393b7f9086194931e4a
                           .group:00000000 wm4.cdefs.h.56.a2d04de9d47039852021e66fca39bb58
                           .group:00000000 wm4.string.h.15.dab3980bf35408a4c507182805e2de3a
                           .group:00000000 wm4.math.h.35.543015094efee9028e0e4b7949018580
                           .group:00000000 wm4.emb_util.h.51.8ea7742b72b4040e74b9712312555cf1
                           .group:00000000 wm4.assert.h.11.7fe9eb241be6b0fee772a1e693b81ae3

UNDEFINED SYMBOLS
__assert_func
TPM_SetCounterClkSrc
TPM_Init
GPIO_InitOutputPin
Delay_Init
